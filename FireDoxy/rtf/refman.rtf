{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment FireForce_Final  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.0 \par
}}FireForce_Final}
{\comment Generated by doxygen 1.10.0.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt FireForce_Final}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version 1.0\par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\par \pard\plain 
\par \pard\plain 
\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
FireForce\par \pard\plain 
{\tc\tcl1 \v FireForce}
{\xe \v FireForce}
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
 FIreforce es un proyecto que busca adecuar un sistema de sensores a un vehiculo de control autonomo, para la respuesta contra incendios.\par
El vehiculo Fireforce est\'E1 equipado con una serie de sensores y actuadores que le permiten navegar de forma aut\'F3noma , detectar obstaculos y fuego, para posteriormente activar un sistema de extinci\'F3n de incendios. El veh\'EDculo se controla mediante el sistema de la Raspberry Pi Pico.\par
El codigo fuente presente se divide en dos etapas, una modular, en donde est\'E1n las funcionalidades por separado del sistema, como lo es el funcionamiento de los actuadores y la sensorica del mismo. As\'ED c\'F3mo un modulo m\'E1s complejo en donde se integran todas las funcionalidades, mediante el uso de flujo de programa conocido como Polling + Interrupciones. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Data Structure Index\par \pard\plain 
{\tc \v Data Structure Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Data Structures\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the data structures with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b myFlags_t} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Estructura para almacenar las banderas de interrupci\'F3n })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAED \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b build/generated/pico_base/pico/config_autogen.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Codigo_Final/Bombero/build/generated/pico_base/pico/config_autogen.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Modulo_Motor/build/generated/pico_base/pico/config_autogen.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Modulo_Temperatura/build/generated/pico_base/pico/config_autogen.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b build/generated/pico_base/pico/version.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Codigo_Final/Bombero/build/generated/pico_base/pico/version.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Modulo_Motor/build/generated/pico_base/pico/version.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Modulo_Temperatura/build/generated/pico_base/pico/version.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Codigo_Final/Bombero/access_sys.c} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Archivo principal del sistema de acceso })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Modulo_Motor/access_sys.c} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Programa para controlar la direcci\'F3n de un motor DC })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Temperatura.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Temperatura.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Archivo de cabecera para la funci\'F3n de medici\'F3n de temperatura })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b UltraS.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b UltraS.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Archivo de cabecera para funciones de medici\'F3n de distancia con un sensor ultrasonido })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gpio_led.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b proxim.c} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Programa para medir la distancia utilizando un sensor de proximidad HC-SR04 })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b adc_dma.c} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Programa para leer la temperatura de un sensor DS18B20 })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Data Structure Documentation{\tc \v Data Structure Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
myFlags_t Union Reference\par \pard\plain 
{\tc\tcl2 \v myFlags_t}
{\xe \v myFlags_t}
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Estructura para almacenar las banderas de interrupci\'F3n. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Data Fields\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b W}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Variable de 8 bits que representa las interrupciones con las banderas. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct \{\par

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
\~ bool {\b Muro}:1\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Se activa si el sistema detecta un obstaculo. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
\~ bool {\b Fuego}:1\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
se activa si el sensor detecta temperaturas muy altas }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
\~ uint8_t :2\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Bits reservados no utilizados (padding) }{
}\par
}\par}
}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
\} {\b B}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Estructura para almacenar las banderas de interrupci\'F3n. \par
}{
Definition at line {\b 43} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Field Documentation\par
\pard\plain 
{\xe \v __pad0__\:myFlags_t}
{\xe \v myFlags_t\:__pad0__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t __pad0__}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Bits reservados no utilizados (padding) }}\par
{
Definition at line {\b 48} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
{\xe \v B\:myFlags_t}
{\xe \v myFlags_t\:B}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct  \{ ... \}  B}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Fuego\:myFlags_t}
{\xe \v myFlags_t\:Fuego}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Fuego}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
se activa si el sensor detecta temperaturas muy altas }}\par
{
Definition at line {\b 47} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
{\xe \v Muro\:myFlags_t}
{\xe \v myFlags_t\:Muro}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Muro}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Se activa si el sistema detecta un obstaculo. }}\par
{
Definition at line {\b 46} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
{\xe \v W\:myFlags_t}
{\xe \v myFlags_t\:W}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t W}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Variable de 8 bits que representa las interrupciones con las banderas. }}\par
{
Definition at line {\b 44} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c File Reference\par \pard\plain 
{\tc\tcl2 \v CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c}
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b main} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, argv)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_compiler} = "INFO" ":" "compiler[" COMPILER_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_simulate} = "INFO" ":" "simulate[" SIMULATE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b qnxnto} = "INFO" ":" "qnxnto[]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_cray} = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_version} = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_version_internal} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_simulate_version} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_platform} = "INFO" ":" "platform[" PLATFORM_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_arch} = "INFO" ":" "arch[" ARCHITECTURE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_standard_default}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_extensions_default}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void main ()}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 836} of file {\b build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v main\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, argv )}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 839} of file {\b build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v info_arch\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_arch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]"}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 799} of file {\b build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_compiler\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_compiler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]"}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 436} of file {\b build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_cray\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_cray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 446} of file {\b build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_language_extensions_default\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_language_extensions_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_extensions_default}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
{\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
{\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
{\cf21   !defined(__STRICT_ANSI__)}\par
  {\cf22 "ON"}\par
{\cf21 #else}\par
  {\cf22 "OFF"}\par
{\cf21 #endif}\par
{\cf22 "]"}\par
}
{
Definition at line {\b 823} of file {\b build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_language_standard_default\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_language_standard_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_standard_default}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =\par
  {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["} C_VERSION {\cf22 "]"}\par
}
{
Definition at line {\b 820} of file {\b build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_platform\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_platform}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]"}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 798} of file {\b build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_simulate\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_simulate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]"}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 438} of file {\b build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_simulate_version\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_simulate_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_simulate_version[]}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
  SIMULATE_VERSION_MAJOR,\par
{\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
  {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
{\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
   {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
{\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
    {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
{\cf21 #   endif}\par
{\cf21 #  endif}\par
{\cf21 # endif}\par
  {\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 778} of file {\b build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_version\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 745} of file {\b build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_version_internal\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_version_internal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const  * info_version_internal}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
  {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
  COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 767} of file {\b build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v qnxnto\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:qnxnto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* qnxnto = "INFO" ":" "qnxnto[]"}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 442} of file {\b build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c\par \pard\plain 
{\tc\tcl2 \v CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifdef __cplusplus}\par
00002 {\cf21 # error "A C++ compiler has been selected for C."}\par
00003 {\cf21 #endif}\par
00004 \par
00005 {\cf21 #if defined(__18CXX)}\par
00006 {\cf21 # define ID_VOID_MAIN}\par
00007 {\cf21 #endif}\par
00008 {\cf21 #if defined(__CLASSIC_C__)}\par
00009 {\cf20 /* cv-qualifiers did not exist in K&R C */}\par
00010 {\cf21 # define const}\par
00011 {\cf21 # define volatile}\par
00012 {\cf21 #endif}\par
00013 \par
00014 {\cf21 #if !defined(__has_include)}\par
00015 {\cf20 /* If the compiler does not have __has_include, pretend the answer is}\par
00016 {\cf20    always no.  */}\par
00017 {\cf21 #  define __has_include(x) 0}\par
00018 {\cf21 #endif}\par
00019 \par
00020 \par
00021 {\cf20 /* Version number components: V=Version, R=Revision, P=Patch}\par
00022 {\cf20    Version date components:   YYYY=Year, MM=Month,   DD=Day  */}\par
00023 \par
00024 {\cf21 #if defined(__INTEL_COMPILER) || defined(__ICC)}\par
00025 {\cf21 # define COMPILER_ID "Intel"}\par
00026 {\cf21 # if defined(_MSC_VER)}\par
00027 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00028 {\cf21 # endif}\par
00029 {\cf21 # if defined(__GNUC__)}\par
00030 {\cf21 #  define SIMULATE_ID "GNU"}\par
00031 {\cf21 # endif}\par
00032   {\cf20 /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,}\par
00033 {\cf20      except that a few beta releases use the old format with V=2021.  */}\par
00034 {\cf21 # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111}\par
00035 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)}\par
00036 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)}\par
00037 {\cf21 #  if defined(__INTEL_COMPILER_UPDATE)}\par
00038 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)}\par
00039 {\cf21 #  else}\par
00040 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)}\par
00041 {\cf21 #  endif}\par
00042 {\cf21 # else}\par
00043 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)}\par
00044 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)}\par
00045    {\cf20 /* The third version component from --version is an update index,}\par
00046 {\cf20       but no macro is provided for it.  */}\par
00047 {\cf21 #  define COMPILER_VERSION_PATCH DEC(0)}\par
00048 {\cf21 # endif}\par
00049 {\cf21 # if defined(__INTEL_COMPILER_BUILD_DATE)}\par
00050    {\cf20 /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */}\par
00051 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)}\par
00052 {\cf21 # endif}\par
00053 {\cf21 # if defined(_MSC_VER)}\par
00054    {\cf20 /* _MSC_VER = VVRR */}\par
00055 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00056 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00057 {\cf21 # endif}\par
00058 {\cf21 # if defined(__GNUC__)}\par
00059 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00060 {\cf21 # elif defined(__GNUG__)}\par
00061 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00062 {\cf21 # endif}\par
00063 {\cf21 # if defined(__GNUC_MINOR__)}\par
00064 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00065 {\cf21 # endif}\par
00066 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00067 {\cf21 #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00068 {\cf21 # endif}\par
00069 \par
00070 {\cf21 #elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)}\par
00071 {\cf21 # define COMPILER_ID "IntelLLVM"}\par
00072 {\cf21 #if defined(_MSC_VER)}\par
00073 {\cf21 # define SIMULATE_ID "MSVC"}\par
00074 {\cf21 #endif}\par
00075 {\cf21 #if defined(__GNUC__)}\par
00076 {\cf21 # define SIMULATE_ID "GNU"}\par
00077 {\cf21 #endif}\par
00078 {\cf20 /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and}\par
00079 {\cf20  * later.  Look for 6 digit vs. 8 digit version number to decide encoding.}\par
00080 {\cf20  * VVVV is no smaller than the current year when a version is released.}\par
00081 {\cf20  */}\par
00082 {\cf21 #if __INTEL_LLVM_COMPILER < 1000000L}\par
00083 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)}\par
00084 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)}\par
00085 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)}\par
00086 {\cf21 #else}\par
00087 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)}\par
00088 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)}\par
00089 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)}\par
00090 {\cf21 #endif}\par
00091 {\cf21 #if defined(_MSC_VER)}\par
00092   {\cf20 /* _MSC_VER = VVRR */}\par
00093 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00094 {\cf21 # define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00095 {\cf21 #endif}\par
00096 {\cf21 #if defined(__GNUC__)}\par
00097 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00098 {\cf21 #elif defined(__GNUG__)}\par
00099 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00100 {\cf21 #endif}\par
00101 {\cf21 #if defined(__GNUC_MINOR__)}\par
00102 {\cf21 # define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00103 {\cf21 #endif}\par
00104 {\cf21 #if defined(__GNUC_PATCHLEVEL__)}\par
00105 {\cf21 # define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00106 {\cf21 #endif}\par
00107 \par
00108 {\cf21 #elif defined(__PATHCC__)}\par
00109 {\cf21 # define COMPILER_ID "PathScale"}\par
00110 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PATHCC__)}\par
00111 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)}\par
00112 {\cf21 # if defined(__PATHCC_PATCHLEVEL__)}\par
00113 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)}\par
00114 {\cf21 # endif}\par
00115 \par
00116 {\cf21 #elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)}\par
00117 {\cf21 # define COMPILER_ID "Embarcadero"}\par
00118 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)}\par
00119 {\cf21 # define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)}\par
00120 {\cf21 # define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)}\par
00121 \par
00122 {\cf21 #elif defined(__BORLANDC__)}\par
00123 {\cf21 # define COMPILER_ID "Borland"}\par
00124   {\cf20 /* __BORLANDC__ = 0xVRR */}\par
00125 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)}\par
00126 {\cf21 # define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)}\par
00127 \par
00128 {\cf21 #elif defined(__WATCOMC__) && __WATCOMC__ < 1200}\par
00129 {\cf21 # define COMPILER_ID "Watcom"}\par
00130    {\cf20 /* __WATCOMC__ = VVRR */}\par
00131 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)}\par
00132 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00133 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00134 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00135 {\cf21 # endif}\par
00136 \par
00137 {\cf21 #elif defined(__WATCOMC__)}\par
00138 {\cf21 # define COMPILER_ID "OpenWatcom"}\par
00139    {\cf20 /* __WATCOMC__ = VVRP + 1100 */}\par
00140 {\cf21 # define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)}\par
00141 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00142 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00143 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00144 {\cf21 # endif}\par
00145 \par
00146 {\cf21 #elif defined(__SUNPRO_C)}\par
00147 {\cf21 # define COMPILER_ID "SunPro"}\par
00148 {\cf21 # if __SUNPRO_C >= 0x5100}\par
00149    {\cf20 /* __SUNPRO_C = 0xVRRP */}\par
00150 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>12)}\par
00151 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xFF)}\par
00152 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)}\par
00153 {\cf21 # else}\par
00154    {\cf20 /* __SUNPRO_CC = 0xVRP */}\par
00155 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>8)}\par
00156 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xF)}\par
00157 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)}\par
00158 {\cf21 # endif}\par
00159 \par
00160 {\cf21 #elif defined(__HP_cc)}\par
00161 {\cf21 # define COMPILER_ID "HP"}\par
00162   {\cf20 /* __HP_cc = VVRRPP */}\par
00163 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__HP_cc/10000)}\par
00164 {\cf21 # define COMPILER_VERSION_MINOR DEC(__HP_cc/100 % 100)}\par
00165 {\cf21 # define COMPILER_VERSION_PATCH DEC(__HP_cc     % 100)}\par
00166 \par
00167 {\cf21 #elif defined(__DECC)}\par
00168 {\cf21 # define COMPILER_ID "Compaq"}\par
00169   {\cf20 /* __DECC_VER = VVRRTPPPP */}\par
00170 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__DECC_VER/10000000)}\par
00171 {\cf21 # define COMPILER_VERSION_MINOR DEC(__DECC_VER/100000  % 100)}\par
00172 {\cf21 # define COMPILER_VERSION_PATCH DEC(__DECC_VER         % 10000)}\par
00173 \par
00174 {\cf21 #elif defined(__IBMC__) && defined(__COMPILER_VER__)}\par
00175 {\cf21 # define COMPILER_ID "zOS"}\par
00176   {\cf20 /* __IBMC__ = VRP */}\par
00177 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00178 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00179 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00180 \par
00181 {\cf21 #elif defined(__open_xl__) && defined(__clang__)}\par
00182 {\cf21 # define COMPILER_ID "IBMClang"}\par
00183 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)}\par
00184 {\cf21 # define COMPILER_VERSION_MINOR DEC(__open_xl_release__)}\par
00185 {\cf21 # define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)}\par
00186 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)}\par
00187 \par
00188 \par
00189 {\cf21 #elif defined(__ibmxl__) && defined(__clang__)}\par
00190 {\cf21 # define COMPILER_ID "XLClang"}\par
00191 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)}\par
00192 {\cf21 # define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)}\par
00193 {\cf21 # define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)}\par
00194 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)}\par
00195 \par
00196 \par
00197 {\cf21 #elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ >= 800}\par
00198 {\cf21 # define COMPILER_ID "XL"}\par
00199   {\cf20 /* __IBMC__ = VRP */}\par
00200 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00201 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00202 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00203 \par
00204 {\cf21 #elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ < 800}\par
00205 {\cf21 # define COMPILER_ID "VisualAge"}\par
00206   {\cf20 /* __IBMC__ = VRP */}\par
00207 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00208 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00209 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00210 \par
00211 {\cf21 #elif defined(__NVCOMPILER)}\par
00212 {\cf21 # define COMPILER_ID "NVHPC"}\par
00213 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)}\par
00214 {\cf21 # define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)}\par
00215 {\cf21 # if defined(__NVCOMPILER_PATCHLEVEL__)}\par
00216 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)}\par
00217 {\cf21 # endif}\par
00218 \par
00219 {\cf21 #elif defined(__PGI)}\par
00220 {\cf21 # define COMPILER_ID "PGI"}\par
00221 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PGIC__)}\par
00222 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)}\par
00223 {\cf21 # if defined(__PGIC_PATCHLEVEL__)}\par
00224 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)}\par
00225 {\cf21 # endif}\par
00226 \par
00227 {\cf21 #elif defined(_CRAYC)}\par
00228 {\cf21 # define COMPILER_ID "Cray"}\par
00229 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)}\par
00230 {\cf21 # define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)}\par
00231 \par
00232 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00233 {\cf21 # define COMPILER_ID "TI"}\par
00234   {\cf20 /* __TI_COMPILER_VERSION__ = VVVRRRPPP */}\par
00235 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)}\par
00236 {\cf21 # define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)}\par
00237 {\cf21 # define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)}\par
00238 \par
00239 {\cf21 #elif defined(__CLANG_FUJITSU)}\par
00240 {\cf21 # define COMPILER_ID "FujitsuClang"}\par
00241 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00242 {\cf21 # define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00243 {\cf21 # define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00244 {\cf21 # define COMPILER_VERSION_INTERNAL_STR __clang_version__}\par
00245 \par
00246 \par
00247 {\cf21 #elif defined(__FUJITSU)}\par
00248 {\cf21 # define COMPILER_ID "Fujitsu"}\par
00249 {\cf21 # if defined(__FCC_version__)}\par
00250 {\cf21 #   define COMPILER_VERSION __FCC_version__}\par
00251 {\cf21 # elif defined(__FCC_major__)}\par
00252 {\cf21 #   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00253 {\cf21 #   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00254 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00255 {\cf21 # endif}\par
00256 {\cf21 # if defined(__fcc_version)}\par
00257 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)}\par
00258 {\cf21 # elif defined(__FCC_VERSION)}\par
00259 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)}\par
00260 {\cf21 # endif}\par
00261 \par
00262 \par
00263 {\cf21 #elif defined(__ghs__)}\par
00264 {\cf21 # define COMPILER_ID "GHS"}\par
00265 {\cf20 /* __GHS_VERSION_NUMBER = VVVVRP */}\par
00266 {\cf21 # ifdef __GHS_VERSION_NUMBER}\par
00267 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)}\par
00268 {\cf21 # define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)}\par
00269 {\cf21 # define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)}\par
00270 {\cf21 # endif}\par
00271 \par
00272 {\cf21 #elif defined(__TASKING__)}\par
00273 {\cf21 # define COMPILER_ID "Tasking"}\par
00274 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)}\par
00275 {\cf21   # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)}\par
00276 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__VERSION__)}\par
00277 \par
00278 {\cf21 #elif defined(__TINYC__)}\par
00279 {\cf21 # define COMPILER_ID "TinyCC"}\par
00280 \par
00281 {\cf21 #elif defined(__BCC__)}\par
00282 {\cf21 # define COMPILER_ID "Bruce"}\par
00283 \par
00284 {\cf21 #elif defined(__SCO_VERSION__)}\par
00285 {\cf21 # define COMPILER_ID "SCO"}\par
00286 \par
00287 {\cf21 #elif defined(__ARMCC_VERSION) && !defined(__clang__)}\par
00288 {\cf21 # define COMPILER_ID "ARMCC"}\par
00289 {\cf21 #if __ARMCC_VERSION >= 1000000}\par
00290   {\cf20 /* __ARMCC_VERSION = VRRPPPP */}\par
00291 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)}\par
00292 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)}\par
00293 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)}\par
00294 {\cf21 #else}\par
00295   {\cf20 /* __ARMCC_VERSION = VRPPPP */}\par
00296 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)}\par
00297 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)}\par
00298 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)}\par
00299 {\cf21 #endif}\par
00300 \par
00301 \par
00302 {\cf21 #elif defined(__clang__) && defined(__apple_build_version__)}\par
00303 {\cf21 # define COMPILER_ID "AppleClang"}\par
00304 {\cf21 # if defined(_MSC_VER)}\par
00305 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00306 {\cf21 # endif}\par
00307 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00308 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00309 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00310 {\cf21 # if defined(_MSC_VER)}\par
00311    {\cf20 /* _MSC_VER = VVRR */}\par
00312 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00313 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00314 {\cf21 # endif}\par
00315 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)}\par
00316 \par
00317 {\cf21 #elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)}\par
00318 {\cf21 # define COMPILER_ID "ARMClang"}\par
00319 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)}\par
00320 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)}\par
00321 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION     % 10000)}\par
00322 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)}\par
00323 \par
00324 {\cf21 #elif defined(__clang__)}\par
00325 {\cf21 # define COMPILER_ID "Clang"}\par
00326 {\cf21 # if defined(_MSC_VER)}\par
00327 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00328 {\cf21 # endif}\par
00329 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00330 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00331 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00332 {\cf21 # if defined(_MSC_VER)}\par
00333    {\cf20 /* _MSC_VER = VVRR */}\par
00334 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00335 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00336 {\cf21 # endif}\par
00337 \par
00338 {\cf21 #elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))}\par
00339 {\cf21 # define COMPILER_ID "LCC"}\par
00340 {\cf21 # define COMPILER_VERSION_MAJOR DEC(1)}\par
00341 {\cf21 # if defined(__LCC__)}\par
00342 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__LCC__- 100)}\par
00343 {\cf21 # endif}\par
00344 {\cf21 # if defined(__LCC_MINOR__)}\par
00345 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)}\par
00346 {\cf21 # endif}\par
00347 {\cf21 # if defined(__GNUC__) && defined(__GNUC_MINOR__)}\par
00348 {\cf21 #  define SIMULATE_ID "GNU"}\par
00349 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00350 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00351 {\cf21 #  if defined(__GNUC_PATCHLEVEL__)}\par
00352 {\cf21 #   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00353 {\cf21 #  endif}\par
00354 {\cf21 # endif}\par
00355 \par
00356 {\cf21 #elif defined(__GNUC__)}\par
00357 {\cf21 # define COMPILER_ID "GNU"}\par
00358 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GNUC__)}\par
00359 {\cf21 # if defined(__GNUC_MINOR__)}\par
00360 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00361 {\cf21 # endif}\par
00362 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00363 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00364 {\cf21 # endif}\par
00365 \par
00366 {\cf21 #elif defined(_MSC_VER)}\par
00367 {\cf21 # define COMPILER_ID "MSVC"}\par
00368   {\cf20 /* _MSC_VER = VVRR */}\par
00369 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00370 {\cf21 # define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00371 {\cf21 # if defined(_MSC_FULL_VER)}\par
00372 {\cf21 #  if _MSC_VER >= 1400}\par
00373     {\cf20 /* _MSC_FULL_VER = VVRRPPPPP */}\par
00374 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)}\par
00375 {\cf21 #  else}\par
00376     {\cf20 /* _MSC_FULL_VER = VVRRPPPP */}\par
00377 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)}\par
00378 {\cf21 #  endif}\par
00379 {\cf21 # endif}\par
00380 {\cf21 # if defined(_MSC_BUILD)}\par
00381 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)}\par
00382 {\cf21 # endif}\par
00383 \par
00384 {\cf21 #elif defined(_ADI_COMPILER)}\par
00385 {\cf21 # define COMPILER_ID "ADSP"}\par
00386 {\cf21 #if defined(__VERSIONNUM__)}\par
00387   {\cf20 /* __VERSIONNUM__ = 0xVVRRPPTT */}\par
00388 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)}\par
00389 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)}\par
00390 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)}\par
00391 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)}\par
00392 {\cf21 #endif}\par
00393 \par
00394 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00395 {\cf21 # define COMPILER_ID "IAR"}\par
00396 {\cf21 # if defined(__VER__) && defined(__ICCARM__)}\par
00397 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)}\par
00398 {\cf21 #  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)}\par
00399 {\cf21 #  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)}\par
00400 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00401 {\cf21 # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))}\par
00402 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)}\par
00403 {\cf21 #  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))}\par
00404 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)}\par
00405 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00406 {\cf21 # endif}\par
00407 \par
00408 {\cf21 #elif defined(__SDCC_VERSION_MAJOR) || defined(SDCC)}\par
00409 {\cf21 # define COMPILER_ID "SDCC"}\par
00410 {\cf21 # if defined(__SDCC_VERSION_MAJOR)}\par
00411 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__SDCC_VERSION_MAJOR)}\par
00412 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__SDCC_VERSION_MINOR)}\par
00413 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SDCC_VERSION_PATCH)}\par
00414 {\cf21 # else}\par
00415   {\cf20 /* SDCC = VRP */}\par
00416 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(SDCC/100)}\par
00417 {\cf21 #  define COMPILER_VERSION_MINOR DEC(SDCC/10 % 10)}\par
00418 {\cf21 #  define COMPILER_VERSION_PATCH DEC(SDCC    % 10)}\par
00419 {\cf21 # endif}\par
00420 \par
00421 \par
00422 {\cf20 /* These compilers are either not known or too old to define an}\par
00423 {\cf20   identification macro.  Try to identify the platform and guess that}\par
00424 {\cf20   it is the native compiler.  */}\par
00425 {\cf21 #elif defined(__hpux) || defined(__hpua)}\par
00426 {\cf21 # define COMPILER_ID "HP"}\par
00427 \par
00428 {\cf21 #else }{\cf20 /* unknown compiler */}{\cf21 }\par
00429 {\cf21 # define COMPILER_ID ""}\par
00430 {\cf21 #endif}\par
00431 \par
00432 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00433 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00434 {\cf20    because some compilers will just produce instructions to fill the}\par
00435 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00436 {\cf18 char} {\cf17 const}* info_compiler = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler["} COMPILER_ID {\cf22 "]"};\par
00437 {\cf21 #ifdef SIMULATE_ID}\par
00438 {\cf18 char} {\cf17 const}* info_simulate = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "simulate["} SIMULATE_ID {\cf22 "]"};\par
00439 {\cf21 #endif}\par
00440 \par
00441 {\cf21 #ifdef __QNXNTO__}\par
00442 {\cf18 char} {\cf17 const}* qnxnto = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "qnxnto[]"};\par
00443 {\cf21 #endif}\par
00444 \par
00445 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00446 {\cf18 char} {\cf17 const} *info_cray = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_wrapper[CrayPrgEnv]"};\par
00447 {\cf21 #endif}\par
00448 \par
00449 {\cf21 #define STRINGIFY_HELPER(X) #X}\par
00450 {\cf21 #define STRINGIFY(X) STRINGIFY_HELPER(X)}\par
00451 \par
00452 {\cf20 /* Identify known platforms by name.  */}\par
00453 {\cf21 #if defined(__linux) || defined(__linux__) || defined(linux)}\par
00454 {\cf21 # define PLATFORM_ID "Linux"}\par
00455 \par
00456 {\cf21 #elif defined(__MSYS__)}\par
00457 {\cf21 # define PLATFORM_ID "MSYS"}\par
00458 \par
00459 {\cf21 #elif defined(__CYGWIN__)}\par
00460 {\cf21 # define PLATFORM_ID "Cygwin"}\par
00461 \par
00462 {\cf21 #elif defined(__MINGW32__)}\par
00463 {\cf21 # define PLATFORM_ID "MinGW"}\par
00464 \par
00465 {\cf21 #elif defined(__APPLE__)}\par
00466 {\cf21 # define PLATFORM_ID "Darwin"}\par
00467 \par
00468 {\cf21 #elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)}\par
00469 {\cf21 # define PLATFORM_ID "Windows"}\par
00470 \par
00471 {\cf21 #elif defined(__FreeBSD__) || defined(__FreeBSD)}\par
00472 {\cf21 # define PLATFORM_ID "FreeBSD"}\par
00473 \par
00474 {\cf21 #elif defined(__NetBSD__) || defined(__NetBSD)}\par
00475 {\cf21 # define PLATFORM_ID "NetBSD"}\par
00476 \par
00477 {\cf21 #elif defined(__OpenBSD__) || defined(__OPENBSD)}\par
00478 {\cf21 # define PLATFORM_ID "OpenBSD"}\par
00479 \par
00480 {\cf21 #elif defined(__sun) || defined(sun)}\par
00481 {\cf21 # define PLATFORM_ID "SunOS"}\par
00482 \par
00483 {\cf21 #elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)}\par
00484 {\cf21 # define PLATFORM_ID "AIX"}\par
00485 \par
00486 {\cf21 #elif defined(__hpux) || defined(__hpux__)}\par
00487 {\cf21 # define PLATFORM_ID "HP-UX"}\par
00488 \par
00489 {\cf21 #elif defined(__HAIKU__)}\par
00490 {\cf21 # define PLATFORM_ID "Haiku"}\par
00491 \par
00492 {\cf21 #elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)}\par
00493 {\cf21 # define PLATFORM_ID "BeOS"}\par
00494 \par
00495 {\cf21 #elif defined(__QNX__) || defined(__QNXNTO__)}\par
00496 {\cf21 # define PLATFORM_ID "QNX"}\par
00497 \par
00498 {\cf21 #elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)}\par
00499 {\cf21 # define PLATFORM_ID "Tru64"}\par
00500 \par
00501 {\cf21 #elif defined(__riscos) || defined(__riscos__)}\par
00502 {\cf21 # define PLATFORM_ID "RISCos"}\par
00503 \par
00504 {\cf21 #elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)}\par
00505 {\cf21 # define PLATFORM_ID "SINIX"}\par
00506 \par
00507 {\cf21 #elif defined(__UNIX_SV__)}\par
00508 {\cf21 # define PLATFORM_ID "UNIX_SV"}\par
00509 \par
00510 {\cf21 #elif defined(__bsdos__)}\par
00511 {\cf21 # define PLATFORM_ID "BSDOS"}\par
00512 \par
00513 {\cf21 #elif defined(_MPRAS) || defined(MPRAS)}\par
00514 {\cf21 # define PLATFORM_ID "MP-RAS"}\par
00515 \par
00516 {\cf21 #elif defined(__osf) || defined(__osf__)}\par
00517 {\cf21 # define PLATFORM_ID "OSF1"}\par
00518 \par
00519 {\cf21 #elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)}\par
00520 {\cf21 # define PLATFORM_ID "SCO_SV"}\par
00521 \par
00522 {\cf21 #elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)}\par
00523 {\cf21 # define PLATFORM_ID "ULTRIX"}\par
00524 \par
00525 {\cf21 #elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)}\par
00526 {\cf21 # define PLATFORM_ID "Xenix"}\par
00527 \par
00528 {\cf21 #elif defined(__WATCOMC__)}\par
00529 {\cf21 # if defined(__LINUX__)}\par
00530 {\cf21 #  define PLATFORM_ID "Linux"}\par
00531 \par
00532 {\cf21 # elif defined(__DOS__)}\par
00533 {\cf21 #  define PLATFORM_ID "DOS"}\par
00534 \par
00535 {\cf21 # elif defined(__OS2__)}\par
00536 {\cf21 #  define PLATFORM_ID "OS2"}\par
00537 \par
00538 {\cf21 # elif defined(__WINDOWS__)}\par
00539 {\cf21 #  define PLATFORM_ID "Windows3x"}\par
00540 \par
00541 {\cf21 # elif defined(__VXWORKS__)}\par
00542 {\cf21 #  define PLATFORM_ID "VxWorks"}\par
00543 \par
00544 {\cf21 # else }{\cf20 /* unknown platform */}{\cf21 }\par
00545 {\cf21 #  define PLATFORM_ID}\par
00546 {\cf21 # endif}\par
00547 \par
00548 {\cf21 #elif defined(__INTEGRITY)}\par
00549 {\cf21 # if defined(INT_178B)}\par
00550 {\cf21 #  define PLATFORM_ID "Integrity178"}\par
00551 \par
00552 {\cf21 # else }{\cf20 /* regular Integrity */}{\cf21 }\par
00553 {\cf21 #  define PLATFORM_ID "Integrity"}\par
00554 {\cf21 # endif}\par
00555 \par
00556 {\cf21 # elif defined(_ADI_COMPILER)}\par
00557 {\cf21 #  define PLATFORM_ID "ADSP"}\par
00558 \par
00559 {\cf21 #else }{\cf20 /* unknown platform */}{\cf21 }\par
00560 {\cf21 # define PLATFORM_ID}\par
00561 \par
00562 {\cf21 #endif}\par
00563 \par
00564 {\cf20 /* For windows compilers MSVC and Intel we can determine}\par
00565 {\cf20    the architecture of the compiler being used.  This is because}\par
00566 {\cf20    the compilers do not have flags that can change the architecture,}\par
00567 {\cf20    but rather depend on which compiler is being used}\par
00568 {\cf20 */}\par
00569 {\cf21 #if defined(_WIN32) && defined(_MSC_VER)}\par
00570 {\cf21 # if defined(_M_IA64)}\par
00571 {\cf21 #  define ARCHITECTURE_ID "IA64"}\par
00572 \par
00573 {\cf21 # elif defined(_M_ARM64EC)}\par
00574 {\cf21 #  define ARCHITECTURE_ID "ARM64EC"}\par
00575 \par
00576 {\cf21 # elif defined(_M_X64) || defined(_M_AMD64)}\par
00577 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00578 \par
00579 {\cf21 # elif defined(_M_IX86)}\par
00580 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00581 \par
00582 {\cf21 # elif defined(_M_ARM64)}\par
00583 {\cf21 #  define ARCHITECTURE_ID "ARM64"}\par
00584 \par
00585 {\cf21 # elif defined(_M_ARM)}\par
00586 {\cf21 #  if _M_ARM == 4}\par
00587 {\cf21 #   define ARCHITECTURE_ID "ARMV4I"}\par
00588 {\cf21 #  elif _M_ARM == 5}\par
00589 {\cf21 #   define ARCHITECTURE_ID "ARMV5I"}\par
00590 {\cf21 #  else}\par
00591 {\cf21 #   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)}\par
00592 {\cf21 #  endif}\par
00593 \par
00594 {\cf21 # elif defined(_M_MIPS)}\par
00595 {\cf21 #  define ARCHITECTURE_ID "MIPS"}\par
00596 \par
00597 {\cf21 # elif defined(_M_SH)}\par
00598 {\cf21 #  define ARCHITECTURE_ID "SHx"}\par
00599 \par
00600 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00601 {\cf21 #  define ARCHITECTURE_ID ""}\par
00602 {\cf21 # endif}\par
00603 \par
00604 {\cf21 #elif defined(__WATCOMC__)}\par
00605 {\cf21 # if defined(_M_I86)}\par
00606 {\cf21 #  define ARCHITECTURE_ID "I86"}\par
00607 \par
00608 {\cf21 # elif defined(_M_IX86)}\par
00609 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00610 \par
00611 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00612 {\cf21 #  define ARCHITECTURE_ID ""}\par
00613 {\cf21 # endif}\par
00614 \par
00615 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00616 {\cf21 # if defined(__ICCARM__)}\par
00617 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00618 \par
00619 {\cf21 # elif defined(__ICCRX__)}\par
00620 {\cf21 #  define ARCHITECTURE_ID "RX"}\par
00621 \par
00622 {\cf21 # elif defined(__ICCRH850__)}\par
00623 {\cf21 #  define ARCHITECTURE_ID "RH850"}\par
00624 \par
00625 {\cf21 # elif defined(__ICCRL78__)}\par
00626 {\cf21 #  define ARCHITECTURE_ID "RL78"}\par
00627 \par
00628 {\cf21 # elif defined(__ICCRISCV__)}\par
00629 {\cf21 #  define ARCHITECTURE_ID "RISCV"}\par
00630 \par
00631 {\cf21 # elif defined(__ICCAVR__)}\par
00632 {\cf21 #  define ARCHITECTURE_ID "AVR"}\par
00633 \par
00634 {\cf21 # elif defined(__ICC430__)}\par
00635 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00636 \par
00637 {\cf21 # elif defined(__ICCV850__)}\par
00638 {\cf21 #  define ARCHITECTURE_ID "V850"}\par
00639 \par
00640 {\cf21 # elif defined(__ICC8051__)}\par
00641 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00642 \par
00643 {\cf21 # elif defined(__ICCSTM8__)}\par
00644 {\cf21 #  define ARCHITECTURE_ID "STM8"}\par
00645 \par
00646 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00647 {\cf21 #  define ARCHITECTURE_ID ""}\par
00648 {\cf21 # endif}\par
00649 \par
00650 {\cf21 #elif defined(__ghs__)}\par
00651 {\cf21 # if defined(__PPC64__)}\par
00652 {\cf21 #  define ARCHITECTURE_ID "PPC64"}\par
00653 \par
00654 {\cf21 # elif defined(__ppc__)}\par
00655 {\cf21 #  define ARCHITECTURE_ID "PPC"}\par
00656 \par
00657 {\cf21 # elif defined(__ARM__)}\par
00658 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00659 \par
00660 {\cf21 # elif defined(__x86_64__)}\par
00661 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00662 \par
00663 {\cf21 # elif defined(__i386__)}\par
00664 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00665 \par
00666 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00667 {\cf21 #  define ARCHITECTURE_ID ""}\par
00668 {\cf21 # endif}\par
00669 \par
00670 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00671 {\cf21 # if defined(__TI_ARM__)}\par
00672 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00673 \par
00674 {\cf21 # elif defined(__MSP430__)}\par
00675 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00676 \par
00677 {\cf21 # elif defined(__TMS320C28XX__)}\par
00678 {\cf21 #  define ARCHITECTURE_ID "TMS320C28x"}\par
00679 \par
00680 {\cf21 # elif defined(__TMS320C6X__) || defined(_TMS320C6X)}\par
00681 {\cf21 #  define ARCHITECTURE_ID "TMS320C6x"}\par
00682 \par
00683 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00684 {\cf21 #  define ARCHITECTURE_ID ""}\par
00685 {\cf21 # endif}\par
00686 \par
00687 {\cf21 # elif defined(__ADSPSHARC__)}\par
00688 {\cf21 #  define ARCHITECTURE_ID "SHARC"}\par
00689 \par
00690 {\cf21 # elif defined(__ADSPBLACKFIN__)}\par
00691 {\cf21 #  define ARCHITECTURE_ID "Blackfin"}\par
00692 \par
00693 {\cf21 #elif defined(__TASKING__)}\par
00694 \par
00695 {\cf21 # if defined(__CTC__) || defined(__CPTC__)}\par
00696 {\cf21 #  define ARCHITECTURE_ID "TriCore"}\par
00697 \par
00698 {\cf21 # elif defined(__CMCS__)}\par
00699 {\cf21 #  define ARCHITECTURE_ID "MCS"}\par
00700 \par
00701 {\cf21 # elif defined(__CARM__)}\par
00702 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00703 \par
00704 {\cf21 # elif defined(__CARC__)}\par
00705 {\cf21 #  define ARCHITECTURE_ID "ARC"}\par
00706 \par
00707 {\cf21 # elif defined(__C51__)}\par
00708 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00709 \par
00710 {\cf21 # elif defined(__CPCP__)}\par
00711 {\cf21 #  define ARCHITECTURE_ID "PCP"}\par
00712 \par
00713 {\cf21 # else}\par
00714 {\cf21 #  define ARCHITECTURE_ID ""}\par
00715 {\cf21 # endif}\par
00716 \par
00717 {\cf21 #else}\par
00718 {\cf21 #  define ARCHITECTURE_ID}\par
00719 {\cf21 #endif}\par
00720 \par
00721 {\cf20 /* Convert integer to decimal digit literals.  */}\par
00722 {\cf21 #define DEC(n)                   \\}\par
00723 {\cf21   ('0' + (((n) / 10000000)%10)), \\}\par
00724 {\cf21   ('0' + (((n) / 1000000)%10)),  \\}\par
00725 {\cf21   ('0' + (((n) / 100000)%10)),   \\}\par
00726 {\cf21   ('0' + (((n) / 10000)%10)),    \\}\par
00727 {\cf21   ('0' + (((n) / 1000)%10)),     \\}\par
00728 {\cf21   ('0' + (((n) / 100)%10)),      \\}\par
00729 {\cf21   ('0' + (((n) / 10)%10)),       \\}\par
00730 {\cf21   ('0' +  ((n) % 10))}\par
00731 \par
00732 {\cf20 /* Convert integer to hex digit literals.  */}\par
00733 {\cf21 #define HEX(n)             \\}\par
00734 {\cf21   ('0' + ((n)>>28 & 0xF)), \\}\par
00735 {\cf21   ('0' + ((n)>>24 & 0xF)), \\}\par
00736 {\cf21   ('0' + ((n)>>20 & 0xF)), \\}\par
00737 {\cf21   ('0' + ((n)>>16 & 0xF)), \\}\par
00738 {\cf21   ('0' + ((n)>>12 & 0xF)), \\}\par
00739 {\cf21   ('0' + ((n)>>8  & 0xF)), \\}\par
00740 {\cf21   ('0' + ((n)>>4  & 0xF)), \\}\par
00741 {\cf21   ('0' + ((n)     & 0xF))}\par
00742 \par
00743 {\cf20 /* Construct a string literal encoding the version number. */}\par
00744 {\cf21 #ifdef COMPILER_VERSION}\par
00745 {\cf18 char} {\cf17 const}* info_version = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version["} COMPILER_VERSION {\cf22 "]"};\par
00746 \par
00747 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00748 {\cf21 #elif defined(COMPILER_VERSION_MAJOR)}\par
00749 {\cf18 char} {\cf17 const} info_version[] = \{\par
00750   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00751   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00752   COMPILER_VERSION_MAJOR,\par
00753 {\cf21 # ifdef COMPILER_VERSION_MINOR}\par
00754   {\cf23 '.'}, COMPILER_VERSION_MINOR,\par
00755 {\cf21 #  ifdef COMPILER_VERSION_PATCH}\par
00756    {\cf23 '.'}, COMPILER_VERSION_PATCH,\par
00757 {\cf21 #   ifdef COMPILER_VERSION_TWEAK}\par
00758     {\cf23 '.'}, COMPILER_VERSION_TWEAK,\par
00759 {\cf21 #   endif}\par
00760 {\cf21 #  endif}\par
00761 {\cf21 # endif}\par
00762   {\cf23 ']'},{\cf23 '\\0'}\};\par
00763 {\cf21 #endif}\par
00764 \par
00765 {\cf20 /* Construct a string literal encoding the internal version number. */}\par
00766 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00767 {\cf18 char} {\cf17 const} info_version_internal[] = \{\par
00768   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00769   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
00770   {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
00771   COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\};\par
00772 {\cf21 #elif defined(COMPILER_VERSION_INTERNAL_STR)}\par
00773 {\cf18 char} {\cf17 const}* info_version_internal = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version_internal["} COMPILER_VERSION_INTERNAL_STR {\cf22 "]"};\par
00774 {\cf21 #endif}\par
00775 \par
00776 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00777 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00778 {\cf18 char} {\cf17 const} info_simulate_version[] = \{\par
00779   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00780   {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00781   SIMULATE_VERSION_MAJOR,\par
00782 {\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
00783   {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
00784 {\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
00785    {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
00786 {\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
00787     {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
00788 {\cf21 #   endif}\par
00789 {\cf21 #  endif}\par
00790 {\cf21 # endif}\par
00791   {\cf23 ']'},{\cf23 '\\0'}\};\par
00792 {\cf21 #endif}\par
00793 \par
00794 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00795 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00796 {\cf20    because some compilers will just produce instructions to fill the}\par
00797 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00798 {\cf18 char} {\cf17 const}* info_platform = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "platform["} PLATFORM_ID {\cf22 "]"};\par
00799 {\cf18 char} {\cf17 const}* info_arch = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "arch["} ARCHITECTURE_ID {\cf22 "]"};\par
00800 \par
00801 \par
00802 \par
00803 {\cf21 #if !defined(__STDC__) && !defined(__clang__)}\par
00804 {\cf21 # if defined(_MSC_VER) || defined(__ibmxl__) || defined(__IBMC__)}\par
00805 {\cf21 #  define C_VERSION "90"}\par
00806 {\cf21 # else}\par
00807 {\cf21 #  define C_VERSION}\par
00808 {\cf21 # endif}\par
00809 {\cf21 #elif __STDC_VERSION__ > 201710L}\par
00810 {\cf21 # define C_VERSION "23"}\par
00811 {\cf21 #elif __STDC_VERSION__ >= 201710L}\par
00812 {\cf21 # define C_VERSION "17"}\par
00813 {\cf21 #elif __STDC_VERSION__ >= 201000L}\par
00814 {\cf21 # define C_VERSION "11"}\par
00815 {\cf21 #elif __STDC_VERSION__ >= 199901L}\par
00816 {\cf21 # define C_VERSION "99"}\par
00817 {\cf21 #else}\par
00818 {\cf21 # define C_VERSION "90"}\par
00819 {\cf21 #endif}\par
00820 {\cf17 const} {\cf18 char}* info_language_standard_default =\par
00821   {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["} C_VERSION {\cf22 "]"};\par
00822 \par
00823 {\cf17 const} {\cf18 char}* info_language_extensions_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
00824 {\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
00825 {\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
00826 {\cf21   !defined(__STRICT_ANSI__)}\par
00827   {\cf22 "ON"}\par
00828 {\cf21 #else}\par
00829   {\cf22 "OFF"}\par
00830 {\cf21 #endif}\par
00831 {\cf22 "]"};\par
00832 \par
00833 {\cf20 /*--------------------------------------------------------------------------*/}\par
00834 \par
00835 {\cf21 #ifdef ID_VOID_MAIN}\par
00836 {\cf18 void} main() \{\}\par
00837 {\cf21 #else}\par
00838 {\cf21 # if defined(__CLASSIC_C__)}\par
00839 {\cf18 int} main(argc, argv) {\cf18 int} argc; {\cf18 char} *argv[];\par
00840 {\cf21 # else}\par
00841 {\cf18 int} main({\cf18 int} argc, {\cf18 char}* argv[])\par
00842 {\cf21 # endif}\par
00843 \{\par
00844   {\cf18 int} require = 0;\par
00845   require += info_compiler[argc];\par
00846   require += info_platform[argc];\par
00847   require += info_arch[argc];\par
00848 {\cf21 #ifdef COMPILER_VERSION_MAJOR}\par
00849   require += info_version[argc];\par
00850 {\cf21 #endif}\par
00851 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00852   require += info_version_internal[argc];\par
00853 {\cf21 #endif}\par
00854 {\cf21 #ifdef SIMULATE_ID}\par
00855   require += info_simulate[argc];\par
00856 {\cf21 #endif}\par
00857 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00858   require += info_simulate_version[argc];\par
00859 {\cf21 #endif}\par
00860 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00861   require += info_cray[argc];\par
00862 {\cf21 #endif}\par
00863   require += info_language_standard_default[argc];\par
00864   require += info_language_extensions_default[argc];\par
00865   (void)argv;\par
00866   {\cf19 return} require;\par
00867 \}\par
00868 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c File Reference\par \pard\plain 
{\tc\tcl2 \v CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c}
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b main} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, argv)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_compiler} = "INFO" ":" "compiler[" COMPILER_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_simulate} = "INFO" ":" "simulate[" SIMULATE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b qnxnto} = "INFO" ":" "qnxnto[]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_cray} = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_version} = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_version_internal} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_simulate_version} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_platform} = "INFO" ":" "platform[" PLATFORM_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_arch} = "INFO" ":" "arch[" ARCHITECTURE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_standard_default}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_extensions_default}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void main ()}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 836} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v main\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, argv )}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 839} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v info_arch\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_arch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]"}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 799} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_compiler\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_compiler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]"}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 436} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_cray\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_cray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 446} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_language_extensions_default\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_language_extensions_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_extensions_default}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
{\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
{\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
{\cf21   !defined(__STRICT_ANSI__)}\par
  {\cf22 "ON"}\par
{\cf21 #else}\par
  {\cf22 "OFF"}\par
{\cf21 #endif}\par
{\cf22 "]"}\par
}
{
Definition at line {\b 823} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_language_standard_default\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_language_standard_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_standard_default}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =\par
  {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["} C_VERSION {\cf22 "]"}\par
}
{
Definition at line {\b 820} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_platform\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_platform}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]"}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 798} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_simulate\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_simulate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]"}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 438} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_simulate_version\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_simulate_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_simulate_version[]}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
  SIMULATE_VERSION_MAJOR,\par
{\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
  {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
{\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
   {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
{\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
    {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
{\cf21 #   endif}\par
{\cf21 #  endif}\par
{\cf21 # endif}\par
  {\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 778} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_version\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_version[] = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 745} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_version_internal\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_version_internal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_version_internal}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
  {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
  COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 767} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v qnxnto\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:qnxnto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* qnxnto = "INFO" ":" "qnxnto[]"}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 442} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c\par \pard\plain 
{\tc\tcl2 \v CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifdef __cplusplus}\par
00002 {\cf21 # error "A C++ compiler has been selected for C."}\par
00003 {\cf21 #endif}\par
00004 \par
00005 {\cf21 #if defined(__18CXX)}\par
00006 {\cf21 # define ID_VOID_MAIN}\par
00007 {\cf21 #endif}\par
00008 {\cf21 #if defined(__CLASSIC_C__)}\par
00009 {\cf20 /* cv-qualifiers did not exist in K&R C */}\par
00010 {\cf21 # define const}\par
00011 {\cf21 # define volatile}\par
00012 {\cf21 #endif}\par
00013 \par
00014 {\cf21 #if !defined(__has_include)}\par
00015 {\cf20 /* If the compiler does not have __has_include, pretend the answer is}\par
00016 {\cf20    always no.  */}\par
00017 {\cf21 #  define __has_include(x) 0}\par
00018 {\cf21 #endif}\par
00019 \par
00020 \par
00021 {\cf20 /* Version number components: V=Version, R=Revision, P=Patch}\par
00022 {\cf20    Version date components:   YYYY=Year, MM=Month,   DD=Day  */}\par
00023 \par
00024 {\cf21 #if defined(__INTEL_COMPILER) || defined(__ICC)}\par
00025 {\cf21 # define COMPILER_ID "Intel"}\par
00026 {\cf21 # if defined(_MSC_VER)}\par
00027 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00028 {\cf21 # endif}\par
00029 {\cf21 # if defined(__GNUC__)}\par
00030 {\cf21 #  define SIMULATE_ID "GNU"}\par
00031 {\cf21 # endif}\par
00032   {\cf20 /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,}\par
00033 {\cf20      except that a few beta releases use the old format with V=2021.  */}\par
00034 {\cf21 # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111}\par
00035 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)}\par
00036 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)}\par
00037 {\cf21 #  if defined(__INTEL_COMPILER_UPDATE)}\par
00038 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)}\par
00039 {\cf21 #  else}\par
00040 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)}\par
00041 {\cf21 #  endif}\par
00042 {\cf21 # else}\par
00043 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)}\par
00044 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)}\par
00045    {\cf20 /* The third version component from --version is an update index,}\par
00046 {\cf20       but no macro is provided for it.  */}\par
00047 {\cf21 #  define COMPILER_VERSION_PATCH DEC(0)}\par
00048 {\cf21 # endif}\par
00049 {\cf21 # if defined(__INTEL_COMPILER_BUILD_DATE)}\par
00050    {\cf20 /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */}\par
00051 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)}\par
00052 {\cf21 # endif}\par
00053 {\cf21 # if defined(_MSC_VER)}\par
00054    {\cf20 /* _MSC_VER = VVRR */}\par
00055 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00056 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00057 {\cf21 # endif}\par
00058 {\cf21 # if defined(__GNUC__)}\par
00059 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00060 {\cf21 # elif defined(__GNUG__)}\par
00061 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00062 {\cf21 # endif}\par
00063 {\cf21 # if defined(__GNUC_MINOR__)}\par
00064 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00065 {\cf21 # endif}\par
00066 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00067 {\cf21 #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00068 {\cf21 # endif}\par
00069 \par
00070 {\cf21 #elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)}\par
00071 {\cf21 # define COMPILER_ID "IntelLLVM"}\par
00072 {\cf21 #if defined(_MSC_VER)}\par
00073 {\cf21 # define SIMULATE_ID "MSVC"}\par
00074 {\cf21 #endif}\par
00075 {\cf21 #if defined(__GNUC__)}\par
00076 {\cf21 # define SIMULATE_ID "GNU"}\par
00077 {\cf21 #endif}\par
00078 {\cf20 /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and}\par
00079 {\cf20  * later.  Look for 6 digit vs. 8 digit version number to decide encoding.}\par
00080 {\cf20  * VVVV is no smaller than the current year when a version is released.}\par
00081 {\cf20  */}\par
00082 {\cf21 #if __INTEL_LLVM_COMPILER < 1000000L}\par
00083 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)}\par
00084 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)}\par
00085 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)}\par
00086 {\cf21 #else}\par
00087 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)}\par
00088 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)}\par
00089 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)}\par
00090 {\cf21 #endif}\par
00091 {\cf21 #if defined(_MSC_VER)}\par
00092   {\cf20 /* _MSC_VER = VVRR */}\par
00093 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00094 {\cf21 # define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00095 {\cf21 #endif}\par
00096 {\cf21 #if defined(__GNUC__)}\par
00097 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00098 {\cf21 #elif defined(__GNUG__)}\par
00099 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00100 {\cf21 #endif}\par
00101 {\cf21 #if defined(__GNUC_MINOR__)}\par
00102 {\cf21 # define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00103 {\cf21 #endif}\par
00104 {\cf21 #if defined(__GNUC_PATCHLEVEL__)}\par
00105 {\cf21 # define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00106 {\cf21 #endif}\par
00107 \par
00108 {\cf21 #elif defined(__PATHCC__)}\par
00109 {\cf21 # define COMPILER_ID "PathScale"}\par
00110 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PATHCC__)}\par
00111 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)}\par
00112 {\cf21 # if defined(__PATHCC_PATCHLEVEL__)}\par
00113 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)}\par
00114 {\cf21 # endif}\par
00115 \par
00116 {\cf21 #elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)}\par
00117 {\cf21 # define COMPILER_ID "Embarcadero"}\par
00118 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)}\par
00119 {\cf21 # define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)}\par
00120 {\cf21 # define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)}\par
00121 \par
00122 {\cf21 #elif defined(__BORLANDC__)}\par
00123 {\cf21 # define COMPILER_ID "Borland"}\par
00124   {\cf20 /* __BORLANDC__ = 0xVRR */}\par
00125 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)}\par
00126 {\cf21 # define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)}\par
00127 \par
00128 {\cf21 #elif defined(__WATCOMC__) && __WATCOMC__ < 1200}\par
00129 {\cf21 # define COMPILER_ID "Watcom"}\par
00130    {\cf20 /* __WATCOMC__ = VVRR */}\par
00131 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)}\par
00132 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00133 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00134 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00135 {\cf21 # endif}\par
00136 \par
00137 {\cf21 #elif defined(__WATCOMC__)}\par
00138 {\cf21 # define COMPILER_ID "OpenWatcom"}\par
00139    {\cf20 /* __WATCOMC__ = VVRP + 1100 */}\par
00140 {\cf21 # define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)}\par
00141 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00142 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00143 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00144 {\cf21 # endif}\par
00145 \par
00146 {\cf21 #elif defined(__SUNPRO_C)}\par
00147 {\cf21 # define COMPILER_ID "SunPro"}\par
00148 {\cf21 # if __SUNPRO_C >= 0x5100}\par
00149    {\cf20 /* __SUNPRO_C = 0xVRRP */}\par
00150 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>12)}\par
00151 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xFF)}\par
00152 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)}\par
00153 {\cf21 # else}\par
00154    {\cf20 /* __SUNPRO_CC = 0xVRP */}\par
00155 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>8)}\par
00156 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xF)}\par
00157 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)}\par
00158 {\cf21 # endif}\par
00159 \par
00160 {\cf21 #elif defined(__HP_cc)}\par
00161 {\cf21 # define COMPILER_ID "HP"}\par
00162   {\cf20 /* __HP_cc = VVRRPP */}\par
00163 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__HP_cc/10000)}\par
00164 {\cf21 # define COMPILER_VERSION_MINOR DEC(__HP_cc/100 % 100)}\par
00165 {\cf21 # define COMPILER_VERSION_PATCH DEC(__HP_cc     % 100)}\par
00166 \par
00167 {\cf21 #elif defined(__DECC)}\par
00168 {\cf21 # define COMPILER_ID "Compaq"}\par
00169   {\cf20 /* __DECC_VER = VVRRTPPPP */}\par
00170 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__DECC_VER/10000000)}\par
00171 {\cf21 # define COMPILER_VERSION_MINOR DEC(__DECC_VER/100000  % 100)}\par
00172 {\cf21 # define COMPILER_VERSION_PATCH DEC(__DECC_VER         % 10000)}\par
00173 \par
00174 {\cf21 #elif defined(__IBMC__) && defined(__COMPILER_VER__)}\par
00175 {\cf21 # define COMPILER_ID "zOS"}\par
00176   {\cf20 /* __IBMC__ = VRP */}\par
00177 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00178 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00179 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00180 \par
00181 {\cf21 #elif defined(__open_xl__) && defined(__clang__)}\par
00182 {\cf21 # define COMPILER_ID "IBMClang"}\par
00183 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)}\par
00184 {\cf21 # define COMPILER_VERSION_MINOR DEC(__open_xl_release__)}\par
00185 {\cf21 # define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)}\par
00186 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)}\par
00187 \par
00188 \par
00189 {\cf21 #elif defined(__ibmxl__) && defined(__clang__)}\par
00190 {\cf21 # define COMPILER_ID "XLClang"}\par
00191 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)}\par
00192 {\cf21 # define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)}\par
00193 {\cf21 # define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)}\par
00194 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)}\par
00195 \par
00196 \par
00197 {\cf21 #elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ >= 800}\par
00198 {\cf21 # define COMPILER_ID "XL"}\par
00199   {\cf20 /* __IBMC__ = VRP */}\par
00200 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00201 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00202 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00203 \par
00204 {\cf21 #elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ < 800}\par
00205 {\cf21 # define COMPILER_ID "VisualAge"}\par
00206   {\cf20 /* __IBMC__ = VRP */}\par
00207 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00208 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00209 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00210 \par
00211 {\cf21 #elif defined(__NVCOMPILER)}\par
00212 {\cf21 # define COMPILER_ID "NVHPC"}\par
00213 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)}\par
00214 {\cf21 # define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)}\par
00215 {\cf21 # if defined(__NVCOMPILER_PATCHLEVEL__)}\par
00216 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)}\par
00217 {\cf21 # endif}\par
00218 \par
00219 {\cf21 #elif defined(__PGI)}\par
00220 {\cf21 # define COMPILER_ID "PGI"}\par
00221 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PGIC__)}\par
00222 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)}\par
00223 {\cf21 # if defined(__PGIC_PATCHLEVEL__)}\par
00224 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)}\par
00225 {\cf21 # endif}\par
00226 \par
00227 {\cf21 #elif defined(_CRAYC)}\par
00228 {\cf21 # define COMPILER_ID "Cray"}\par
00229 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)}\par
00230 {\cf21 # define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)}\par
00231 \par
00232 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00233 {\cf21 # define COMPILER_ID "TI"}\par
00234   {\cf20 /* __TI_COMPILER_VERSION__ = VVVRRRPPP */}\par
00235 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)}\par
00236 {\cf21 # define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)}\par
00237 {\cf21 # define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)}\par
00238 \par
00239 {\cf21 #elif defined(__CLANG_FUJITSU)}\par
00240 {\cf21 # define COMPILER_ID "FujitsuClang"}\par
00241 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00242 {\cf21 # define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00243 {\cf21 # define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00244 {\cf21 # define COMPILER_VERSION_INTERNAL_STR __clang_version__}\par
00245 \par
00246 \par
00247 {\cf21 #elif defined(__FUJITSU)}\par
00248 {\cf21 # define COMPILER_ID "Fujitsu"}\par
00249 {\cf21 # if defined(__FCC_version__)}\par
00250 {\cf21 #   define COMPILER_VERSION __FCC_version__}\par
00251 {\cf21 # elif defined(__FCC_major__)}\par
00252 {\cf21 #   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00253 {\cf21 #   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00254 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00255 {\cf21 # endif}\par
00256 {\cf21 # if defined(__fcc_version)}\par
00257 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)}\par
00258 {\cf21 # elif defined(__FCC_VERSION)}\par
00259 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)}\par
00260 {\cf21 # endif}\par
00261 \par
00262 \par
00263 {\cf21 #elif defined(__ghs__)}\par
00264 {\cf21 # define COMPILER_ID "GHS"}\par
00265 {\cf20 /* __GHS_VERSION_NUMBER = VVVVRP */}\par
00266 {\cf21 # ifdef __GHS_VERSION_NUMBER}\par
00267 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)}\par
00268 {\cf21 # define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)}\par
00269 {\cf21 # define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)}\par
00270 {\cf21 # endif}\par
00271 \par
00272 {\cf21 #elif defined(__TASKING__)}\par
00273 {\cf21 # define COMPILER_ID "Tasking"}\par
00274 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)}\par
00275 {\cf21   # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)}\par
00276 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__VERSION__)}\par
00277 \par
00278 {\cf21 #elif defined(__TINYC__)}\par
00279 {\cf21 # define COMPILER_ID "TinyCC"}\par
00280 \par
00281 {\cf21 #elif defined(__BCC__)}\par
00282 {\cf21 # define COMPILER_ID "Bruce"}\par
00283 \par
00284 {\cf21 #elif defined(__SCO_VERSION__)}\par
00285 {\cf21 # define COMPILER_ID "SCO"}\par
00286 \par
00287 {\cf21 #elif defined(__ARMCC_VERSION) && !defined(__clang__)}\par
00288 {\cf21 # define COMPILER_ID "ARMCC"}\par
00289 {\cf21 #if __ARMCC_VERSION >= 1000000}\par
00290   {\cf20 /* __ARMCC_VERSION = VRRPPPP */}\par
00291 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)}\par
00292 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)}\par
00293 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)}\par
00294 {\cf21 #else}\par
00295   {\cf20 /* __ARMCC_VERSION = VRPPPP */}\par
00296 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)}\par
00297 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)}\par
00298 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)}\par
00299 {\cf21 #endif}\par
00300 \par
00301 \par
00302 {\cf21 #elif defined(__clang__) && defined(__apple_build_version__)}\par
00303 {\cf21 # define COMPILER_ID "AppleClang"}\par
00304 {\cf21 # if defined(_MSC_VER)}\par
00305 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00306 {\cf21 # endif}\par
00307 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00308 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00309 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00310 {\cf21 # if defined(_MSC_VER)}\par
00311    {\cf20 /* _MSC_VER = VVRR */}\par
00312 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00313 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00314 {\cf21 # endif}\par
00315 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)}\par
00316 \par
00317 {\cf21 #elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)}\par
00318 {\cf21 # define COMPILER_ID "ARMClang"}\par
00319 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)}\par
00320 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)}\par
00321 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION     % 10000)}\par
00322 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)}\par
00323 \par
00324 {\cf21 #elif defined(__clang__)}\par
00325 {\cf21 # define COMPILER_ID "Clang"}\par
00326 {\cf21 # if defined(_MSC_VER)}\par
00327 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00328 {\cf21 # endif}\par
00329 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00330 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00331 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00332 {\cf21 # if defined(_MSC_VER)}\par
00333    {\cf20 /* _MSC_VER = VVRR */}\par
00334 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00335 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00336 {\cf21 # endif}\par
00337 \par
00338 {\cf21 #elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))}\par
00339 {\cf21 # define COMPILER_ID "LCC"}\par
00340 {\cf21 # define COMPILER_VERSION_MAJOR DEC(1)}\par
00341 {\cf21 # if defined(__LCC__)}\par
00342 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__LCC__- 100)}\par
00343 {\cf21 # endif}\par
00344 {\cf21 # if defined(__LCC_MINOR__)}\par
00345 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)}\par
00346 {\cf21 # endif}\par
00347 {\cf21 # if defined(__GNUC__) && defined(__GNUC_MINOR__)}\par
00348 {\cf21 #  define SIMULATE_ID "GNU"}\par
00349 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00350 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00351 {\cf21 #  if defined(__GNUC_PATCHLEVEL__)}\par
00352 {\cf21 #   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00353 {\cf21 #  endif}\par
00354 {\cf21 # endif}\par
00355 \par
00356 {\cf21 #elif defined(__GNUC__)}\par
00357 {\cf21 # define COMPILER_ID "GNU"}\par
00358 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GNUC__)}\par
00359 {\cf21 # if defined(__GNUC_MINOR__)}\par
00360 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00361 {\cf21 # endif}\par
00362 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00363 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00364 {\cf21 # endif}\par
00365 \par
00366 {\cf21 #elif defined(_MSC_VER)}\par
00367 {\cf21 # define COMPILER_ID "MSVC"}\par
00368   {\cf20 /* _MSC_VER = VVRR */}\par
00369 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00370 {\cf21 # define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00371 {\cf21 # if defined(_MSC_FULL_VER)}\par
00372 {\cf21 #  if _MSC_VER >= 1400}\par
00373     {\cf20 /* _MSC_FULL_VER = VVRRPPPPP */}\par
00374 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)}\par
00375 {\cf21 #  else}\par
00376     {\cf20 /* _MSC_FULL_VER = VVRRPPPP */}\par
00377 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)}\par
00378 {\cf21 #  endif}\par
00379 {\cf21 # endif}\par
00380 {\cf21 # if defined(_MSC_BUILD)}\par
00381 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)}\par
00382 {\cf21 # endif}\par
00383 \par
00384 {\cf21 #elif defined(_ADI_COMPILER)}\par
00385 {\cf21 # define COMPILER_ID "ADSP"}\par
00386 {\cf21 #if defined(__VERSIONNUM__)}\par
00387   {\cf20 /* __VERSIONNUM__ = 0xVVRRPPTT */}\par
00388 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)}\par
00389 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)}\par
00390 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)}\par
00391 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)}\par
00392 {\cf21 #endif}\par
00393 \par
00394 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00395 {\cf21 # define COMPILER_ID "IAR"}\par
00396 {\cf21 # if defined(__VER__) && defined(__ICCARM__)}\par
00397 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)}\par
00398 {\cf21 #  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)}\par
00399 {\cf21 #  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)}\par
00400 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00401 {\cf21 # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))}\par
00402 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)}\par
00403 {\cf21 #  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))}\par
00404 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)}\par
00405 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00406 {\cf21 # endif}\par
00407 \par
00408 {\cf21 #elif defined(__SDCC_VERSION_MAJOR) || defined(SDCC)}\par
00409 {\cf21 # define COMPILER_ID "SDCC"}\par
00410 {\cf21 # if defined(__SDCC_VERSION_MAJOR)}\par
00411 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__SDCC_VERSION_MAJOR)}\par
00412 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__SDCC_VERSION_MINOR)}\par
00413 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SDCC_VERSION_PATCH)}\par
00414 {\cf21 # else}\par
00415   {\cf20 /* SDCC = VRP */}\par
00416 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(SDCC/100)}\par
00417 {\cf21 #  define COMPILER_VERSION_MINOR DEC(SDCC/10 % 10)}\par
00418 {\cf21 #  define COMPILER_VERSION_PATCH DEC(SDCC    % 10)}\par
00419 {\cf21 # endif}\par
00420 \par
00421 \par
00422 {\cf20 /* These compilers are either not known or too old to define an}\par
00423 {\cf20   identification macro.  Try to identify the platform and guess that}\par
00424 {\cf20   it is the native compiler.  */}\par
00425 {\cf21 #elif defined(__hpux) || defined(__hpua)}\par
00426 {\cf21 # define COMPILER_ID "HP"}\par
00427 \par
00428 {\cf21 #else }{\cf20 /* unknown compiler */}{\cf21 }\par
00429 {\cf21 # define COMPILER_ID ""}\par
00430 {\cf21 #endif}\par
00431 \par
00432 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00433 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00434 {\cf20    because some compilers will just produce instructions to fill the}\par
00435 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00436 {\cf18 char} {\cf17 const}* info_compiler = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler["} COMPILER_ID {\cf22 "]"};\par
00437 {\cf21 #ifdef SIMULATE_ID}\par
00438 {\cf18 char} {\cf17 const}* info_simulate = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "simulate["} SIMULATE_ID {\cf22 "]"};\par
00439 {\cf21 #endif}\par
00440 \par
00441 {\cf21 #ifdef __QNXNTO__}\par
00442 {\cf18 char} {\cf17 const}* qnxnto = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "qnxnto[]"};\par
00443 {\cf21 #endif}\par
00444 \par
00445 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00446 {\cf18 char} {\cf17 const} *info_cray = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_wrapper[CrayPrgEnv]"};\par
00447 {\cf21 #endif}\par
00448 \par
00449 {\cf21 #define STRINGIFY_HELPER(X) #X}\par
00450 {\cf21 #define STRINGIFY(X) STRINGIFY_HELPER(X)}\par
00451 \par
00452 {\cf20 /* Identify known platforms by name.  */}\par
00453 {\cf21 #if defined(__linux) || defined(__linux__) || defined(linux)}\par
00454 {\cf21 # define PLATFORM_ID "Linux"}\par
00455 \par
00456 {\cf21 #elif defined(__MSYS__)}\par
00457 {\cf21 # define PLATFORM_ID "MSYS"}\par
00458 \par
00459 {\cf21 #elif defined(__CYGWIN__)}\par
00460 {\cf21 # define PLATFORM_ID "Cygwin"}\par
00461 \par
00462 {\cf21 #elif defined(__MINGW32__)}\par
00463 {\cf21 # define PLATFORM_ID "MinGW"}\par
00464 \par
00465 {\cf21 #elif defined(__APPLE__)}\par
00466 {\cf21 # define PLATFORM_ID "Darwin"}\par
00467 \par
00468 {\cf21 #elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)}\par
00469 {\cf21 # define PLATFORM_ID "Windows"}\par
00470 \par
00471 {\cf21 #elif defined(__FreeBSD__) || defined(__FreeBSD)}\par
00472 {\cf21 # define PLATFORM_ID "FreeBSD"}\par
00473 \par
00474 {\cf21 #elif defined(__NetBSD__) || defined(__NetBSD)}\par
00475 {\cf21 # define PLATFORM_ID "NetBSD"}\par
00476 \par
00477 {\cf21 #elif defined(__OpenBSD__) || defined(__OPENBSD)}\par
00478 {\cf21 # define PLATFORM_ID "OpenBSD"}\par
00479 \par
00480 {\cf21 #elif defined(__sun) || defined(sun)}\par
00481 {\cf21 # define PLATFORM_ID "SunOS"}\par
00482 \par
00483 {\cf21 #elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)}\par
00484 {\cf21 # define PLATFORM_ID "AIX"}\par
00485 \par
00486 {\cf21 #elif defined(__hpux) || defined(__hpux__)}\par
00487 {\cf21 # define PLATFORM_ID "HP-UX"}\par
00488 \par
00489 {\cf21 #elif defined(__HAIKU__)}\par
00490 {\cf21 # define PLATFORM_ID "Haiku"}\par
00491 \par
00492 {\cf21 #elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)}\par
00493 {\cf21 # define PLATFORM_ID "BeOS"}\par
00494 \par
00495 {\cf21 #elif defined(__QNX__) || defined(__QNXNTO__)}\par
00496 {\cf21 # define PLATFORM_ID "QNX"}\par
00497 \par
00498 {\cf21 #elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)}\par
00499 {\cf21 # define PLATFORM_ID "Tru64"}\par
00500 \par
00501 {\cf21 #elif defined(__riscos) || defined(__riscos__)}\par
00502 {\cf21 # define PLATFORM_ID "RISCos"}\par
00503 \par
00504 {\cf21 #elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)}\par
00505 {\cf21 # define PLATFORM_ID "SINIX"}\par
00506 \par
00507 {\cf21 #elif defined(__UNIX_SV__)}\par
00508 {\cf21 # define PLATFORM_ID "UNIX_SV"}\par
00509 \par
00510 {\cf21 #elif defined(__bsdos__)}\par
00511 {\cf21 # define PLATFORM_ID "BSDOS"}\par
00512 \par
00513 {\cf21 #elif defined(_MPRAS) || defined(MPRAS)}\par
00514 {\cf21 # define PLATFORM_ID "MP-RAS"}\par
00515 \par
00516 {\cf21 #elif defined(__osf) || defined(__osf__)}\par
00517 {\cf21 # define PLATFORM_ID "OSF1"}\par
00518 \par
00519 {\cf21 #elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)}\par
00520 {\cf21 # define PLATFORM_ID "SCO_SV"}\par
00521 \par
00522 {\cf21 #elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)}\par
00523 {\cf21 # define PLATFORM_ID "ULTRIX"}\par
00524 \par
00525 {\cf21 #elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)}\par
00526 {\cf21 # define PLATFORM_ID "Xenix"}\par
00527 \par
00528 {\cf21 #elif defined(__WATCOMC__)}\par
00529 {\cf21 # if defined(__LINUX__)}\par
00530 {\cf21 #  define PLATFORM_ID "Linux"}\par
00531 \par
00532 {\cf21 # elif defined(__DOS__)}\par
00533 {\cf21 #  define PLATFORM_ID "DOS"}\par
00534 \par
00535 {\cf21 # elif defined(__OS2__)}\par
00536 {\cf21 #  define PLATFORM_ID "OS2"}\par
00537 \par
00538 {\cf21 # elif defined(__WINDOWS__)}\par
00539 {\cf21 #  define PLATFORM_ID "Windows3x"}\par
00540 \par
00541 {\cf21 # elif defined(__VXWORKS__)}\par
00542 {\cf21 #  define PLATFORM_ID "VxWorks"}\par
00543 \par
00544 {\cf21 # else }{\cf20 /* unknown platform */}{\cf21 }\par
00545 {\cf21 #  define PLATFORM_ID}\par
00546 {\cf21 # endif}\par
00547 \par
00548 {\cf21 #elif defined(__INTEGRITY)}\par
00549 {\cf21 # if defined(INT_178B)}\par
00550 {\cf21 #  define PLATFORM_ID "Integrity178"}\par
00551 \par
00552 {\cf21 # else }{\cf20 /* regular Integrity */}{\cf21 }\par
00553 {\cf21 #  define PLATFORM_ID "Integrity"}\par
00554 {\cf21 # endif}\par
00555 \par
00556 {\cf21 # elif defined(_ADI_COMPILER)}\par
00557 {\cf21 #  define PLATFORM_ID "ADSP"}\par
00558 \par
00559 {\cf21 #else }{\cf20 /* unknown platform */}{\cf21 }\par
00560 {\cf21 # define PLATFORM_ID}\par
00561 \par
00562 {\cf21 #endif}\par
00563 \par
00564 {\cf20 /* For windows compilers MSVC and Intel we can determine}\par
00565 {\cf20    the architecture of the compiler being used.  This is because}\par
00566 {\cf20    the compilers do not have flags that can change the architecture,}\par
00567 {\cf20    but rather depend on which compiler is being used}\par
00568 {\cf20 */}\par
00569 {\cf21 #if defined(_WIN32) && defined(_MSC_VER)}\par
00570 {\cf21 # if defined(_M_IA64)}\par
00571 {\cf21 #  define ARCHITECTURE_ID "IA64"}\par
00572 \par
00573 {\cf21 # elif defined(_M_ARM64EC)}\par
00574 {\cf21 #  define ARCHITECTURE_ID "ARM64EC"}\par
00575 \par
00576 {\cf21 # elif defined(_M_X64) || defined(_M_AMD64)}\par
00577 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00578 \par
00579 {\cf21 # elif defined(_M_IX86)}\par
00580 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00581 \par
00582 {\cf21 # elif defined(_M_ARM64)}\par
00583 {\cf21 #  define ARCHITECTURE_ID "ARM64"}\par
00584 \par
00585 {\cf21 # elif defined(_M_ARM)}\par
00586 {\cf21 #  if _M_ARM == 4}\par
00587 {\cf21 #   define ARCHITECTURE_ID "ARMV4I"}\par
00588 {\cf21 #  elif _M_ARM == 5}\par
00589 {\cf21 #   define ARCHITECTURE_ID "ARMV5I"}\par
00590 {\cf21 #  else}\par
00591 {\cf21 #   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)}\par
00592 {\cf21 #  endif}\par
00593 \par
00594 {\cf21 # elif defined(_M_MIPS)}\par
00595 {\cf21 #  define ARCHITECTURE_ID "MIPS"}\par
00596 \par
00597 {\cf21 # elif defined(_M_SH)}\par
00598 {\cf21 #  define ARCHITECTURE_ID "SHx"}\par
00599 \par
00600 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00601 {\cf21 #  define ARCHITECTURE_ID ""}\par
00602 {\cf21 # endif}\par
00603 \par
00604 {\cf21 #elif defined(__WATCOMC__)}\par
00605 {\cf21 # if defined(_M_I86)}\par
00606 {\cf21 #  define ARCHITECTURE_ID "I86"}\par
00607 \par
00608 {\cf21 # elif defined(_M_IX86)}\par
00609 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00610 \par
00611 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00612 {\cf21 #  define ARCHITECTURE_ID ""}\par
00613 {\cf21 # endif}\par
00614 \par
00615 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00616 {\cf21 # if defined(__ICCARM__)}\par
00617 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00618 \par
00619 {\cf21 # elif defined(__ICCRX__)}\par
00620 {\cf21 #  define ARCHITECTURE_ID "RX"}\par
00621 \par
00622 {\cf21 # elif defined(__ICCRH850__)}\par
00623 {\cf21 #  define ARCHITECTURE_ID "RH850"}\par
00624 \par
00625 {\cf21 # elif defined(__ICCRL78__)}\par
00626 {\cf21 #  define ARCHITECTURE_ID "RL78"}\par
00627 \par
00628 {\cf21 # elif defined(__ICCRISCV__)}\par
00629 {\cf21 #  define ARCHITECTURE_ID "RISCV"}\par
00630 \par
00631 {\cf21 # elif defined(__ICCAVR__)}\par
00632 {\cf21 #  define ARCHITECTURE_ID "AVR"}\par
00633 \par
00634 {\cf21 # elif defined(__ICC430__)}\par
00635 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00636 \par
00637 {\cf21 # elif defined(__ICCV850__)}\par
00638 {\cf21 #  define ARCHITECTURE_ID "V850"}\par
00639 \par
00640 {\cf21 # elif defined(__ICC8051__)}\par
00641 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00642 \par
00643 {\cf21 # elif defined(__ICCSTM8__)}\par
00644 {\cf21 #  define ARCHITECTURE_ID "STM8"}\par
00645 \par
00646 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00647 {\cf21 #  define ARCHITECTURE_ID ""}\par
00648 {\cf21 # endif}\par
00649 \par
00650 {\cf21 #elif defined(__ghs__)}\par
00651 {\cf21 # if defined(__PPC64__)}\par
00652 {\cf21 #  define ARCHITECTURE_ID "PPC64"}\par
00653 \par
00654 {\cf21 # elif defined(__ppc__)}\par
00655 {\cf21 #  define ARCHITECTURE_ID "PPC"}\par
00656 \par
00657 {\cf21 # elif defined(__ARM__)}\par
00658 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00659 \par
00660 {\cf21 # elif defined(__x86_64__)}\par
00661 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00662 \par
00663 {\cf21 # elif defined(__i386__)}\par
00664 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00665 \par
00666 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00667 {\cf21 #  define ARCHITECTURE_ID ""}\par
00668 {\cf21 # endif}\par
00669 \par
00670 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00671 {\cf21 # if defined(__TI_ARM__)}\par
00672 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00673 \par
00674 {\cf21 # elif defined(__MSP430__)}\par
00675 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00676 \par
00677 {\cf21 # elif defined(__TMS320C28XX__)}\par
00678 {\cf21 #  define ARCHITECTURE_ID "TMS320C28x"}\par
00679 \par
00680 {\cf21 # elif defined(__TMS320C6X__) || defined(_TMS320C6X)}\par
00681 {\cf21 #  define ARCHITECTURE_ID "TMS320C6x"}\par
00682 \par
00683 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00684 {\cf21 #  define ARCHITECTURE_ID ""}\par
00685 {\cf21 # endif}\par
00686 \par
00687 {\cf21 # elif defined(__ADSPSHARC__)}\par
00688 {\cf21 #  define ARCHITECTURE_ID "SHARC"}\par
00689 \par
00690 {\cf21 # elif defined(__ADSPBLACKFIN__)}\par
00691 {\cf21 #  define ARCHITECTURE_ID "Blackfin"}\par
00692 \par
00693 {\cf21 #elif defined(__TASKING__)}\par
00694 \par
00695 {\cf21 # if defined(__CTC__) || defined(__CPTC__)}\par
00696 {\cf21 #  define ARCHITECTURE_ID "TriCore"}\par
00697 \par
00698 {\cf21 # elif defined(__CMCS__)}\par
00699 {\cf21 #  define ARCHITECTURE_ID "MCS"}\par
00700 \par
00701 {\cf21 # elif defined(__CARM__)}\par
00702 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00703 \par
00704 {\cf21 # elif defined(__CARC__)}\par
00705 {\cf21 #  define ARCHITECTURE_ID "ARC"}\par
00706 \par
00707 {\cf21 # elif defined(__C51__)}\par
00708 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00709 \par
00710 {\cf21 # elif defined(__CPCP__)}\par
00711 {\cf21 #  define ARCHITECTURE_ID "PCP"}\par
00712 \par
00713 {\cf21 # else}\par
00714 {\cf21 #  define ARCHITECTURE_ID ""}\par
00715 {\cf21 # endif}\par
00716 \par
00717 {\cf21 #else}\par
00718 {\cf21 #  define ARCHITECTURE_ID}\par
00719 {\cf21 #endif}\par
00720 \par
00721 {\cf20 /* Convert integer to decimal digit literals.  */}\par
00722 {\cf21 #define DEC(n)                   \\}\par
00723 {\cf21   ('0' + (((n) / 10000000)%10)), \\}\par
00724 {\cf21   ('0' + (((n) / 1000000)%10)),  \\}\par
00725 {\cf21   ('0' + (((n) / 100000)%10)),   \\}\par
00726 {\cf21   ('0' + (((n) / 10000)%10)),    \\}\par
00727 {\cf21   ('0' + (((n) / 1000)%10)),     \\}\par
00728 {\cf21   ('0' + (((n) / 100)%10)),      \\}\par
00729 {\cf21   ('0' + (((n) / 10)%10)),       \\}\par
00730 {\cf21   ('0' +  ((n) % 10))}\par
00731 \par
00732 {\cf20 /* Convert integer to hex digit literals.  */}\par
00733 {\cf21 #define HEX(n)             \\}\par
00734 {\cf21   ('0' + ((n)>>28 & 0xF)), \\}\par
00735 {\cf21   ('0' + ((n)>>24 & 0xF)), \\}\par
00736 {\cf21   ('0' + ((n)>>20 & 0xF)), \\}\par
00737 {\cf21   ('0' + ((n)>>16 & 0xF)), \\}\par
00738 {\cf21   ('0' + ((n)>>12 & 0xF)), \\}\par
00739 {\cf21   ('0' + ((n)>>8  & 0xF)), \\}\par
00740 {\cf21   ('0' + ((n)>>4  & 0xF)), \\}\par
00741 {\cf21   ('0' + ((n)     & 0xF))}\par
00742 \par
00743 {\cf20 /* Construct a string literal encoding the version number. */}\par
00744 {\cf21 #ifdef COMPILER_VERSION}\par
00745 {\cf18 char} {\cf17 const}* info_version = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version["} COMPILER_VERSION {\cf22 "]"};\par
00746 \par
00747 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00748 {\cf21 #elif defined(COMPILER_VERSION_MAJOR)}\par
00749 {\cf18 char} {\cf17 const} info_version[] = \{\par
00750   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00751   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00752   COMPILER_VERSION_MAJOR,\par
00753 {\cf21 # ifdef COMPILER_VERSION_MINOR}\par
00754   {\cf23 '.'}, COMPILER_VERSION_MINOR,\par
00755 {\cf21 #  ifdef COMPILER_VERSION_PATCH}\par
00756    {\cf23 '.'}, COMPILER_VERSION_PATCH,\par
00757 {\cf21 #   ifdef COMPILER_VERSION_TWEAK}\par
00758     {\cf23 '.'}, COMPILER_VERSION_TWEAK,\par
00759 {\cf21 #   endif}\par
00760 {\cf21 #  endif}\par
00761 {\cf21 # endif}\par
00762   {\cf23 ']'},{\cf23 '\\0'}\};\par
00763 {\cf21 #endif}\par
00764 \par
00765 {\cf20 /* Construct a string literal encoding the internal version number. */}\par
00766 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00767 {\cf18 char} {\cf17 const} info_version_internal[] = \{\par
00768   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00769   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
00770   {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
00771   COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\};\par
00772 {\cf21 #elif defined(COMPILER_VERSION_INTERNAL_STR)}\par
00773 {\cf18 char} {\cf17 const}* info_version_internal = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version_internal["} COMPILER_VERSION_INTERNAL_STR {\cf22 "]"};\par
00774 {\cf21 #endif}\par
00775 \par
00776 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00777 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00778 {\cf18 char} {\cf17 const} info_simulate_version[] = \{\par
00779   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00780   {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00781   SIMULATE_VERSION_MAJOR,\par
00782 {\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
00783   {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
00784 {\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
00785    {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
00786 {\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
00787     {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
00788 {\cf21 #   endif}\par
00789 {\cf21 #  endif}\par
00790 {\cf21 # endif}\par
00791   {\cf23 ']'},{\cf23 '\\0'}\};\par
00792 {\cf21 #endif}\par
00793 \par
00794 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00795 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00796 {\cf20    because some compilers will just produce instructions to fill the}\par
00797 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00798 {\cf18 char} {\cf17 const}* info_platform = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "platform["} PLATFORM_ID {\cf22 "]"};\par
00799 {\cf18 char} {\cf17 const}* info_arch = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "arch["} ARCHITECTURE_ID {\cf22 "]"};\par
00800 \par
00801 \par
00802 \par
00803 {\cf21 #if !defined(__STDC__) && !defined(__clang__)}\par
00804 {\cf21 # if defined(_MSC_VER) || defined(__ibmxl__) || defined(__IBMC__)}\par
00805 {\cf21 #  define C_VERSION "90"}\par
00806 {\cf21 # else}\par
00807 {\cf21 #  define C_VERSION}\par
00808 {\cf21 # endif}\par
00809 {\cf21 #elif __STDC_VERSION__ > 201710L}\par
00810 {\cf21 # define C_VERSION "23"}\par
00811 {\cf21 #elif __STDC_VERSION__ >= 201710L}\par
00812 {\cf21 # define C_VERSION "17"}\par
00813 {\cf21 #elif __STDC_VERSION__ >= 201000L}\par
00814 {\cf21 # define C_VERSION "11"}\par
00815 {\cf21 #elif __STDC_VERSION__ >= 199901L}\par
00816 {\cf21 # define C_VERSION "99"}\par
00817 {\cf21 #else}\par
00818 {\cf21 # define C_VERSION "90"}\par
00819 {\cf21 #endif}\par
00820 {\cf17 const} {\cf18 char}* info_language_standard_default =\par
00821   {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["} C_VERSION {\cf22 "]"};\par
00822 \par
00823 {\cf17 const} {\cf18 char}* info_language_extensions_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
00824 {\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
00825 {\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
00826 {\cf21   !defined(__STRICT_ANSI__)}\par
00827   {\cf22 "ON"}\par
00828 {\cf21 #else}\par
00829   {\cf22 "OFF"}\par
00830 {\cf21 #endif}\par
00831 {\cf22 "]"};\par
00832 \par
00833 {\cf20 /*--------------------------------------------------------------------------*/}\par
00834 \par
00835 {\cf21 #ifdef ID_VOID_MAIN}\par
00836 {\cf18 void} main() \{\}\par
00837 {\cf21 #else}\par
00838 {\cf21 # if defined(__CLASSIC_C__)}\par
00839 {\cf18 int} main(argc, argv) {\cf18 int} argc; {\cf18 char} *argv[];\par
00840 {\cf21 # else}\par
00841 {\cf18 int} main({\cf18 int} argc, {\cf18 char}* argv[])\par
00842 {\cf21 # endif}\par
00843 \{\par
00844   {\cf18 int} require = 0;\par
00845   require += info_compiler[argc];\par
00846   require += info_platform[argc];\par
00847   require += info_arch[argc];\par
00848 {\cf21 #ifdef COMPILER_VERSION_MAJOR}\par
00849   require += info_version[argc];\par
00850 {\cf21 #endif}\par
00851 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00852   require += info_version_internal[argc];\par
00853 {\cf21 #endif}\par
00854 {\cf21 #ifdef SIMULATE_ID}\par
00855   require += info_simulate[argc];\par
00856 {\cf21 #endif}\par
00857 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00858   require += info_simulate_version[argc];\par
00859 {\cf21 #endif}\par
00860 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00861   require += info_cray[argc];\par
00862 {\cf21 #endif}\par
00863   require += info_language_standard_default[argc];\par
00864   require += info_language_extensions_default[argc];\par
00865   (void)argv;\par
00866   {\cf19 return} require;\par
00867 \}\par
00868 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c File Reference\par \pard\plain 
{\tc\tcl2 \v CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c}
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b main} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, argv)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_compiler} = "INFO" ":" "compiler[" COMPILER_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_simulate} = "INFO" ":" "simulate[" SIMULATE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b qnxnto} = "INFO" ":" "qnxnto[]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_cray} = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_version} = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_version_internal} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_simulate_version} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_platform} = "INFO" ":" "platform[" PLATFORM_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_arch} = "INFO" ":" "arch[" ARCHITECTURE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_standard_default}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_extensions_default}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void main ()}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 836} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v main\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, argv )}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 839} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v info_arch\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_arch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]"}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 799} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_compiler\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_compiler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]"}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 436} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_cray\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_cray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 446} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_language_extensions_default\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_language_extensions_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_extensions_default}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
{\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
{\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
{\cf21   !defined(__STRICT_ANSI__)}\par
  {\cf22 "ON"}\par
{\cf21 #else}\par
  {\cf22 "OFF"}\par
{\cf21 #endif}\par
{\cf22 "]"}\par
}
{
Definition at line {\b 823} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_language_standard_default\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_language_standard_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_standard_default}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =\par
  {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["} C_VERSION {\cf22 "]"}\par
}
{
Definition at line {\b 820} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_platform\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_platform}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]"}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 798} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_simulate\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_simulate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]"}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 438} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_simulate_version\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_simulate_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_simulate_version[]}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
  SIMULATE_VERSION_MAJOR,\par
{\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
  {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
{\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
   {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
{\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
    {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
{\cf21 #   endif}\par
{\cf21 #  endif}\par
{\cf21 # endif}\par
  {\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 778} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_version\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_version[] = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 745} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_version_internal\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_version_internal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_version_internal}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
  {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
  COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 767} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v qnxnto\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:qnxnto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* qnxnto = "INFO" ":" "qnxnto[]"}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 442} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c\par \pard\plain 
{\tc\tcl2 \v CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifdef __cplusplus}\par
00002 {\cf21 # error "A C++ compiler has been selected for C."}\par
00003 {\cf21 #endif}\par
00004 \par
00005 {\cf21 #if defined(__18CXX)}\par
00006 {\cf21 # define ID_VOID_MAIN}\par
00007 {\cf21 #endif}\par
00008 {\cf21 #if defined(__CLASSIC_C__)}\par
00009 {\cf20 /* cv-qualifiers did not exist in K&R C */}\par
00010 {\cf21 # define const}\par
00011 {\cf21 # define volatile}\par
00012 {\cf21 #endif}\par
00013 \par
00014 {\cf21 #if !defined(__has_include)}\par
00015 {\cf20 /* If the compiler does not have __has_include, pretend the answer is}\par
00016 {\cf20    always no.  */}\par
00017 {\cf21 #  define __has_include(x) 0}\par
00018 {\cf21 #endif}\par
00019 \par
00020 \par
00021 {\cf20 /* Version number components: V=Version, R=Revision, P=Patch}\par
00022 {\cf20    Version date components:   YYYY=Year, MM=Month,   DD=Day  */}\par
00023 \par
00024 {\cf21 #if defined(__INTEL_COMPILER) || defined(__ICC)}\par
00025 {\cf21 # define COMPILER_ID "Intel"}\par
00026 {\cf21 # if defined(_MSC_VER)}\par
00027 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00028 {\cf21 # endif}\par
00029 {\cf21 # if defined(__GNUC__)}\par
00030 {\cf21 #  define SIMULATE_ID "GNU"}\par
00031 {\cf21 # endif}\par
00032   {\cf20 /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,}\par
00033 {\cf20      except that a few beta releases use the old format with V=2021.  */}\par
00034 {\cf21 # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111}\par
00035 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)}\par
00036 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)}\par
00037 {\cf21 #  if defined(__INTEL_COMPILER_UPDATE)}\par
00038 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)}\par
00039 {\cf21 #  else}\par
00040 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)}\par
00041 {\cf21 #  endif}\par
00042 {\cf21 # else}\par
00043 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)}\par
00044 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)}\par
00045    {\cf20 /* The third version component from --version is an update index,}\par
00046 {\cf20       but no macro is provided for it.  */}\par
00047 {\cf21 #  define COMPILER_VERSION_PATCH DEC(0)}\par
00048 {\cf21 # endif}\par
00049 {\cf21 # if defined(__INTEL_COMPILER_BUILD_DATE)}\par
00050    {\cf20 /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */}\par
00051 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)}\par
00052 {\cf21 # endif}\par
00053 {\cf21 # if defined(_MSC_VER)}\par
00054    {\cf20 /* _MSC_VER = VVRR */}\par
00055 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00056 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00057 {\cf21 # endif}\par
00058 {\cf21 # if defined(__GNUC__)}\par
00059 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00060 {\cf21 # elif defined(__GNUG__)}\par
00061 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00062 {\cf21 # endif}\par
00063 {\cf21 # if defined(__GNUC_MINOR__)}\par
00064 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00065 {\cf21 # endif}\par
00066 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00067 {\cf21 #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00068 {\cf21 # endif}\par
00069 \par
00070 {\cf21 #elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)}\par
00071 {\cf21 # define COMPILER_ID "IntelLLVM"}\par
00072 {\cf21 #if defined(_MSC_VER)}\par
00073 {\cf21 # define SIMULATE_ID "MSVC"}\par
00074 {\cf21 #endif}\par
00075 {\cf21 #if defined(__GNUC__)}\par
00076 {\cf21 # define SIMULATE_ID "GNU"}\par
00077 {\cf21 #endif}\par
00078 {\cf20 /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and}\par
00079 {\cf20  * later.  Look for 6 digit vs. 8 digit version number to decide encoding.}\par
00080 {\cf20  * VVVV is no smaller than the current year when a version is released.}\par
00081 {\cf20  */}\par
00082 {\cf21 #if __INTEL_LLVM_COMPILER < 1000000L}\par
00083 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)}\par
00084 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)}\par
00085 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)}\par
00086 {\cf21 #else}\par
00087 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)}\par
00088 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)}\par
00089 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)}\par
00090 {\cf21 #endif}\par
00091 {\cf21 #if defined(_MSC_VER)}\par
00092   {\cf20 /* _MSC_VER = VVRR */}\par
00093 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00094 {\cf21 # define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00095 {\cf21 #endif}\par
00096 {\cf21 #if defined(__GNUC__)}\par
00097 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00098 {\cf21 #elif defined(__GNUG__)}\par
00099 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00100 {\cf21 #endif}\par
00101 {\cf21 #if defined(__GNUC_MINOR__)}\par
00102 {\cf21 # define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00103 {\cf21 #endif}\par
00104 {\cf21 #if defined(__GNUC_PATCHLEVEL__)}\par
00105 {\cf21 # define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00106 {\cf21 #endif}\par
00107 \par
00108 {\cf21 #elif defined(__PATHCC__)}\par
00109 {\cf21 # define COMPILER_ID "PathScale"}\par
00110 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PATHCC__)}\par
00111 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)}\par
00112 {\cf21 # if defined(__PATHCC_PATCHLEVEL__)}\par
00113 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)}\par
00114 {\cf21 # endif}\par
00115 \par
00116 {\cf21 #elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)}\par
00117 {\cf21 # define COMPILER_ID "Embarcadero"}\par
00118 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)}\par
00119 {\cf21 # define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)}\par
00120 {\cf21 # define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)}\par
00121 \par
00122 {\cf21 #elif defined(__BORLANDC__)}\par
00123 {\cf21 # define COMPILER_ID "Borland"}\par
00124   {\cf20 /* __BORLANDC__ = 0xVRR */}\par
00125 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)}\par
00126 {\cf21 # define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)}\par
00127 \par
00128 {\cf21 #elif defined(__WATCOMC__) && __WATCOMC__ < 1200}\par
00129 {\cf21 # define COMPILER_ID "Watcom"}\par
00130    {\cf20 /* __WATCOMC__ = VVRR */}\par
00131 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)}\par
00132 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00133 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00134 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00135 {\cf21 # endif}\par
00136 \par
00137 {\cf21 #elif defined(__WATCOMC__)}\par
00138 {\cf21 # define COMPILER_ID "OpenWatcom"}\par
00139    {\cf20 /* __WATCOMC__ = VVRP + 1100 */}\par
00140 {\cf21 # define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)}\par
00141 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00142 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00143 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00144 {\cf21 # endif}\par
00145 \par
00146 {\cf21 #elif defined(__SUNPRO_C)}\par
00147 {\cf21 # define COMPILER_ID "SunPro"}\par
00148 {\cf21 # if __SUNPRO_C >= 0x5100}\par
00149    {\cf20 /* __SUNPRO_C = 0xVRRP */}\par
00150 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>12)}\par
00151 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xFF)}\par
00152 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)}\par
00153 {\cf21 # else}\par
00154    {\cf20 /* __SUNPRO_CC = 0xVRP */}\par
00155 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>8)}\par
00156 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xF)}\par
00157 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)}\par
00158 {\cf21 # endif}\par
00159 \par
00160 {\cf21 #elif defined(__HP_cc)}\par
00161 {\cf21 # define COMPILER_ID "HP"}\par
00162   {\cf20 /* __HP_cc = VVRRPP */}\par
00163 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__HP_cc/10000)}\par
00164 {\cf21 # define COMPILER_VERSION_MINOR DEC(__HP_cc/100 % 100)}\par
00165 {\cf21 # define COMPILER_VERSION_PATCH DEC(__HP_cc     % 100)}\par
00166 \par
00167 {\cf21 #elif defined(__DECC)}\par
00168 {\cf21 # define COMPILER_ID "Compaq"}\par
00169   {\cf20 /* __DECC_VER = VVRRTPPPP */}\par
00170 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__DECC_VER/10000000)}\par
00171 {\cf21 # define COMPILER_VERSION_MINOR DEC(__DECC_VER/100000  % 100)}\par
00172 {\cf21 # define COMPILER_VERSION_PATCH DEC(__DECC_VER         % 10000)}\par
00173 \par
00174 {\cf21 #elif defined(__IBMC__) && defined(__COMPILER_VER__)}\par
00175 {\cf21 # define COMPILER_ID "zOS"}\par
00176   {\cf20 /* __IBMC__ = VRP */}\par
00177 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00178 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00179 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00180 \par
00181 {\cf21 #elif defined(__open_xl__) && defined(__clang__)}\par
00182 {\cf21 # define COMPILER_ID "IBMClang"}\par
00183 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)}\par
00184 {\cf21 # define COMPILER_VERSION_MINOR DEC(__open_xl_release__)}\par
00185 {\cf21 # define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)}\par
00186 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)}\par
00187 \par
00188 \par
00189 {\cf21 #elif defined(__ibmxl__) && defined(__clang__)}\par
00190 {\cf21 # define COMPILER_ID "XLClang"}\par
00191 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)}\par
00192 {\cf21 # define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)}\par
00193 {\cf21 # define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)}\par
00194 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)}\par
00195 \par
00196 \par
00197 {\cf21 #elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ >= 800}\par
00198 {\cf21 # define COMPILER_ID "XL"}\par
00199   {\cf20 /* __IBMC__ = VRP */}\par
00200 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00201 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00202 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00203 \par
00204 {\cf21 #elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ < 800}\par
00205 {\cf21 # define COMPILER_ID "VisualAge"}\par
00206   {\cf20 /* __IBMC__ = VRP */}\par
00207 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00208 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00209 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00210 \par
00211 {\cf21 #elif defined(__NVCOMPILER)}\par
00212 {\cf21 # define COMPILER_ID "NVHPC"}\par
00213 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)}\par
00214 {\cf21 # define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)}\par
00215 {\cf21 # if defined(__NVCOMPILER_PATCHLEVEL__)}\par
00216 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)}\par
00217 {\cf21 # endif}\par
00218 \par
00219 {\cf21 #elif defined(__PGI)}\par
00220 {\cf21 # define COMPILER_ID "PGI"}\par
00221 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PGIC__)}\par
00222 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)}\par
00223 {\cf21 # if defined(__PGIC_PATCHLEVEL__)}\par
00224 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)}\par
00225 {\cf21 # endif}\par
00226 \par
00227 {\cf21 #elif defined(_CRAYC)}\par
00228 {\cf21 # define COMPILER_ID "Cray"}\par
00229 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)}\par
00230 {\cf21 # define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)}\par
00231 \par
00232 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00233 {\cf21 # define COMPILER_ID "TI"}\par
00234   {\cf20 /* __TI_COMPILER_VERSION__ = VVVRRRPPP */}\par
00235 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)}\par
00236 {\cf21 # define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)}\par
00237 {\cf21 # define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)}\par
00238 \par
00239 {\cf21 #elif defined(__CLANG_FUJITSU)}\par
00240 {\cf21 # define COMPILER_ID "FujitsuClang"}\par
00241 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00242 {\cf21 # define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00243 {\cf21 # define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00244 {\cf21 # define COMPILER_VERSION_INTERNAL_STR __clang_version__}\par
00245 \par
00246 \par
00247 {\cf21 #elif defined(__FUJITSU)}\par
00248 {\cf21 # define COMPILER_ID "Fujitsu"}\par
00249 {\cf21 # if defined(__FCC_version__)}\par
00250 {\cf21 #   define COMPILER_VERSION __FCC_version__}\par
00251 {\cf21 # elif defined(__FCC_major__)}\par
00252 {\cf21 #   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00253 {\cf21 #   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00254 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00255 {\cf21 # endif}\par
00256 {\cf21 # if defined(__fcc_version)}\par
00257 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)}\par
00258 {\cf21 # elif defined(__FCC_VERSION)}\par
00259 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)}\par
00260 {\cf21 # endif}\par
00261 \par
00262 \par
00263 {\cf21 #elif defined(__ghs__)}\par
00264 {\cf21 # define COMPILER_ID "GHS"}\par
00265 {\cf20 /* __GHS_VERSION_NUMBER = VVVVRP */}\par
00266 {\cf21 # ifdef __GHS_VERSION_NUMBER}\par
00267 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)}\par
00268 {\cf21 # define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)}\par
00269 {\cf21 # define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)}\par
00270 {\cf21 # endif}\par
00271 \par
00272 {\cf21 #elif defined(__TASKING__)}\par
00273 {\cf21 # define COMPILER_ID "Tasking"}\par
00274 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)}\par
00275 {\cf21   # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)}\par
00276 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__VERSION__)}\par
00277 \par
00278 {\cf21 #elif defined(__TINYC__)}\par
00279 {\cf21 # define COMPILER_ID "TinyCC"}\par
00280 \par
00281 {\cf21 #elif defined(__BCC__)}\par
00282 {\cf21 # define COMPILER_ID "Bruce"}\par
00283 \par
00284 {\cf21 #elif defined(__SCO_VERSION__)}\par
00285 {\cf21 # define COMPILER_ID "SCO"}\par
00286 \par
00287 {\cf21 #elif defined(__ARMCC_VERSION) && !defined(__clang__)}\par
00288 {\cf21 # define COMPILER_ID "ARMCC"}\par
00289 {\cf21 #if __ARMCC_VERSION >= 1000000}\par
00290   {\cf20 /* __ARMCC_VERSION = VRRPPPP */}\par
00291 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)}\par
00292 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)}\par
00293 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)}\par
00294 {\cf21 #else}\par
00295   {\cf20 /* __ARMCC_VERSION = VRPPPP */}\par
00296 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)}\par
00297 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)}\par
00298 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)}\par
00299 {\cf21 #endif}\par
00300 \par
00301 \par
00302 {\cf21 #elif defined(__clang__) && defined(__apple_build_version__)}\par
00303 {\cf21 # define COMPILER_ID "AppleClang"}\par
00304 {\cf21 # if defined(_MSC_VER)}\par
00305 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00306 {\cf21 # endif}\par
00307 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00308 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00309 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00310 {\cf21 # if defined(_MSC_VER)}\par
00311    {\cf20 /* _MSC_VER = VVRR */}\par
00312 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00313 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00314 {\cf21 # endif}\par
00315 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)}\par
00316 \par
00317 {\cf21 #elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)}\par
00318 {\cf21 # define COMPILER_ID "ARMClang"}\par
00319 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)}\par
00320 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)}\par
00321 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION     % 10000)}\par
00322 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)}\par
00323 \par
00324 {\cf21 #elif defined(__clang__)}\par
00325 {\cf21 # define COMPILER_ID "Clang"}\par
00326 {\cf21 # if defined(_MSC_VER)}\par
00327 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00328 {\cf21 # endif}\par
00329 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00330 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00331 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00332 {\cf21 # if defined(_MSC_VER)}\par
00333    {\cf20 /* _MSC_VER = VVRR */}\par
00334 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00335 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00336 {\cf21 # endif}\par
00337 \par
00338 {\cf21 #elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))}\par
00339 {\cf21 # define COMPILER_ID "LCC"}\par
00340 {\cf21 # define COMPILER_VERSION_MAJOR DEC(1)}\par
00341 {\cf21 # if defined(__LCC__)}\par
00342 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__LCC__- 100)}\par
00343 {\cf21 # endif}\par
00344 {\cf21 # if defined(__LCC_MINOR__)}\par
00345 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)}\par
00346 {\cf21 # endif}\par
00347 {\cf21 # if defined(__GNUC__) && defined(__GNUC_MINOR__)}\par
00348 {\cf21 #  define SIMULATE_ID "GNU"}\par
00349 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00350 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00351 {\cf21 #  if defined(__GNUC_PATCHLEVEL__)}\par
00352 {\cf21 #   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00353 {\cf21 #  endif}\par
00354 {\cf21 # endif}\par
00355 \par
00356 {\cf21 #elif defined(__GNUC__)}\par
00357 {\cf21 # define COMPILER_ID "GNU"}\par
00358 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GNUC__)}\par
00359 {\cf21 # if defined(__GNUC_MINOR__)}\par
00360 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00361 {\cf21 # endif}\par
00362 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00363 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00364 {\cf21 # endif}\par
00365 \par
00366 {\cf21 #elif defined(_MSC_VER)}\par
00367 {\cf21 # define COMPILER_ID "MSVC"}\par
00368   {\cf20 /* _MSC_VER = VVRR */}\par
00369 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00370 {\cf21 # define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00371 {\cf21 # if defined(_MSC_FULL_VER)}\par
00372 {\cf21 #  if _MSC_VER >= 1400}\par
00373     {\cf20 /* _MSC_FULL_VER = VVRRPPPPP */}\par
00374 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)}\par
00375 {\cf21 #  else}\par
00376     {\cf20 /* _MSC_FULL_VER = VVRRPPPP */}\par
00377 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)}\par
00378 {\cf21 #  endif}\par
00379 {\cf21 # endif}\par
00380 {\cf21 # if defined(_MSC_BUILD)}\par
00381 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)}\par
00382 {\cf21 # endif}\par
00383 \par
00384 {\cf21 #elif defined(_ADI_COMPILER)}\par
00385 {\cf21 # define COMPILER_ID "ADSP"}\par
00386 {\cf21 #if defined(__VERSIONNUM__)}\par
00387   {\cf20 /* __VERSIONNUM__ = 0xVVRRPPTT */}\par
00388 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)}\par
00389 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)}\par
00390 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)}\par
00391 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)}\par
00392 {\cf21 #endif}\par
00393 \par
00394 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00395 {\cf21 # define COMPILER_ID "IAR"}\par
00396 {\cf21 # if defined(__VER__) && defined(__ICCARM__)}\par
00397 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)}\par
00398 {\cf21 #  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)}\par
00399 {\cf21 #  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)}\par
00400 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00401 {\cf21 # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))}\par
00402 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)}\par
00403 {\cf21 #  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))}\par
00404 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)}\par
00405 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00406 {\cf21 # endif}\par
00407 \par
00408 {\cf21 #elif defined(__SDCC_VERSION_MAJOR) || defined(SDCC)}\par
00409 {\cf21 # define COMPILER_ID "SDCC"}\par
00410 {\cf21 # if defined(__SDCC_VERSION_MAJOR)}\par
00411 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__SDCC_VERSION_MAJOR)}\par
00412 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__SDCC_VERSION_MINOR)}\par
00413 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SDCC_VERSION_PATCH)}\par
00414 {\cf21 # else}\par
00415   {\cf20 /* SDCC = VRP */}\par
00416 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(SDCC/100)}\par
00417 {\cf21 #  define COMPILER_VERSION_MINOR DEC(SDCC/10 % 10)}\par
00418 {\cf21 #  define COMPILER_VERSION_PATCH DEC(SDCC    % 10)}\par
00419 {\cf21 # endif}\par
00420 \par
00421 \par
00422 {\cf20 /* These compilers are either not known or too old to define an}\par
00423 {\cf20   identification macro.  Try to identify the platform and guess that}\par
00424 {\cf20   it is the native compiler.  */}\par
00425 {\cf21 #elif defined(__hpux) || defined(__hpua)}\par
00426 {\cf21 # define COMPILER_ID "HP"}\par
00427 \par
00428 {\cf21 #else }{\cf20 /* unknown compiler */}{\cf21 }\par
00429 {\cf21 # define COMPILER_ID ""}\par
00430 {\cf21 #endif}\par
00431 \par
00432 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00433 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00434 {\cf20    because some compilers will just produce instructions to fill the}\par
00435 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00436 {\cf18 char} {\cf17 const}* info_compiler = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler["} COMPILER_ID {\cf22 "]"};\par
00437 {\cf21 #ifdef SIMULATE_ID}\par
00438 {\cf18 char} {\cf17 const}* info_simulate = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "simulate["} SIMULATE_ID {\cf22 "]"};\par
00439 {\cf21 #endif}\par
00440 \par
00441 {\cf21 #ifdef __QNXNTO__}\par
00442 {\cf18 char} {\cf17 const}* qnxnto = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "qnxnto[]"};\par
00443 {\cf21 #endif}\par
00444 \par
00445 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00446 {\cf18 char} {\cf17 const} *info_cray = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_wrapper[CrayPrgEnv]"};\par
00447 {\cf21 #endif}\par
00448 \par
00449 {\cf21 #define STRINGIFY_HELPER(X) #X}\par
00450 {\cf21 #define STRINGIFY(X) STRINGIFY_HELPER(X)}\par
00451 \par
00452 {\cf20 /* Identify known platforms by name.  */}\par
00453 {\cf21 #if defined(__linux) || defined(__linux__) || defined(linux)}\par
00454 {\cf21 # define PLATFORM_ID "Linux"}\par
00455 \par
00456 {\cf21 #elif defined(__MSYS__)}\par
00457 {\cf21 # define PLATFORM_ID "MSYS"}\par
00458 \par
00459 {\cf21 #elif defined(__CYGWIN__)}\par
00460 {\cf21 # define PLATFORM_ID "Cygwin"}\par
00461 \par
00462 {\cf21 #elif defined(__MINGW32__)}\par
00463 {\cf21 # define PLATFORM_ID "MinGW"}\par
00464 \par
00465 {\cf21 #elif defined(__APPLE__)}\par
00466 {\cf21 # define PLATFORM_ID "Darwin"}\par
00467 \par
00468 {\cf21 #elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)}\par
00469 {\cf21 # define PLATFORM_ID "Windows"}\par
00470 \par
00471 {\cf21 #elif defined(__FreeBSD__) || defined(__FreeBSD)}\par
00472 {\cf21 # define PLATFORM_ID "FreeBSD"}\par
00473 \par
00474 {\cf21 #elif defined(__NetBSD__) || defined(__NetBSD)}\par
00475 {\cf21 # define PLATFORM_ID "NetBSD"}\par
00476 \par
00477 {\cf21 #elif defined(__OpenBSD__) || defined(__OPENBSD)}\par
00478 {\cf21 # define PLATFORM_ID "OpenBSD"}\par
00479 \par
00480 {\cf21 #elif defined(__sun) || defined(sun)}\par
00481 {\cf21 # define PLATFORM_ID "SunOS"}\par
00482 \par
00483 {\cf21 #elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)}\par
00484 {\cf21 # define PLATFORM_ID "AIX"}\par
00485 \par
00486 {\cf21 #elif defined(__hpux) || defined(__hpux__)}\par
00487 {\cf21 # define PLATFORM_ID "HP-UX"}\par
00488 \par
00489 {\cf21 #elif defined(__HAIKU__)}\par
00490 {\cf21 # define PLATFORM_ID "Haiku"}\par
00491 \par
00492 {\cf21 #elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)}\par
00493 {\cf21 # define PLATFORM_ID "BeOS"}\par
00494 \par
00495 {\cf21 #elif defined(__QNX__) || defined(__QNXNTO__)}\par
00496 {\cf21 # define PLATFORM_ID "QNX"}\par
00497 \par
00498 {\cf21 #elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)}\par
00499 {\cf21 # define PLATFORM_ID "Tru64"}\par
00500 \par
00501 {\cf21 #elif defined(__riscos) || defined(__riscos__)}\par
00502 {\cf21 # define PLATFORM_ID "RISCos"}\par
00503 \par
00504 {\cf21 #elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)}\par
00505 {\cf21 # define PLATFORM_ID "SINIX"}\par
00506 \par
00507 {\cf21 #elif defined(__UNIX_SV__)}\par
00508 {\cf21 # define PLATFORM_ID "UNIX_SV"}\par
00509 \par
00510 {\cf21 #elif defined(__bsdos__)}\par
00511 {\cf21 # define PLATFORM_ID "BSDOS"}\par
00512 \par
00513 {\cf21 #elif defined(_MPRAS) || defined(MPRAS)}\par
00514 {\cf21 # define PLATFORM_ID "MP-RAS"}\par
00515 \par
00516 {\cf21 #elif defined(__osf) || defined(__osf__)}\par
00517 {\cf21 # define PLATFORM_ID "OSF1"}\par
00518 \par
00519 {\cf21 #elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)}\par
00520 {\cf21 # define PLATFORM_ID "SCO_SV"}\par
00521 \par
00522 {\cf21 #elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)}\par
00523 {\cf21 # define PLATFORM_ID "ULTRIX"}\par
00524 \par
00525 {\cf21 #elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)}\par
00526 {\cf21 # define PLATFORM_ID "Xenix"}\par
00527 \par
00528 {\cf21 #elif defined(__WATCOMC__)}\par
00529 {\cf21 # if defined(__LINUX__)}\par
00530 {\cf21 #  define PLATFORM_ID "Linux"}\par
00531 \par
00532 {\cf21 # elif defined(__DOS__)}\par
00533 {\cf21 #  define PLATFORM_ID "DOS"}\par
00534 \par
00535 {\cf21 # elif defined(__OS2__)}\par
00536 {\cf21 #  define PLATFORM_ID "OS2"}\par
00537 \par
00538 {\cf21 # elif defined(__WINDOWS__)}\par
00539 {\cf21 #  define PLATFORM_ID "Windows3x"}\par
00540 \par
00541 {\cf21 # elif defined(__VXWORKS__)}\par
00542 {\cf21 #  define PLATFORM_ID "VxWorks"}\par
00543 \par
00544 {\cf21 # else }{\cf20 /* unknown platform */}{\cf21 }\par
00545 {\cf21 #  define PLATFORM_ID}\par
00546 {\cf21 # endif}\par
00547 \par
00548 {\cf21 #elif defined(__INTEGRITY)}\par
00549 {\cf21 # if defined(INT_178B)}\par
00550 {\cf21 #  define PLATFORM_ID "Integrity178"}\par
00551 \par
00552 {\cf21 # else }{\cf20 /* regular Integrity */}{\cf21 }\par
00553 {\cf21 #  define PLATFORM_ID "Integrity"}\par
00554 {\cf21 # endif}\par
00555 \par
00556 {\cf21 # elif defined(_ADI_COMPILER)}\par
00557 {\cf21 #  define PLATFORM_ID "ADSP"}\par
00558 \par
00559 {\cf21 #else }{\cf20 /* unknown platform */}{\cf21 }\par
00560 {\cf21 # define PLATFORM_ID}\par
00561 \par
00562 {\cf21 #endif}\par
00563 \par
00564 {\cf20 /* For windows compilers MSVC and Intel we can determine}\par
00565 {\cf20    the architecture of the compiler being used.  This is because}\par
00566 {\cf20    the compilers do not have flags that can change the architecture,}\par
00567 {\cf20    but rather depend on which compiler is being used}\par
00568 {\cf20 */}\par
00569 {\cf21 #if defined(_WIN32) && defined(_MSC_VER)}\par
00570 {\cf21 # if defined(_M_IA64)}\par
00571 {\cf21 #  define ARCHITECTURE_ID "IA64"}\par
00572 \par
00573 {\cf21 # elif defined(_M_ARM64EC)}\par
00574 {\cf21 #  define ARCHITECTURE_ID "ARM64EC"}\par
00575 \par
00576 {\cf21 # elif defined(_M_X64) || defined(_M_AMD64)}\par
00577 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00578 \par
00579 {\cf21 # elif defined(_M_IX86)}\par
00580 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00581 \par
00582 {\cf21 # elif defined(_M_ARM64)}\par
00583 {\cf21 #  define ARCHITECTURE_ID "ARM64"}\par
00584 \par
00585 {\cf21 # elif defined(_M_ARM)}\par
00586 {\cf21 #  if _M_ARM == 4}\par
00587 {\cf21 #   define ARCHITECTURE_ID "ARMV4I"}\par
00588 {\cf21 #  elif _M_ARM == 5}\par
00589 {\cf21 #   define ARCHITECTURE_ID "ARMV5I"}\par
00590 {\cf21 #  else}\par
00591 {\cf21 #   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)}\par
00592 {\cf21 #  endif}\par
00593 \par
00594 {\cf21 # elif defined(_M_MIPS)}\par
00595 {\cf21 #  define ARCHITECTURE_ID "MIPS"}\par
00596 \par
00597 {\cf21 # elif defined(_M_SH)}\par
00598 {\cf21 #  define ARCHITECTURE_ID "SHx"}\par
00599 \par
00600 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00601 {\cf21 #  define ARCHITECTURE_ID ""}\par
00602 {\cf21 # endif}\par
00603 \par
00604 {\cf21 #elif defined(__WATCOMC__)}\par
00605 {\cf21 # if defined(_M_I86)}\par
00606 {\cf21 #  define ARCHITECTURE_ID "I86"}\par
00607 \par
00608 {\cf21 # elif defined(_M_IX86)}\par
00609 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00610 \par
00611 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00612 {\cf21 #  define ARCHITECTURE_ID ""}\par
00613 {\cf21 # endif}\par
00614 \par
00615 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00616 {\cf21 # if defined(__ICCARM__)}\par
00617 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00618 \par
00619 {\cf21 # elif defined(__ICCRX__)}\par
00620 {\cf21 #  define ARCHITECTURE_ID "RX"}\par
00621 \par
00622 {\cf21 # elif defined(__ICCRH850__)}\par
00623 {\cf21 #  define ARCHITECTURE_ID "RH850"}\par
00624 \par
00625 {\cf21 # elif defined(__ICCRL78__)}\par
00626 {\cf21 #  define ARCHITECTURE_ID "RL78"}\par
00627 \par
00628 {\cf21 # elif defined(__ICCRISCV__)}\par
00629 {\cf21 #  define ARCHITECTURE_ID "RISCV"}\par
00630 \par
00631 {\cf21 # elif defined(__ICCAVR__)}\par
00632 {\cf21 #  define ARCHITECTURE_ID "AVR"}\par
00633 \par
00634 {\cf21 # elif defined(__ICC430__)}\par
00635 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00636 \par
00637 {\cf21 # elif defined(__ICCV850__)}\par
00638 {\cf21 #  define ARCHITECTURE_ID "V850"}\par
00639 \par
00640 {\cf21 # elif defined(__ICC8051__)}\par
00641 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00642 \par
00643 {\cf21 # elif defined(__ICCSTM8__)}\par
00644 {\cf21 #  define ARCHITECTURE_ID "STM8"}\par
00645 \par
00646 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00647 {\cf21 #  define ARCHITECTURE_ID ""}\par
00648 {\cf21 # endif}\par
00649 \par
00650 {\cf21 #elif defined(__ghs__)}\par
00651 {\cf21 # if defined(__PPC64__)}\par
00652 {\cf21 #  define ARCHITECTURE_ID "PPC64"}\par
00653 \par
00654 {\cf21 # elif defined(__ppc__)}\par
00655 {\cf21 #  define ARCHITECTURE_ID "PPC"}\par
00656 \par
00657 {\cf21 # elif defined(__ARM__)}\par
00658 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00659 \par
00660 {\cf21 # elif defined(__x86_64__)}\par
00661 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00662 \par
00663 {\cf21 # elif defined(__i386__)}\par
00664 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00665 \par
00666 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00667 {\cf21 #  define ARCHITECTURE_ID ""}\par
00668 {\cf21 # endif}\par
00669 \par
00670 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00671 {\cf21 # if defined(__TI_ARM__)}\par
00672 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00673 \par
00674 {\cf21 # elif defined(__MSP430__)}\par
00675 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00676 \par
00677 {\cf21 # elif defined(__TMS320C28XX__)}\par
00678 {\cf21 #  define ARCHITECTURE_ID "TMS320C28x"}\par
00679 \par
00680 {\cf21 # elif defined(__TMS320C6X__) || defined(_TMS320C6X)}\par
00681 {\cf21 #  define ARCHITECTURE_ID "TMS320C6x"}\par
00682 \par
00683 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00684 {\cf21 #  define ARCHITECTURE_ID ""}\par
00685 {\cf21 # endif}\par
00686 \par
00687 {\cf21 # elif defined(__ADSPSHARC__)}\par
00688 {\cf21 #  define ARCHITECTURE_ID "SHARC"}\par
00689 \par
00690 {\cf21 # elif defined(__ADSPBLACKFIN__)}\par
00691 {\cf21 #  define ARCHITECTURE_ID "Blackfin"}\par
00692 \par
00693 {\cf21 #elif defined(__TASKING__)}\par
00694 \par
00695 {\cf21 # if defined(__CTC__) || defined(__CPTC__)}\par
00696 {\cf21 #  define ARCHITECTURE_ID "TriCore"}\par
00697 \par
00698 {\cf21 # elif defined(__CMCS__)}\par
00699 {\cf21 #  define ARCHITECTURE_ID "MCS"}\par
00700 \par
00701 {\cf21 # elif defined(__CARM__)}\par
00702 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00703 \par
00704 {\cf21 # elif defined(__CARC__)}\par
00705 {\cf21 #  define ARCHITECTURE_ID "ARC"}\par
00706 \par
00707 {\cf21 # elif defined(__C51__)}\par
00708 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00709 \par
00710 {\cf21 # elif defined(__CPCP__)}\par
00711 {\cf21 #  define ARCHITECTURE_ID "PCP"}\par
00712 \par
00713 {\cf21 # else}\par
00714 {\cf21 #  define ARCHITECTURE_ID ""}\par
00715 {\cf21 # endif}\par
00716 \par
00717 {\cf21 #else}\par
00718 {\cf21 #  define ARCHITECTURE_ID}\par
00719 {\cf21 #endif}\par
00720 \par
00721 {\cf20 /* Convert integer to decimal digit literals.  */}\par
00722 {\cf21 #define DEC(n)                   \\}\par
00723 {\cf21   ('0' + (((n) / 10000000)%10)), \\}\par
00724 {\cf21   ('0' + (((n) / 1000000)%10)),  \\}\par
00725 {\cf21   ('0' + (((n) / 100000)%10)),   \\}\par
00726 {\cf21   ('0' + (((n) / 10000)%10)),    \\}\par
00727 {\cf21   ('0' + (((n) / 1000)%10)),     \\}\par
00728 {\cf21   ('0' + (((n) / 100)%10)),      \\}\par
00729 {\cf21   ('0' + (((n) / 10)%10)),       \\}\par
00730 {\cf21   ('0' +  ((n) % 10))}\par
00731 \par
00732 {\cf20 /* Convert integer to hex digit literals.  */}\par
00733 {\cf21 #define HEX(n)             \\}\par
00734 {\cf21   ('0' + ((n)>>28 & 0xF)), \\}\par
00735 {\cf21   ('0' + ((n)>>24 & 0xF)), \\}\par
00736 {\cf21   ('0' + ((n)>>20 & 0xF)), \\}\par
00737 {\cf21   ('0' + ((n)>>16 & 0xF)), \\}\par
00738 {\cf21   ('0' + ((n)>>12 & 0xF)), \\}\par
00739 {\cf21   ('0' + ((n)>>8  & 0xF)), \\}\par
00740 {\cf21   ('0' + ((n)>>4  & 0xF)), \\}\par
00741 {\cf21   ('0' + ((n)     & 0xF))}\par
00742 \par
00743 {\cf20 /* Construct a string literal encoding the version number. */}\par
00744 {\cf21 #ifdef COMPILER_VERSION}\par
00745 {\cf18 char} {\cf17 const}* info_version = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version["} COMPILER_VERSION {\cf22 "]"};\par
00746 \par
00747 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00748 {\cf21 #elif defined(COMPILER_VERSION_MAJOR)}\par
00749 {\cf18 char} {\cf17 const} info_version[] = \{\par
00750   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00751   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00752   COMPILER_VERSION_MAJOR,\par
00753 {\cf21 # ifdef COMPILER_VERSION_MINOR}\par
00754   {\cf23 '.'}, COMPILER_VERSION_MINOR,\par
00755 {\cf21 #  ifdef COMPILER_VERSION_PATCH}\par
00756    {\cf23 '.'}, COMPILER_VERSION_PATCH,\par
00757 {\cf21 #   ifdef COMPILER_VERSION_TWEAK}\par
00758     {\cf23 '.'}, COMPILER_VERSION_TWEAK,\par
00759 {\cf21 #   endif}\par
00760 {\cf21 #  endif}\par
00761 {\cf21 # endif}\par
00762   {\cf23 ']'},{\cf23 '\\0'}\};\par
00763 {\cf21 #endif}\par
00764 \par
00765 {\cf20 /* Construct a string literal encoding the internal version number. */}\par
00766 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00767 {\cf18 char} {\cf17 const} info_version_internal[] = \{\par
00768   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00769   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
00770   {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
00771   COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\};\par
00772 {\cf21 #elif defined(COMPILER_VERSION_INTERNAL_STR)}\par
00773 {\cf18 char} {\cf17 const}* info_version_internal = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version_internal["} COMPILER_VERSION_INTERNAL_STR {\cf22 "]"};\par
00774 {\cf21 #endif}\par
00775 \par
00776 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00777 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00778 {\cf18 char} {\cf17 const} info_simulate_version[] = \{\par
00779   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00780   {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00781   SIMULATE_VERSION_MAJOR,\par
00782 {\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
00783   {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
00784 {\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
00785    {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
00786 {\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
00787     {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
00788 {\cf21 #   endif}\par
00789 {\cf21 #  endif}\par
00790 {\cf21 # endif}\par
00791   {\cf23 ']'},{\cf23 '\\0'}\};\par
00792 {\cf21 #endif}\par
00793 \par
00794 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00795 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00796 {\cf20    because some compilers will just produce instructions to fill the}\par
00797 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00798 {\cf18 char} {\cf17 const}* info_platform = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "platform["} PLATFORM_ID {\cf22 "]"};\par
00799 {\cf18 char} {\cf17 const}* info_arch = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "arch["} ARCHITECTURE_ID {\cf22 "]"};\par
00800 \par
00801 \par
00802 \par
00803 {\cf21 #if !defined(__STDC__) && !defined(__clang__)}\par
00804 {\cf21 # if defined(_MSC_VER) || defined(__ibmxl__) || defined(__IBMC__)}\par
00805 {\cf21 #  define C_VERSION "90"}\par
00806 {\cf21 # else}\par
00807 {\cf21 #  define C_VERSION}\par
00808 {\cf21 # endif}\par
00809 {\cf21 #elif __STDC_VERSION__ > 201710L}\par
00810 {\cf21 # define C_VERSION "23"}\par
00811 {\cf21 #elif __STDC_VERSION__ >= 201710L}\par
00812 {\cf21 # define C_VERSION "17"}\par
00813 {\cf21 #elif __STDC_VERSION__ >= 201000L}\par
00814 {\cf21 # define C_VERSION "11"}\par
00815 {\cf21 #elif __STDC_VERSION__ >= 199901L}\par
00816 {\cf21 # define C_VERSION "99"}\par
00817 {\cf21 #else}\par
00818 {\cf21 # define C_VERSION "90"}\par
00819 {\cf21 #endif}\par
00820 {\cf17 const} {\cf18 char}* info_language_standard_default =\par
00821   {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["} C_VERSION {\cf22 "]"};\par
00822 \par
00823 {\cf17 const} {\cf18 char}* info_language_extensions_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
00824 {\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
00825 {\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
00826 {\cf21   !defined(__STRICT_ANSI__)}\par
00827   {\cf22 "ON"}\par
00828 {\cf21 #else}\par
00829   {\cf22 "OFF"}\par
00830 {\cf21 #endif}\par
00831 {\cf22 "]"};\par
00832 \par
00833 {\cf20 /*--------------------------------------------------------------------------*/}\par
00834 \par
00835 {\cf21 #ifdef ID_VOID_MAIN}\par
00836 {\cf18 void} main() \{\}\par
00837 {\cf21 #else}\par
00838 {\cf21 # if defined(__CLASSIC_C__)}\par
00839 {\cf18 int} main(argc, argv) {\cf18 int} argc; {\cf18 char} *argv[];\par
00840 {\cf21 # else}\par
00841 {\cf18 int} main({\cf18 int} argc, {\cf18 char}* argv[])\par
00842 {\cf21 # endif}\par
00843 \{\par
00844   {\cf18 int} require = 0;\par
00845   require += info_compiler[argc];\par
00846   require += info_platform[argc];\par
00847   require += info_arch[argc];\par
00848 {\cf21 #ifdef COMPILER_VERSION_MAJOR}\par
00849   require += info_version[argc];\par
00850 {\cf21 #endif}\par
00851 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00852   require += info_version_internal[argc];\par
00853 {\cf21 #endif}\par
00854 {\cf21 #ifdef SIMULATE_ID}\par
00855   require += info_simulate[argc];\par
00856 {\cf21 #endif}\par
00857 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00858   require += info_simulate_version[argc];\par
00859 {\cf21 #endif}\par
00860 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00861   require += info_cray[argc];\par
00862 {\cf21 #endif}\par
00863   require += info_language_standard_default[argc];\par
00864   require += info_language_extensions_default[argc];\par
00865   (void)argv;\par
00866   {\cf19 return} require;\par
00867 \}\par
00868 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c File Reference\par \pard\plain 
{\tc\tcl2 \v CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c}
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b main} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, argv)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_compiler} = "INFO" ":" "compiler[" COMPILER_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_simulate} = "INFO" ":" "simulate[" SIMULATE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b qnxnto} = "INFO" ":" "qnxnto[]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_cray} = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_version} = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_version_internal} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_simulate_version} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_platform} = "INFO" ":" "platform[" PLATFORM_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_arch} = "INFO" ":" "arch[" ARCHITECTURE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_standard_default}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_extensions_default}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void main ()}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 836} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v main\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, argv )}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 839} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v info_arch\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_arch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]"}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 799} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_compiler\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_compiler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]"}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 436} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_cray\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_cray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 446} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_language_extensions_default\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_language_extensions_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_extensions_default}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
{\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
{\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
{\cf21   !defined(__STRICT_ANSI__)}\par
  {\cf22 "ON"}\par
{\cf21 #else}\par
  {\cf22 "OFF"}\par
{\cf21 #endif}\par
{\cf22 "]"}\par
}
{
Definition at line {\b 823} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_language_standard_default\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_language_standard_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_standard_default}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =\par
  {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["} C_VERSION {\cf22 "]"}\par
}
{
Definition at line {\b 820} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_platform\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_platform}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]"}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 798} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_simulate\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_simulate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]"}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 438} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_simulate_version\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_simulate_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_simulate_version[]}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
  SIMULATE_VERSION_MAJOR,\par
{\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
  {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
{\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
   {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
{\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
    {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
{\cf21 #   endif}\par
{\cf21 #  endif}\par
{\cf21 # endif}\par
  {\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 778} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_version\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_version[] = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 745} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v info_version_internal\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_version_internal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_version_internal}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
  {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
  COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 767} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
{\xe \v qnxnto\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:qnxnto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* qnxnto = "INFO" ":" "qnxnto[]"}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 442} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdC/CMakeCCompilerId.c\par \pard\plain 
{\tc\tcl2 \v CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifdef __cplusplus}\par
00002 {\cf21 # error "A C++ compiler has been selected for C."}\par
00003 {\cf21 #endif}\par
00004 \par
00005 {\cf21 #if defined(__18CXX)}\par
00006 {\cf21 # define ID_VOID_MAIN}\par
00007 {\cf21 #endif}\par
00008 {\cf21 #if defined(__CLASSIC_C__)}\par
00009 {\cf20 /* cv-qualifiers did not exist in K&R C */}\par
00010 {\cf21 # define const}\par
00011 {\cf21 # define volatile}\par
00012 {\cf21 #endif}\par
00013 \par
00014 {\cf21 #if !defined(__has_include)}\par
00015 {\cf20 /* If the compiler does not have __has_include, pretend the answer is}\par
00016 {\cf20    always no.  */}\par
00017 {\cf21 #  define __has_include(x) 0}\par
00018 {\cf21 #endif}\par
00019 \par
00020 \par
00021 {\cf20 /* Version number components: V=Version, R=Revision, P=Patch}\par
00022 {\cf20    Version date components:   YYYY=Year, MM=Month,   DD=Day  */}\par
00023 \par
00024 {\cf21 #if defined(__INTEL_COMPILER) || defined(__ICC)}\par
00025 {\cf21 # define COMPILER_ID "Intel"}\par
00026 {\cf21 # if defined(_MSC_VER)}\par
00027 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00028 {\cf21 # endif}\par
00029 {\cf21 # if defined(__GNUC__)}\par
00030 {\cf21 #  define SIMULATE_ID "GNU"}\par
00031 {\cf21 # endif}\par
00032   {\cf20 /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,}\par
00033 {\cf20      except that a few beta releases use the old format with V=2021.  */}\par
00034 {\cf21 # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111}\par
00035 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)}\par
00036 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)}\par
00037 {\cf21 #  if defined(__INTEL_COMPILER_UPDATE)}\par
00038 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)}\par
00039 {\cf21 #  else}\par
00040 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)}\par
00041 {\cf21 #  endif}\par
00042 {\cf21 # else}\par
00043 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)}\par
00044 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)}\par
00045    {\cf20 /* The third version component from --version is an update index,}\par
00046 {\cf20       but no macro is provided for it.  */}\par
00047 {\cf21 #  define COMPILER_VERSION_PATCH DEC(0)}\par
00048 {\cf21 # endif}\par
00049 {\cf21 # if defined(__INTEL_COMPILER_BUILD_DATE)}\par
00050    {\cf20 /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */}\par
00051 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)}\par
00052 {\cf21 # endif}\par
00053 {\cf21 # if defined(_MSC_VER)}\par
00054    {\cf20 /* _MSC_VER = VVRR */}\par
00055 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00056 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00057 {\cf21 # endif}\par
00058 {\cf21 # if defined(__GNUC__)}\par
00059 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00060 {\cf21 # elif defined(__GNUG__)}\par
00061 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00062 {\cf21 # endif}\par
00063 {\cf21 # if defined(__GNUC_MINOR__)}\par
00064 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00065 {\cf21 # endif}\par
00066 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00067 {\cf21 #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00068 {\cf21 # endif}\par
00069 \par
00070 {\cf21 #elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)}\par
00071 {\cf21 # define COMPILER_ID "IntelLLVM"}\par
00072 {\cf21 #if defined(_MSC_VER)}\par
00073 {\cf21 # define SIMULATE_ID "MSVC"}\par
00074 {\cf21 #endif}\par
00075 {\cf21 #if defined(__GNUC__)}\par
00076 {\cf21 # define SIMULATE_ID "GNU"}\par
00077 {\cf21 #endif}\par
00078 {\cf20 /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and}\par
00079 {\cf20  * later.  Look for 6 digit vs. 8 digit version number to decide encoding.}\par
00080 {\cf20  * VVVV is no smaller than the current year when a version is released.}\par
00081 {\cf20  */}\par
00082 {\cf21 #if __INTEL_LLVM_COMPILER < 1000000L}\par
00083 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)}\par
00084 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)}\par
00085 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)}\par
00086 {\cf21 #else}\par
00087 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)}\par
00088 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)}\par
00089 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)}\par
00090 {\cf21 #endif}\par
00091 {\cf21 #if defined(_MSC_VER)}\par
00092   {\cf20 /* _MSC_VER = VVRR */}\par
00093 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00094 {\cf21 # define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00095 {\cf21 #endif}\par
00096 {\cf21 #if defined(__GNUC__)}\par
00097 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00098 {\cf21 #elif defined(__GNUG__)}\par
00099 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00100 {\cf21 #endif}\par
00101 {\cf21 #if defined(__GNUC_MINOR__)}\par
00102 {\cf21 # define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00103 {\cf21 #endif}\par
00104 {\cf21 #if defined(__GNUC_PATCHLEVEL__)}\par
00105 {\cf21 # define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00106 {\cf21 #endif}\par
00107 \par
00108 {\cf21 #elif defined(__PATHCC__)}\par
00109 {\cf21 # define COMPILER_ID "PathScale"}\par
00110 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PATHCC__)}\par
00111 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)}\par
00112 {\cf21 # if defined(__PATHCC_PATCHLEVEL__)}\par
00113 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)}\par
00114 {\cf21 # endif}\par
00115 \par
00116 {\cf21 #elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)}\par
00117 {\cf21 # define COMPILER_ID "Embarcadero"}\par
00118 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)}\par
00119 {\cf21 # define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)}\par
00120 {\cf21 # define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)}\par
00121 \par
00122 {\cf21 #elif defined(__BORLANDC__)}\par
00123 {\cf21 # define COMPILER_ID "Borland"}\par
00124   {\cf20 /* __BORLANDC__ = 0xVRR */}\par
00125 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)}\par
00126 {\cf21 # define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)}\par
00127 \par
00128 {\cf21 #elif defined(__WATCOMC__) && __WATCOMC__ < 1200}\par
00129 {\cf21 # define COMPILER_ID "Watcom"}\par
00130    {\cf20 /* __WATCOMC__ = VVRR */}\par
00131 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)}\par
00132 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00133 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00134 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00135 {\cf21 # endif}\par
00136 \par
00137 {\cf21 #elif defined(__WATCOMC__)}\par
00138 {\cf21 # define COMPILER_ID "OpenWatcom"}\par
00139    {\cf20 /* __WATCOMC__ = VVRP + 1100 */}\par
00140 {\cf21 # define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)}\par
00141 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00142 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00143 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00144 {\cf21 # endif}\par
00145 \par
00146 {\cf21 #elif defined(__SUNPRO_C)}\par
00147 {\cf21 # define COMPILER_ID "SunPro"}\par
00148 {\cf21 # if __SUNPRO_C >= 0x5100}\par
00149    {\cf20 /* __SUNPRO_C = 0xVRRP */}\par
00150 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>12)}\par
00151 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xFF)}\par
00152 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)}\par
00153 {\cf21 # else}\par
00154    {\cf20 /* __SUNPRO_CC = 0xVRP */}\par
00155 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>8)}\par
00156 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xF)}\par
00157 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)}\par
00158 {\cf21 # endif}\par
00159 \par
00160 {\cf21 #elif defined(__HP_cc)}\par
00161 {\cf21 # define COMPILER_ID "HP"}\par
00162   {\cf20 /* __HP_cc = VVRRPP */}\par
00163 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__HP_cc/10000)}\par
00164 {\cf21 # define COMPILER_VERSION_MINOR DEC(__HP_cc/100 % 100)}\par
00165 {\cf21 # define COMPILER_VERSION_PATCH DEC(__HP_cc     % 100)}\par
00166 \par
00167 {\cf21 #elif defined(__DECC)}\par
00168 {\cf21 # define COMPILER_ID "Compaq"}\par
00169   {\cf20 /* __DECC_VER = VVRRTPPPP */}\par
00170 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__DECC_VER/10000000)}\par
00171 {\cf21 # define COMPILER_VERSION_MINOR DEC(__DECC_VER/100000  % 100)}\par
00172 {\cf21 # define COMPILER_VERSION_PATCH DEC(__DECC_VER         % 10000)}\par
00173 \par
00174 {\cf21 #elif defined(__IBMC__) && defined(__COMPILER_VER__)}\par
00175 {\cf21 # define COMPILER_ID "zOS"}\par
00176   {\cf20 /* __IBMC__ = VRP */}\par
00177 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00178 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00179 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00180 \par
00181 {\cf21 #elif defined(__open_xl__) && defined(__clang__)}\par
00182 {\cf21 # define COMPILER_ID "IBMClang"}\par
00183 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)}\par
00184 {\cf21 # define COMPILER_VERSION_MINOR DEC(__open_xl_release__)}\par
00185 {\cf21 # define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)}\par
00186 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)}\par
00187 \par
00188 \par
00189 {\cf21 #elif defined(__ibmxl__) && defined(__clang__)}\par
00190 {\cf21 # define COMPILER_ID "XLClang"}\par
00191 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)}\par
00192 {\cf21 # define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)}\par
00193 {\cf21 # define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)}\par
00194 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)}\par
00195 \par
00196 \par
00197 {\cf21 #elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ >= 800}\par
00198 {\cf21 # define COMPILER_ID "XL"}\par
00199   {\cf20 /* __IBMC__ = VRP */}\par
00200 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00201 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00202 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00203 \par
00204 {\cf21 #elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ < 800}\par
00205 {\cf21 # define COMPILER_ID "VisualAge"}\par
00206   {\cf20 /* __IBMC__ = VRP */}\par
00207 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00208 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00209 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00210 \par
00211 {\cf21 #elif defined(__NVCOMPILER)}\par
00212 {\cf21 # define COMPILER_ID "NVHPC"}\par
00213 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)}\par
00214 {\cf21 # define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)}\par
00215 {\cf21 # if defined(__NVCOMPILER_PATCHLEVEL__)}\par
00216 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)}\par
00217 {\cf21 # endif}\par
00218 \par
00219 {\cf21 #elif defined(__PGI)}\par
00220 {\cf21 # define COMPILER_ID "PGI"}\par
00221 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PGIC__)}\par
00222 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)}\par
00223 {\cf21 # if defined(__PGIC_PATCHLEVEL__)}\par
00224 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)}\par
00225 {\cf21 # endif}\par
00226 \par
00227 {\cf21 #elif defined(_CRAYC)}\par
00228 {\cf21 # define COMPILER_ID "Cray"}\par
00229 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)}\par
00230 {\cf21 # define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)}\par
00231 \par
00232 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00233 {\cf21 # define COMPILER_ID "TI"}\par
00234   {\cf20 /* __TI_COMPILER_VERSION__ = VVVRRRPPP */}\par
00235 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)}\par
00236 {\cf21 # define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)}\par
00237 {\cf21 # define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)}\par
00238 \par
00239 {\cf21 #elif defined(__CLANG_FUJITSU)}\par
00240 {\cf21 # define COMPILER_ID "FujitsuClang"}\par
00241 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00242 {\cf21 # define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00243 {\cf21 # define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00244 {\cf21 # define COMPILER_VERSION_INTERNAL_STR __clang_version__}\par
00245 \par
00246 \par
00247 {\cf21 #elif defined(__FUJITSU)}\par
00248 {\cf21 # define COMPILER_ID "Fujitsu"}\par
00249 {\cf21 # if defined(__FCC_version__)}\par
00250 {\cf21 #   define COMPILER_VERSION __FCC_version__}\par
00251 {\cf21 # elif defined(__FCC_major__)}\par
00252 {\cf21 #   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00253 {\cf21 #   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00254 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00255 {\cf21 # endif}\par
00256 {\cf21 # if defined(__fcc_version)}\par
00257 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)}\par
00258 {\cf21 # elif defined(__FCC_VERSION)}\par
00259 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)}\par
00260 {\cf21 # endif}\par
00261 \par
00262 \par
00263 {\cf21 #elif defined(__ghs__)}\par
00264 {\cf21 # define COMPILER_ID "GHS"}\par
00265 {\cf20 /* __GHS_VERSION_NUMBER = VVVVRP */}\par
00266 {\cf21 # ifdef __GHS_VERSION_NUMBER}\par
00267 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)}\par
00268 {\cf21 # define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)}\par
00269 {\cf21 # define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)}\par
00270 {\cf21 # endif}\par
00271 \par
00272 {\cf21 #elif defined(__TASKING__)}\par
00273 {\cf21 # define COMPILER_ID "Tasking"}\par
00274 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)}\par
00275 {\cf21   # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)}\par
00276 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__VERSION__)}\par
00277 \par
00278 {\cf21 #elif defined(__TINYC__)}\par
00279 {\cf21 # define COMPILER_ID "TinyCC"}\par
00280 \par
00281 {\cf21 #elif defined(__BCC__)}\par
00282 {\cf21 # define COMPILER_ID "Bruce"}\par
00283 \par
00284 {\cf21 #elif defined(__SCO_VERSION__)}\par
00285 {\cf21 # define COMPILER_ID "SCO"}\par
00286 \par
00287 {\cf21 #elif defined(__ARMCC_VERSION) && !defined(__clang__)}\par
00288 {\cf21 # define COMPILER_ID "ARMCC"}\par
00289 {\cf21 #if __ARMCC_VERSION >= 1000000}\par
00290   {\cf20 /* __ARMCC_VERSION = VRRPPPP */}\par
00291 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)}\par
00292 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)}\par
00293 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)}\par
00294 {\cf21 #else}\par
00295   {\cf20 /* __ARMCC_VERSION = VRPPPP */}\par
00296 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)}\par
00297 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)}\par
00298 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)}\par
00299 {\cf21 #endif}\par
00300 \par
00301 \par
00302 {\cf21 #elif defined(__clang__) && defined(__apple_build_version__)}\par
00303 {\cf21 # define COMPILER_ID "AppleClang"}\par
00304 {\cf21 # if defined(_MSC_VER)}\par
00305 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00306 {\cf21 # endif}\par
00307 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00308 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00309 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00310 {\cf21 # if defined(_MSC_VER)}\par
00311    {\cf20 /* _MSC_VER = VVRR */}\par
00312 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00313 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00314 {\cf21 # endif}\par
00315 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)}\par
00316 \par
00317 {\cf21 #elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)}\par
00318 {\cf21 # define COMPILER_ID "ARMClang"}\par
00319 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)}\par
00320 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)}\par
00321 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION     % 10000)}\par
00322 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)}\par
00323 \par
00324 {\cf21 #elif defined(__clang__)}\par
00325 {\cf21 # define COMPILER_ID "Clang"}\par
00326 {\cf21 # if defined(_MSC_VER)}\par
00327 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00328 {\cf21 # endif}\par
00329 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00330 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00331 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00332 {\cf21 # if defined(_MSC_VER)}\par
00333    {\cf20 /* _MSC_VER = VVRR */}\par
00334 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00335 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00336 {\cf21 # endif}\par
00337 \par
00338 {\cf21 #elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))}\par
00339 {\cf21 # define COMPILER_ID "LCC"}\par
00340 {\cf21 # define COMPILER_VERSION_MAJOR DEC(1)}\par
00341 {\cf21 # if defined(__LCC__)}\par
00342 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__LCC__- 100)}\par
00343 {\cf21 # endif}\par
00344 {\cf21 # if defined(__LCC_MINOR__)}\par
00345 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)}\par
00346 {\cf21 # endif}\par
00347 {\cf21 # if defined(__GNUC__) && defined(__GNUC_MINOR__)}\par
00348 {\cf21 #  define SIMULATE_ID "GNU"}\par
00349 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00350 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00351 {\cf21 #  if defined(__GNUC_PATCHLEVEL__)}\par
00352 {\cf21 #   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00353 {\cf21 #  endif}\par
00354 {\cf21 # endif}\par
00355 \par
00356 {\cf21 #elif defined(__GNUC__)}\par
00357 {\cf21 # define COMPILER_ID "GNU"}\par
00358 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GNUC__)}\par
00359 {\cf21 # if defined(__GNUC_MINOR__)}\par
00360 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00361 {\cf21 # endif}\par
00362 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00363 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00364 {\cf21 # endif}\par
00365 \par
00366 {\cf21 #elif defined(_MSC_VER)}\par
00367 {\cf21 # define COMPILER_ID "MSVC"}\par
00368   {\cf20 /* _MSC_VER = VVRR */}\par
00369 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00370 {\cf21 # define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00371 {\cf21 # if defined(_MSC_FULL_VER)}\par
00372 {\cf21 #  if _MSC_VER >= 1400}\par
00373     {\cf20 /* _MSC_FULL_VER = VVRRPPPPP */}\par
00374 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)}\par
00375 {\cf21 #  else}\par
00376     {\cf20 /* _MSC_FULL_VER = VVRRPPPP */}\par
00377 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)}\par
00378 {\cf21 #  endif}\par
00379 {\cf21 # endif}\par
00380 {\cf21 # if defined(_MSC_BUILD)}\par
00381 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)}\par
00382 {\cf21 # endif}\par
00383 \par
00384 {\cf21 #elif defined(_ADI_COMPILER)}\par
00385 {\cf21 # define COMPILER_ID "ADSP"}\par
00386 {\cf21 #if defined(__VERSIONNUM__)}\par
00387   {\cf20 /* __VERSIONNUM__ = 0xVVRRPPTT */}\par
00388 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)}\par
00389 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)}\par
00390 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)}\par
00391 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)}\par
00392 {\cf21 #endif}\par
00393 \par
00394 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00395 {\cf21 # define COMPILER_ID "IAR"}\par
00396 {\cf21 # if defined(__VER__) && defined(__ICCARM__)}\par
00397 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)}\par
00398 {\cf21 #  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)}\par
00399 {\cf21 #  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)}\par
00400 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00401 {\cf21 # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))}\par
00402 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)}\par
00403 {\cf21 #  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))}\par
00404 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)}\par
00405 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00406 {\cf21 # endif}\par
00407 \par
00408 {\cf21 #elif defined(__SDCC_VERSION_MAJOR) || defined(SDCC)}\par
00409 {\cf21 # define COMPILER_ID "SDCC"}\par
00410 {\cf21 # if defined(__SDCC_VERSION_MAJOR)}\par
00411 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__SDCC_VERSION_MAJOR)}\par
00412 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__SDCC_VERSION_MINOR)}\par
00413 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SDCC_VERSION_PATCH)}\par
00414 {\cf21 # else}\par
00415   {\cf20 /* SDCC = VRP */}\par
00416 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(SDCC/100)}\par
00417 {\cf21 #  define COMPILER_VERSION_MINOR DEC(SDCC/10 % 10)}\par
00418 {\cf21 #  define COMPILER_VERSION_PATCH DEC(SDCC    % 10)}\par
00419 {\cf21 # endif}\par
00420 \par
00421 \par
00422 {\cf20 /* These compilers are either not known or too old to define an}\par
00423 {\cf20   identification macro.  Try to identify the platform and guess that}\par
00424 {\cf20   it is the native compiler.  */}\par
00425 {\cf21 #elif defined(__hpux) || defined(__hpua)}\par
00426 {\cf21 # define COMPILER_ID "HP"}\par
00427 \par
00428 {\cf21 #else }{\cf20 /* unknown compiler */}{\cf21 }\par
00429 {\cf21 # define COMPILER_ID ""}\par
00430 {\cf21 #endif}\par
00431 \par
00432 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00433 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00434 {\cf20    because some compilers will just produce instructions to fill the}\par
00435 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00436 {\cf18 char} {\cf17 const}* info_compiler = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler["} COMPILER_ID {\cf22 "]"};\par
00437 {\cf21 #ifdef SIMULATE_ID}\par
00438 {\cf18 char} {\cf17 const}* info_simulate = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "simulate["} SIMULATE_ID {\cf22 "]"};\par
00439 {\cf21 #endif}\par
00440 \par
00441 {\cf21 #ifdef __QNXNTO__}\par
00442 {\cf18 char} {\cf17 const}* qnxnto = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "qnxnto[]"};\par
00443 {\cf21 #endif}\par
00444 \par
00445 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00446 {\cf18 char} {\cf17 const} *info_cray = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_wrapper[CrayPrgEnv]"};\par
00447 {\cf21 #endif}\par
00448 \par
00449 {\cf21 #define STRINGIFY_HELPER(X) #X}\par
00450 {\cf21 #define STRINGIFY(X) STRINGIFY_HELPER(X)}\par
00451 \par
00452 {\cf20 /* Identify known platforms by name.  */}\par
00453 {\cf21 #if defined(__linux) || defined(__linux__) || defined(linux)}\par
00454 {\cf21 # define PLATFORM_ID "Linux"}\par
00455 \par
00456 {\cf21 #elif defined(__MSYS__)}\par
00457 {\cf21 # define PLATFORM_ID "MSYS"}\par
00458 \par
00459 {\cf21 #elif defined(__CYGWIN__)}\par
00460 {\cf21 # define PLATFORM_ID "Cygwin"}\par
00461 \par
00462 {\cf21 #elif defined(__MINGW32__)}\par
00463 {\cf21 # define PLATFORM_ID "MinGW"}\par
00464 \par
00465 {\cf21 #elif defined(__APPLE__)}\par
00466 {\cf21 # define PLATFORM_ID "Darwin"}\par
00467 \par
00468 {\cf21 #elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)}\par
00469 {\cf21 # define PLATFORM_ID "Windows"}\par
00470 \par
00471 {\cf21 #elif defined(__FreeBSD__) || defined(__FreeBSD)}\par
00472 {\cf21 # define PLATFORM_ID "FreeBSD"}\par
00473 \par
00474 {\cf21 #elif defined(__NetBSD__) || defined(__NetBSD)}\par
00475 {\cf21 # define PLATFORM_ID "NetBSD"}\par
00476 \par
00477 {\cf21 #elif defined(__OpenBSD__) || defined(__OPENBSD)}\par
00478 {\cf21 # define PLATFORM_ID "OpenBSD"}\par
00479 \par
00480 {\cf21 #elif defined(__sun) || defined(sun)}\par
00481 {\cf21 # define PLATFORM_ID "SunOS"}\par
00482 \par
00483 {\cf21 #elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)}\par
00484 {\cf21 # define PLATFORM_ID "AIX"}\par
00485 \par
00486 {\cf21 #elif defined(__hpux) || defined(__hpux__)}\par
00487 {\cf21 # define PLATFORM_ID "HP-UX"}\par
00488 \par
00489 {\cf21 #elif defined(__HAIKU__)}\par
00490 {\cf21 # define PLATFORM_ID "Haiku"}\par
00491 \par
00492 {\cf21 #elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)}\par
00493 {\cf21 # define PLATFORM_ID "BeOS"}\par
00494 \par
00495 {\cf21 #elif defined(__QNX__) || defined(__QNXNTO__)}\par
00496 {\cf21 # define PLATFORM_ID "QNX"}\par
00497 \par
00498 {\cf21 #elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)}\par
00499 {\cf21 # define PLATFORM_ID "Tru64"}\par
00500 \par
00501 {\cf21 #elif defined(__riscos) || defined(__riscos__)}\par
00502 {\cf21 # define PLATFORM_ID "RISCos"}\par
00503 \par
00504 {\cf21 #elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)}\par
00505 {\cf21 # define PLATFORM_ID "SINIX"}\par
00506 \par
00507 {\cf21 #elif defined(__UNIX_SV__)}\par
00508 {\cf21 # define PLATFORM_ID "UNIX_SV"}\par
00509 \par
00510 {\cf21 #elif defined(__bsdos__)}\par
00511 {\cf21 # define PLATFORM_ID "BSDOS"}\par
00512 \par
00513 {\cf21 #elif defined(_MPRAS) || defined(MPRAS)}\par
00514 {\cf21 # define PLATFORM_ID "MP-RAS"}\par
00515 \par
00516 {\cf21 #elif defined(__osf) || defined(__osf__)}\par
00517 {\cf21 # define PLATFORM_ID "OSF1"}\par
00518 \par
00519 {\cf21 #elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)}\par
00520 {\cf21 # define PLATFORM_ID "SCO_SV"}\par
00521 \par
00522 {\cf21 #elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)}\par
00523 {\cf21 # define PLATFORM_ID "ULTRIX"}\par
00524 \par
00525 {\cf21 #elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)}\par
00526 {\cf21 # define PLATFORM_ID "Xenix"}\par
00527 \par
00528 {\cf21 #elif defined(__WATCOMC__)}\par
00529 {\cf21 # if defined(__LINUX__)}\par
00530 {\cf21 #  define PLATFORM_ID "Linux"}\par
00531 \par
00532 {\cf21 # elif defined(__DOS__)}\par
00533 {\cf21 #  define PLATFORM_ID "DOS"}\par
00534 \par
00535 {\cf21 # elif defined(__OS2__)}\par
00536 {\cf21 #  define PLATFORM_ID "OS2"}\par
00537 \par
00538 {\cf21 # elif defined(__WINDOWS__)}\par
00539 {\cf21 #  define PLATFORM_ID "Windows3x"}\par
00540 \par
00541 {\cf21 # elif defined(__VXWORKS__)}\par
00542 {\cf21 #  define PLATFORM_ID "VxWorks"}\par
00543 \par
00544 {\cf21 # else }{\cf20 /* unknown platform */}{\cf21 }\par
00545 {\cf21 #  define PLATFORM_ID}\par
00546 {\cf21 # endif}\par
00547 \par
00548 {\cf21 #elif defined(__INTEGRITY)}\par
00549 {\cf21 # if defined(INT_178B)}\par
00550 {\cf21 #  define PLATFORM_ID "Integrity178"}\par
00551 \par
00552 {\cf21 # else }{\cf20 /* regular Integrity */}{\cf21 }\par
00553 {\cf21 #  define PLATFORM_ID "Integrity"}\par
00554 {\cf21 # endif}\par
00555 \par
00556 {\cf21 # elif defined(_ADI_COMPILER)}\par
00557 {\cf21 #  define PLATFORM_ID "ADSP"}\par
00558 \par
00559 {\cf21 #else }{\cf20 /* unknown platform */}{\cf21 }\par
00560 {\cf21 # define PLATFORM_ID}\par
00561 \par
00562 {\cf21 #endif}\par
00563 \par
00564 {\cf20 /* For windows compilers MSVC and Intel we can determine}\par
00565 {\cf20    the architecture of the compiler being used.  This is because}\par
00566 {\cf20    the compilers do not have flags that can change the architecture,}\par
00567 {\cf20    but rather depend on which compiler is being used}\par
00568 {\cf20 */}\par
00569 {\cf21 #if defined(_WIN32) && defined(_MSC_VER)}\par
00570 {\cf21 # if defined(_M_IA64)}\par
00571 {\cf21 #  define ARCHITECTURE_ID "IA64"}\par
00572 \par
00573 {\cf21 # elif defined(_M_ARM64EC)}\par
00574 {\cf21 #  define ARCHITECTURE_ID "ARM64EC"}\par
00575 \par
00576 {\cf21 # elif defined(_M_X64) || defined(_M_AMD64)}\par
00577 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00578 \par
00579 {\cf21 # elif defined(_M_IX86)}\par
00580 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00581 \par
00582 {\cf21 # elif defined(_M_ARM64)}\par
00583 {\cf21 #  define ARCHITECTURE_ID "ARM64"}\par
00584 \par
00585 {\cf21 # elif defined(_M_ARM)}\par
00586 {\cf21 #  if _M_ARM == 4}\par
00587 {\cf21 #   define ARCHITECTURE_ID "ARMV4I"}\par
00588 {\cf21 #  elif _M_ARM == 5}\par
00589 {\cf21 #   define ARCHITECTURE_ID "ARMV5I"}\par
00590 {\cf21 #  else}\par
00591 {\cf21 #   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)}\par
00592 {\cf21 #  endif}\par
00593 \par
00594 {\cf21 # elif defined(_M_MIPS)}\par
00595 {\cf21 #  define ARCHITECTURE_ID "MIPS"}\par
00596 \par
00597 {\cf21 # elif defined(_M_SH)}\par
00598 {\cf21 #  define ARCHITECTURE_ID "SHx"}\par
00599 \par
00600 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00601 {\cf21 #  define ARCHITECTURE_ID ""}\par
00602 {\cf21 # endif}\par
00603 \par
00604 {\cf21 #elif defined(__WATCOMC__)}\par
00605 {\cf21 # if defined(_M_I86)}\par
00606 {\cf21 #  define ARCHITECTURE_ID "I86"}\par
00607 \par
00608 {\cf21 # elif defined(_M_IX86)}\par
00609 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00610 \par
00611 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00612 {\cf21 #  define ARCHITECTURE_ID ""}\par
00613 {\cf21 # endif}\par
00614 \par
00615 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00616 {\cf21 # if defined(__ICCARM__)}\par
00617 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00618 \par
00619 {\cf21 # elif defined(__ICCRX__)}\par
00620 {\cf21 #  define ARCHITECTURE_ID "RX"}\par
00621 \par
00622 {\cf21 # elif defined(__ICCRH850__)}\par
00623 {\cf21 #  define ARCHITECTURE_ID "RH850"}\par
00624 \par
00625 {\cf21 # elif defined(__ICCRL78__)}\par
00626 {\cf21 #  define ARCHITECTURE_ID "RL78"}\par
00627 \par
00628 {\cf21 # elif defined(__ICCRISCV__)}\par
00629 {\cf21 #  define ARCHITECTURE_ID "RISCV"}\par
00630 \par
00631 {\cf21 # elif defined(__ICCAVR__)}\par
00632 {\cf21 #  define ARCHITECTURE_ID "AVR"}\par
00633 \par
00634 {\cf21 # elif defined(__ICC430__)}\par
00635 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00636 \par
00637 {\cf21 # elif defined(__ICCV850__)}\par
00638 {\cf21 #  define ARCHITECTURE_ID "V850"}\par
00639 \par
00640 {\cf21 # elif defined(__ICC8051__)}\par
00641 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00642 \par
00643 {\cf21 # elif defined(__ICCSTM8__)}\par
00644 {\cf21 #  define ARCHITECTURE_ID "STM8"}\par
00645 \par
00646 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00647 {\cf21 #  define ARCHITECTURE_ID ""}\par
00648 {\cf21 # endif}\par
00649 \par
00650 {\cf21 #elif defined(__ghs__)}\par
00651 {\cf21 # if defined(__PPC64__)}\par
00652 {\cf21 #  define ARCHITECTURE_ID "PPC64"}\par
00653 \par
00654 {\cf21 # elif defined(__ppc__)}\par
00655 {\cf21 #  define ARCHITECTURE_ID "PPC"}\par
00656 \par
00657 {\cf21 # elif defined(__ARM__)}\par
00658 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00659 \par
00660 {\cf21 # elif defined(__x86_64__)}\par
00661 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00662 \par
00663 {\cf21 # elif defined(__i386__)}\par
00664 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00665 \par
00666 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00667 {\cf21 #  define ARCHITECTURE_ID ""}\par
00668 {\cf21 # endif}\par
00669 \par
00670 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00671 {\cf21 # if defined(__TI_ARM__)}\par
00672 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00673 \par
00674 {\cf21 # elif defined(__MSP430__)}\par
00675 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00676 \par
00677 {\cf21 # elif defined(__TMS320C28XX__)}\par
00678 {\cf21 #  define ARCHITECTURE_ID "TMS320C28x"}\par
00679 \par
00680 {\cf21 # elif defined(__TMS320C6X__) || defined(_TMS320C6X)}\par
00681 {\cf21 #  define ARCHITECTURE_ID "TMS320C6x"}\par
00682 \par
00683 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00684 {\cf21 #  define ARCHITECTURE_ID ""}\par
00685 {\cf21 # endif}\par
00686 \par
00687 {\cf21 # elif defined(__ADSPSHARC__)}\par
00688 {\cf21 #  define ARCHITECTURE_ID "SHARC"}\par
00689 \par
00690 {\cf21 # elif defined(__ADSPBLACKFIN__)}\par
00691 {\cf21 #  define ARCHITECTURE_ID "Blackfin"}\par
00692 \par
00693 {\cf21 #elif defined(__TASKING__)}\par
00694 \par
00695 {\cf21 # if defined(__CTC__) || defined(__CPTC__)}\par
00696 {\cf21 #  define ARCHITECTURE_ID "TriCore"}\par
00697 \par
00698 {\cf21 # elif defined(__CMCS__)}\par
00699 {\cf21 #  define ARCHITECTURE_ID "MCS"}\par
00700 \par
00701 {\cf21 # elif defined(__CARM__)}\par
00702 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00703 \par
00704 {\cf21 # elif defined(__CARC__)}\par
00705 {\cf21 #  define ARCHITECTURE_ID "ARC"}\par
00706 \par
00707 {\cf21 # elif defined(__C51__)}\par
00708 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00709 \par
00710 {\cf21 # elif defined(__CPCP__)}\par
00711 {\cf21 #  define ARCHITECTURE_ID "PCP"}\par
00712 \par
00713 {\cf21 # else}\par
00714 {\cf21 #  define ARCHITECTURE_ID ""}\par
00715 {\cf21 # endif}\par
00716 \par
00717 {\cf21 #else}\par
00718 {\cf21 #  define ARCHITECTURE_ID}\par
00719 {\cf21 #endif}\par
00720 \par
00721 {\cf20 /* Convert integer to decimal digit literals.  */}\par
00722 {\cf21 #define DEC(n)                   \\}\par
00723 {\cf21   ('0' + (((n) / 10000000)%10)), \\}\par
00724 {\cf21   ('0' + (((n) / 1000000)%10)),  \\}\par
00725 {\cf21   ('0' + (((n) / 100000)%10)),   \\}\par
00726 {\cf21   ('0' + (((n) / 10000)%10)),    \\}\par
00727 {\cf21   ('0' + (((n) / 1000)%10)),     \\}\par
00728 {\cf21   ('0' + (((n) / 100)%10)),      \\}\par
00729 {\cf21   ('0' + (((n) / 10)%10)),       \\}\par
00730 {\cf21   ('0' +  ((n) % 10))}\par
00731 \par
00732 {\cf20 /* Convert integer to hex digit literals.  */}\par
00733 {\cf21 #define HEX(n)             \\}\par
00734 {\cf21   ('0' + ((n)>>28 & 0xF)), \\}\par
00735 {\cf21   ('0' + ((n)>>24 & 0xF)), \\}\par
00736 {\cf21   ('0' + ((n)>>20 & 0xF)), \\}\par
00737 {\cf21   ('0' + ((n)>>16 & 0xF)), \\}\par
00738 {\cf21   ('0' + ((n)>>12 & 0xF)), \\}\par
00739 {\cf21   ('0' + ((n)>>8  & 0xF)), \\}\par
00740 {\cf21   ('0' + ((n)>>4  & 0xF)), \\}\par
00741 {\cf21   ('0' + ((n)     & 0xF))}\par
00742 \par
00743 {\cf20 /* Construct a string literal encoding the version number. */}\par
00744 {\cf21 #ifdef COMPILER_VERSION}\par
00745 {\cf18 char} {\cf17 const}* info_version = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version["} COMPILER_VERSION {\cf22 "]"};\par
00746 \par
00747 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00748 {\cf21 #elif defined(COMPILER_VERSION_MAJOR)}\par
00749 {\cf18 char} {\cf17 const} info_version[] = \{\par
00750   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00751   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00752   COMPILER_VERSION_MAJOR,\par
00753 {\cf21 # ifdef COMPILER_VERSION_MINOR}\par
00754   {\cf23 '.'}, COMPILER_VERSION_MINOR,\par
00755 {\cf21 #  ifdef COMPILER_VERSION_PATCH}\par
00756    {\cf23 '.'}, COMPILER_VERSION_PATCH,\par
00757 {\cf21 #   ifdef COMPILER_VERSION_TWEAK}\par
00758     {\cf23 '.'}, COMPILER_VERSION_TWEAK,\par
00759 {\cf21 #   endif}\par
00760 {\cf21 #  endif}\par
00761 {\cf21 # endif}\par
00762   {\cf23 ']'},{\cf23 '\\0'}\};\par
00763 {\cf21 #endif}\par
00764 \par
00765 {\cf20 /* Construct a string literal encoding the internal version number. */}\par
00766 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00767 {\cf18 char} {\cf17 const} info_version_internal[] = \{\par
00768   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00769   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
00770   {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
00771   COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\};\par
00772 {\cf21 #elif defined(COMPILER_VERSION_INTERNAL_STR)}\par
00773 {\cf18 char} {\cf17 const}* info_version_internal = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version_internal["} COMPILER_VERSION_INTERNAL_STR {\cf22 "]"};\par
00774 {\cf21 #endif}\par
00775 \par
00776 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00777 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00778 {\cf18 char} {\cf17 const} info_simulate_version[] = \{\par
00779   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00780   {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00781   SIMULATE_VERSION_MAJOR,\par
00782 {\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
00783   {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
00784 {\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
00785    {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
00786 {\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
00787     {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
00788 {\cf21 #   endif}\par
00789 {\cf21 #  endif}\par
00790 {\cf21 # endif}\par
00791   {\cf23 ']'},{\cf23 '\\0'}\};\par
00792 {\cf21 #endif}\par
00793 \par
00794 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00795 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00796 {\cf20    because some compilers will just produce instructions to fill the}\par
00797 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00798 {\cf18 char} {\cf17 const}* info_platform = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "platform["} PLATFORM_ID {\cf22 "]"};\par
00799 {\cf18 char} {\cf17 const}* info_arch = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "arch["} ARCHITECTURE_ID {\cf22 "]"};\par
00800 \par
00801 \par
00802 \par
00803 {\cf21 #if !defined(__STDC__) && !defined(__clang__)}\par
00804 {\cf21 # if defined(_MSC_VER) || defined(__ibmxl__) || defined(__IBMC__)}\par
00805 {\cf21 #  define C_VERSION "90"}\par
00806 {\cf21 # else}\par
00807 {\cf21 #  define C_VERSION}\par
00808 {\cf21 # endif}\par
00809 {\cf21 #elif __STDC_VERSION__ > 201710L}\par
00810 {\cf21 # define C_VERSION "23"}\par
00811 {\cf21 #elif __STDC_VERSION__ >= 201710L}\par
00812 {\cf21 # define C_VERSION "17"}\par
00813 {\cf21 #elif __STDC_VERSION__ >= 201000L}\par
00814 {\cf21 # define C_VERSION "11"}\par
00815 {\cf21 #elif __STDC_VERSION__ >= 199901L}\par
00816 {\cf21 # define C_VERSION "99"}\par
00817 {\cf21 #else}\par
00818 {\cf21 # define C_VERSION "90"}\par
00819 {\cf21 #endif}\par
00820 {\cf17 const} {\cf18 char}* info_language_standard_default =\par
00821   {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["} C_VERSION {\cf22 "]"};\par
00822 \par
00823 {\cf17 const} {\cf18 char}* info_language_extensions_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
00824 {\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
00825 {\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
00826 {\cf21   !defined(__STRICT_ANSI__)}\par
00827   {\cf22 "ON"}\par
00828 {\cf21 #else}\par
00829   {\cf22 "OFF"}\par
00830 {\cf21 #endif}\par
00831 {\cf22 "]"};\par
00832 \par
00833 {\cf20 /*--------------------------------------------------------------------------*/}\par
00834 \par
00835 {\cf21 #ifdef ID_VOID_MAIN}\par
00836 {\cf18 void} main() \{\}\par
00837 {\cf21 #else}\par
00838 {\cf21 # if defined(__CLASSIC_C__)}\par
00839 {\cf18 int} main(argc, argv) {\cf18 int} argc; {\cf18 char} *argv[];\par
00840 {\cf21 # else}\par
00841 {\cf18 int} main({\cf18 int} argc, {\cf18 char}* argv[])\par
00842 {\cf21 # endif}\par
00843 \{\par
00844   {\cf18 int} require = 0;\par
00845   require += info_compiler[argc];\par
00846   require += info_platform[argc];\par
00847   require += info_arch[argc];\par
00848 {\cf21 #ifdef COMPILER_VERSION_MAJOR}\par
00849   require += info_version[argc];\par
00850 {\cf21 #endif}\par
00851 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00852   require += info_version_internal[argc];\par
00853 {\cf21 #endif}\par
00854 {\cf21 #ifdef SIMULATE_ID}\par
00855   require += info_simulate[argc];\par
00856 {\cf21 #endif}\par
00857 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00858   require += info_simulate_version[argc];\par
00859 {\cf21 #endif}\par
00860 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00861   require += info_cray[argc];\par
00862 {\cf21 #endif}\par
00863   require += info_language_standard_default[argc];\par
00864   require += info_language_extensions_default[argc];\par
00865   (void)argv;\par
00866   {\cf19 return} require;\par
00867 \}\par
00868 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp}
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_compiler} = "INFO" ":" "compiler[" COMPILER_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_simulate} = "INFO" ":" "simulate[" SIMULATE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b qnxnto} = "INFO" ":" "qnxnto[]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_cray} = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_version} = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_version_internal} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_simulate_version} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_platform} = "INFO" ":" "platform[" PLATFORM_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_arch} = "INFO" ":" "arch[" ARCHITECTURE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_standard_default}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_extensions_default}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 832} of file {\b build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v info_arch\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_arch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]"}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 784} of file {\b build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_compiler\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_compiler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]"}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 421} of file {\b build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_cray\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_cray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 431} of file {\b build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_language_extensions_default\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_language_extensions_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_extensions_default}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
{\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
{\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
{\cf21   !defined(__STRICT_ANSI__)}\par
  {\cf22 "ON"}\par
{\cf21 #else}\par
  {\cf22 "OFF"}\par
{\cf21 #endif}\par
{\cf22 "]"}\par
}
{
Definition at line {\b 820} of file {\b build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_language_standard_default\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_language_standard_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_standard_default}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["}\par
{\cf21 #if CXX_STD > 202002L}\par
  {\cf22 "23"}\par
{\cf21 #elif CXX_STD > 201703L}\par
  {\cf22 "20"}\par
{\cf21 #elif CXX_STD >= 201703L}\par
  {\cf22 "17"}\par
{\cf21 #elif CXX_STD >= 201402L}\par
  {\cf22 "14"}\par
{\cf21 #elif CXX_STD >= 201103L}\par
  {\cf22 "11"}\par
{\cf21 #else}\par
  {\cf22 "98"}\par
{\cf21 #endif}\par
{\cf22 "]"}\par
}
{
Definition at line {\b 804} of file {\b build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_platform\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_platform}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]"}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 783} of file {\b build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_simulate\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_simulate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]"}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 423} of file {\b build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_simulate_version\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_simulate_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_simulate_version[]}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
  SIMULATE_VERSION_MAJOR,\par
{\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
  {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
{\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
   {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
{\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
    {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
{\cf21 #   endif}\par
{\cf21 #  endif}\par
{\cf21 # endif}\par
  {\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 763} of file {\b build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_version\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_version[] = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 730} of file {\b build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_version_internal\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_version_internal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_version_internal}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
  {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
  COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 752} of file {\b build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v qnxnto\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:qnxnto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* qnxnto = "INFO" ":" "qnxnto[]"}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 427} of file {\b build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp\par \pard\plain 
{\tc\tcl2 \v CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /* This source file must have a .cpp extension so that all C++ compilers}\par
00002 {\cf20    recognize the extension without flags.  Borland does not know .cxx for}\par
00003 {\cf20    example.  */}\par
00004 {\cf21 #ifndef __cplusplus}\par
00005 {\cf21 # error "A C compiler has been selected for C++."}\par
00006 {\cf21 #endif}\par
00007 \par
00008 {\cf21 #if !defined(__has_include)}\par
00009 {\cf20 /* If the compiler does not have __has_include, pretend the answer is}\par
00010 {\cf20    always no.  */}\par
00011 {\cf21 #  define __has_include(x) 0}\par
00012 {\cf21 #endif}\par
00013 \par
00014 \par
00015 {\cf20 /* Version number components: V=Version, R=Revision, P=Patch}\par
00016 {\cf20    Version date components:   YYYY=Year, MM=Month,   DD=Day  */}\par
00017 \par
00018 {\cf21 #if defined(__COMO__)}\par
00019 {\cf21 # define COMPILER_ID "Comeau"}\par
00020   {\cf20 /* __COMO_VERSION__ = VRR */}\par
00021 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__COMO_VERSION__ / 100)}\par
00022 {\cf21 # define COMPILER_VERSION_MINOR DEC(__COMO_VERSION__ % 100)}\par
00023 \par
00024 {\cf21 #elif defined(__INTEL_COMPILER) || defined(__ICC)}\par
00025 {\cf21 # define COMPILER_ID "Intel"}\par
00026 {\cf21 # if defined(_MSC_VER)}\par
00027 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00028 {\cf21 # endif}\par
00029 {\cf21 # if defined(__GNUC__)}\par
00030 {\cf21 #  define SIMULATE_ID "GNU"}\par
00031 {\cf21 # endif}\par
00032   {\cf20 /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,}\par
00033 {\cf20      except that a few beta releases use the old format with V=2021.  */}\par
00034 {\cf21 # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111}\par
00035 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)}\par
00036 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)}\par
00037 {\cf21 #  if defined(__INTEL_COMPILER_UPDATE)}\par
00038 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)}\par
00039 {\cf21 #  else}\par
00040 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)}\par
00041 {\cf21 #  endif}\par
00042 {\cf21 # else}\par
00043 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)}\par
00044 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)}\par
00045    {\cf20 /* The third version component from --version is an update index,}\par
00046 {\cf20       but no macro is provided for it.  */}\par
00047 {\cf21 #  define COMPILER_VERSION_PATCH DEC(0)}\par
00048 {\cf21 # endif}\par
00049 {\cf21 # if defined(__INTEL_COMPILER_BUILD_DATE)}\par
00050    {\cf20 /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */}\par
00051 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)}\par
00052 {\cf21 # endif}\par
00053 {\cf21 # if defined(_MSC_VER)}\par
00054    {\cf20 /* _MSC_VER = VVRR */}\par
00055 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00056 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00057 {\cf21 # endif}\par
00058 {\cf21 # if defined(__GNUC__)}\par
00059 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00060 {\cf21 # elif defined(__GNUG__)}\par
00061 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00062 {\cf21 # endif}\par
00063 {\cf21 # if defined(__GNUC_MINOR__)}\par
00064 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00065 {\cf21 # endif}\par
00066 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00067 {\cf21 #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00068 {\cf21 # endif}\par
00069 \par
00070 {\cf21 #elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)}\par
00071 {\cf21 # define COMPILER_ID "IntelLLVM"}\par
00072 {\cf21 #if defined(_MSC_VER)}\par
00073 {\cf21 # define SIMULATE_ID "MSVC"}\par
00074 {\cf21 #endif}\par
00075 {\cf21 #if defined(__GNUC__)}\par
00076 {\cf21 # define SIMULATE_ID "GNU"}\par
00077 {\cf21 #endif}\par
00078 {\cf20 /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and}\par
00079 {\cf20  * later.  Look for 6 digit vs. 8 digit version number to decide encoding.}\par
00080 {\cf20  * VVVV is no smaller than the current year when a version is released.}\par
00081 {\cf20  */}\par
00082 {\cf21 #if __INTEL_LLVM_COMPILER < 1000000L}\par
00083 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)}\par
00084 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)}\par
00085 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)}\par
00086 {\cf21 #else}\par
00087 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)}\par
00088 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)}\par
00089 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)}\par
00090 {\cf21 #endif}\par
00091 {\cf21 #if defined(_MSC_VER)}\par
00092   {\cf20 /* _MSC_VER = VVRR */}\par
00093 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00094 {\cf21 # define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00095 {\cf21 #endif}\par
00096 {\cf21 #if defined(__GNUC__)}\par
00097 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00098 {\cf21 #elif defined(__GNUG__)}\par
00099 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00100 {\cf21 #endif}\par
00101 {\cf21 #if defined(__GNUC_MINOR__)}\par
00102 {\cf21 # define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00103 {\cf21 #endif}\par
00104 {\cf21 #if defined(__GNUC_PATCHLEVEL__)}\par
00105 {\cf21 # define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00106 {\cf21 #endif}\par
00107 \par
00108 {\cf21 #elif defined(__PATHCC__)}\par
00109 {\cf21 # define COMPILER_ID "PathScale"}\par
00110 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PATHCC__)}\par
00111 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)}\par
00112 {\cf21 # if defined(__PATHCC_PATCHLEVEL__)}\par
00113 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)}\par
00114 {\cf21 # endif}\par
00115 \par
00116 {\cf21 #elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)}\par
00117 {\cf21 # define COMPILER_ID "Embarcadero"}\par
00118 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)}\par
00119 {\cf21 # define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)}\par
00120 {\cf21 # define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)}\par
00121 \par
00122 {\cf21 #elif defined(__BORLANDC__)}\par
00123 {\cf21 # define COMPILER_ID "Borland"}\par
00124   {\cf20 /* __BORLANDC__ = 0xVRR */}\par
00125 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)}\par
00126 {\cf21 # define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)}\par
00127 \par
00128 {\cf21 #elif defined(__WATCOMC__) && __WATCOMC__ < 1200}\par
00129 {\cf21 # define COMPILER_ID "Watcom"}\par
00130    {\cf20 /* __WATCOMC__ = VVRR */}\par
00131 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)}\par
00132 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00133 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00134 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00135 {\cf21 # endif}\par
00136 \par
00137 {\cf21 #elif defined(__WATCOMC__)}\par
00138 {\cf21 # define COMPILER_ID "OpenWatcom"}\par
00139    {\cf20 /* __WATCOMC__ = VVRP + 1100 */}\par
00140 {\cf21 # define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)}\par
00141 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00142 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00143 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00144 {\cf21 # endif}\par
00145 \par
00146 {\cf21 #elif defined(__SUNPRO_CC)}\par
00147 {\cf21 # define COMPILER_ID "SunPro"}\par
00148 {\cf21 # if __SUNPRO_CC >= 0x5100}\par
00149    {\cf20 /* __SUNPRO_CC = 0xVRRP */}\par
00150 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)}\par
00151 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)}\par
00152 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)}\par
00153 {\cf21 # else}\par
00154    {\cf20 /* __SUNPRO_CC = 0xVRP */}\par
00155 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)}\par
00156 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)}\par
00157 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)}\par
00158 {\cf21 # endif}\par
00159 \par
00160 {\cf21 #elif defined(__HP_aCC)}\par
00161 {\cf21 # define COMPILER_ID "HP"}\par
00162   {\cf20 /* __HP_aCC = VVRRPP */}\par
00163 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)}\par
00164 {\cf21 # define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)}\par
00165 {\cf21 # define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)}\par
00166 \par
00167 {\cf21 #elif defined(__DECCXX)}\par
00168 {\cf21 # define COMPILER_ID "Compaq"}\par
00169   {\cf20 /* __DECCXX_VER = VVRRTPPPP */}\par
00170 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)}\par
00171 {\cf21 # define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)}\par
00172 {\cf21 # define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)}\par
00173 \par
00174 {\cf21 #elif defined(__IBMCPP__) && defined(__COMPILER_VER__)}\par
00175 {\cf21 # define COMPILER_ID "zOS"}\par
00176   {\cf20 /* __IBMCPP__ = VRP */}\par
00177 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00178 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00179 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00180 \par
00181 {\cf21 #elif defined(__open_xl__) && defined(__clang__)}\par
00182 {\cf21 # define COMPILER_ID "IBMClang"}\par
00183 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)}\par
00184 {\cf21 # define COMPILER_VERSION_MINOR DEC(__open_xl_release__)}\par
00185 {\cf21 # define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)}\par
00186 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)}\par
00187 \par
00188 \par
00189 {\cf21 #elif defined(__ibmxl__) && defined(__clang__)}\par
00190 {\cf21 # define COMPILER_ID "XLClang"}\par
00191 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)}\par
00192 {\cf21 # define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)}\par
00193 {\cf21 # define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)}\par
00194 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)}\par
00195 \par
00196 \par
00197 {\cf21 #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800}\par
00198 {\cf21 # define COMPILER_ID "XL"}\par
00199   {\cf20 /* __IBMCPP__ = VRP */}\par
00200 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00201 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00202 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00203 \par
00204 {\cf21 #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800}\par
00205 {\cf21 # define COMPILER_ID "VisualAge"}\par
00206   {\cf20 /* __IBMCPP__ = VRP */}\par
00207 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00208 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00209 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00210 \par
00211 {\cf21 #elif defined(__NVCOMPILER)}\par
00212 {\cf21 # define COMPILER_ID "NVHPC"}\par
00213 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)}\par
00214 {\cf21 # define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)}\par
00215 {\cf21 # if defined(__NVCOMPILER_PATCHLEVEL__)}\par
00216 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)}\par
00217 {\cf21 # endif}\par
00218 \par
00219 {\cf21 #elif defined(__PGI)}\par
00220 {\cf21 # define COMPILER_ID "PGI"}\par
00221 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PGIC__)}\par
00222 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)}\par
00223 {\cf21 # if defined(__PGIC_PATCHLEVEL__)}\par
00224 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)}\par
00225 {\cf21 # endif}\par
00226 \par
00227 {\cf21 #elif defined(_CRAYC)}\par
00228 {\cf21 # define COMPILER_ID "Cray"}\par
00229 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)}\par
00230 {\cf21 # define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)}\par
00231 \par
00232 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00233 {\cf21 # define COMPILER_ID "TI"}\par
00234   {\cf20 /* __TI_COMPILER_VERSION__ = VVVRRRPPP */}\par
00235 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)}\par
00236 {\cf21 # define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)}\par
00237 {\cf21 # define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)}\par
00238 \par
00239 {\cf21 #elif defined(__CLANG_FUJITSU)}\par
00240 {\cf21 # define COMPILER_ID "FujitsuClang"}\par
00241 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00242 {\cf21 # define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00243 {\cf21 # define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00244 {\cf21 # define COMPILER_VERSION_INTERNAL_STR __clang_version__}\par
00245 \par
00246 \par
00247 {\cf21 #elif defined(__FUJITSU)}\par
00248 {\cf21 # define COMPILER_ID "Fujitsu"}\par
00249 {\cf21 # if defined(__FCC_version__)}\par
00250 {\cf21 #   define COMPILER_VERSION __FCC_version__}\par
00251 {\cf21 # elif defined(__FCC_major__)}\par
00252 {\cf21 #   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00253 {\cf21 #   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00254 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00255 {\cf21 # endif}\par
00256 {\cf21 # if defined(__fcc_version)}\par
00257 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)}\par
00258 {\cf21 # elif defined(__FCC_VERSION)}\par
00259 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)}\par
00260 {\cf21 # endif}\par
00261 \par
00262 \par
00263 {\cf21 #elif defined(__ghs__)}\par
00264 {\cf21 # define COMPILER_ID "GHS"}\par
00265 {\cf20 /* __GHS_VERSION_NUMBER = VVVVRP */}\par
00266 {\cf21 # ifdef __GHS_VERSION_NUMBER}\par
00267 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)}\par
00268 {\cf21 # define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)}\par
00269 {\cf21 # define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)}\par
00270 {\cf21 # endif}\par
00271 \par
00272 {\cf21 #elif defined(__TASKING__)}\par
00273 {\cf21 # define COMPILER_ID "Tasking"}\par
00274 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)}\par
00275 {\cf21   # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)}\par
00276 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__VERSION__)}\par
00277 \par
00278 {\cf21 #elif defined(__SCO_VERSION__)}\par
00279 {\cf21 # define COMPILER_ID "SCO"}\par
00280 \par
00281 {\cf21 #elif defined(__ARMCC_VERSION) && !defined(__clang__)}\par
00282 {\cf21 # define COMPILER_ID "ARMCC"}\par
00283 {\cf21 #if __ARMCC_VERSION >= 1000000}\par
00284   {\cf20 /* __ARMCC_VERSION = VRRPPPP */}\par
00285 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)}\par
00286 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)}\par
00287 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)}\par
00288 {\cf21 #else}\par
00289   {\cf20 /* __ARMCC_VERSION = VRPPPP */}\par
00290 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)}\par
00291 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)}\par
00292 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)}\par
00293 {\cf21 #endif}\par
00294 \par
00295 \par
00296 {\cf21 #elif defined(__clang__) && defined(__apple_build_version__)}\par
00297 {\cf21 # define COMPILER_ID "AppleClang"}\par
00298 {\cf21 # if defined(_MSC_VER)}\par
00299 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00300 {\cf21 # endif}\par
00301 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00302 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00303 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00304 {\cf21 # if defined(_MSC_VER)}\par
00305    {\cf20 /* _MSC_VER = VVRR */}\par
00306 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00307 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00308 {\cf21 # endif}\par
00309 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)}\par
00310 \par
00311 {\cf21 #elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)}\par
00312 {\cf21 # define COMPILER_ID "ARMClang"}\par
00313 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)}\par
00314 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)}\par
00315 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION     % 10000)}\par
00316 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)}\par
00317 \par
00318 {\cf21 #elif defined(__clang__)}\par
00319 {\cf21 # define COMPILER_ID "Clang"}\par
00320 {\cf21 # if defined(_MSC_VER)}\par
00321 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00322 {\cf21 # endif}\par
00323 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00324 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00325 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00326 {\cf21 # if defined(_MSC_VER)}\par
00327    {\cf20 /* _MSC_VER = VVRR */}\par
00328 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00329 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00330 {\cf21 # endif}\par
00331 \par
00332 {\cf21 #elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))}\par
00333 {\cf21 # define COMPILER_ID "LCC"}\par
00334 {\cf21 # define COMPILER_VERSION_MAJOR DEC(1)}\par
00335 {\cf21 # if defined(__LCC__)}\par
00336 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__LCC__- 100)}\par
00337 {\cf21 # endif}\par
00338 {\cf21 # if defined(__LCC_MINOR__)}\par
00339 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)}\par
00340 {\cf21 # endif}\par
00341 {\cf21 # if defined(__GNUC__) && defined(__GNUC_MINOR__)}\par
00342 {\cf21 #  define SIMULATE_ID "GNU"}\par
00343 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00344 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00345 {\cf21 #  if defined(__GNUC_PATCHLEVEL__)}\par
00346 {\cf21 #   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00347 {\cf21 #  endif}\par
00348 {\cf21 # endif}\par
00349 \par
00350 {\cf21 #elif defined(__GNUC__) || defined(__GNUG__)}\par
00351 {\cf21 # define COMPILER_ID "GNU"}\par
00352 {\cf21 # if defined(__GNUC__)}\par
00353 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)}\par
00354 {\cf21 # else}\par
00355 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)}\par
00356 {\cf21 # endif}\par
00357 {\cf21 # if defined(__GNUC_MINOR__)}\par
00358 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00359 {\cf21 # endif}\par
00360 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00361 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00362 {\cf21 # endif}\par
00363 \par
00364 {\cf21 #elif defined(_MSC_VER)}\par
00365 {\cf21 # define COMPILER_ID "MSVC"}\par
00366   {\cf20 /* _MSC_VER = VVRR */}\par
00367 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00368 {\cf21 # define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00369 {\cf21 # if defined(_MSC_FULL_VER)}\par
00370 {\cf21 #  if _MSC_VER >= 1400}\par
00371     {\cf20 /* _MSC_FULL_VER = VVRRPPPPP */}\par
00372 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)}\par
00373 {\cf21 #  else}\par
00374     {\cf20 /* _MSC_FULL_VER = VVRRPPPP */}\par
00375 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)}\par
00376 {\cf21 #  endif}\par
00377 {\cf21 # endif}\par
00378 {\cf21 # if defined(_MSC_BUILD)}\par
00379 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)}\par
00380 {\cf21 # endif}\par
00381 \par
00382 {\cf21 #elif defined(_ADI_COMPILER)}\par
00383 {\cf21 # define COMPILER_ID "ADSP"}\par
00384 {\cf21 #if defined(__VERSIONNUM__)}\par
00385   {\cf20 /* __VERSIONNUM__ = 0xVVRRPPTT */}\par
00386 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)}\par
00387 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)}\par
00388 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)}\par
00389 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)}\par
00390 {\cf21 #endif}\par
00391 \par
00392 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00393 {\cf21 # define COMPILER_ID "IAR"}\par
00394 {\cf21 # if defined(__VER__) && defined(__ICCARM__)}\par
00395 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)}\par
00396 {\cf21 #  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)}\par
00397 {\cf21 #  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)}\par
00398 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00399 {\cf21 # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))}\par
00400 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)}\par
00401 {\cf21 #  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))}\par
00402 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)}\par
00403 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00404 {\cf21 # endif}\par
00405 \par
00406 \par
00407 {\cf20 /* These compilers are either not known or too old to define an}\par
00408 {\cf20   identification macro.  Try to identify the platform and guess that}\par
00409 {\cf20   it is the native compiler.  */}\par
00410 {\cf21 #elif defined(__hpux) || defined(__hpua)}\par
00411 {\cf21 # define COMPILER_ID "HP"}\par
00412 \par
00413 {\cf21 #else }{\cf20 /* unknown compiler */}{\cf21 }\par
00414 {\cf21 # define COMPILER_ID ""}\par
00415 {\cf21 #endif}\par
00416 \par
00417 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00418 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00419 {\cf20    because some compilers will just produce instructions to fill the}\par
00420 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00421 {\cf18 char} {\cf17 const}* info_compiler = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler["} COMPILER_ID {\cf22 "]"};\par
00422 {\cf21 #ifdef SIMULATE_ID}\par
00423 {\cf18 char} {\cf17 const}* info_simulate = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "simulate["} SIMULATE_ID {\cf22 "]"};\par
00424 {\cf21 #endif}\par
00425 \par
00426 {\cf21 #ifdef __QNXNTO__}\par
00427 {\cf18 char} {\cf17 const}* qnxnto = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "qnxnto[]"};\par
00428 {\cf21 #endif}\par
00429 \par
00430 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00431 {\cf18 char} {\cf17 const} *info_cray = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_wrapper[CrayPrgEnv]"};\par
00432 {\cf21 #endif}\par
00433 \par
00434 {\cf21 #define STRINGIFY_HELPER(X) #X}\par
00435 {\cf21 #define STRINGIFY(X) STRINGIFY_HELPER(X)}\par
00436 \par
00437 {\cf20 /* Identify known platforms by name.  */}\par
00438 {\cf21 #if defined(__linux) || defined(__linux__) || defined(linux)}\par
00439 {\cf21 # define PLATFORM_ID "Linux"}\par
00440 \par
00441 {\cf21 #elif defined(__MSYS__)}\par
00442 {\cf21 # define PLATFORM_ID "MSYS"}\par
00443 \par
00444 {\cf21 #elif defined(__CYGWIN__)}\par
00445 {\cf21 # define PLATFORM_ID "Cygwin"}\par
00446 \par
00447 {\cf21 #elif defined(__MINGW32__)}\par
00448 {\cf21 # define PLATFORM_ID "MinGW"}\par
00449 \par
00450 {\cf21 #elif defined(__APPLE__)}\par
00451 {\cf21 # define PLATFORM_ID "Darwin"}\par
00452 \par
00453 {\cf21 #elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)}\par
00454 {\cf21 # define PLATFORM_ID "Windows"}\par
00455 \par
00456 {\cf21 #elif defined(__FreeBSD__) || defined(__FreeBSD)}\par
00457 {\cf21 # define PLATFORM_ID "FreeBSD"}\par
00458 \par
00459 {\cf21 #elif defined(__NetBSD__) || defined(__NetBSD)}\par
00460 {\cf21 # define PLATFORM_ID "NetBSD"}\par
00461 \par
00462 {\cf21 #elif defined(__OpenBSD__) || defined(__OPENBSD)}\par
00463 {\cf21 # define PLATFORM_ID "OpenBSD"}\par
00464 \par
00465 {\cf21 #elif defined(__sun) || defined(sun)}\par
00466 {\cf21 # define PLATFORM_ID "SunOS"}\par
00467 \par
00468 {\cf21 #elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)}\par
00469 {\cf21 # define PLATFORM_ID "AIX"}\par
00470 \par
00471 {\cf21 #elif defined(__hpux) || defined(__hpux__)}\par
00472 {\cf21 # define PLATFORM_ID "HP-UX"}\par
00473 \par
00474 {\cf21 #elif defined(__HAIKU__)}\par
00475 {\cf21 # define PLATFORM_ID "Haiku"}\par
00476 \par
00477 {\cf21 #elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)}\par
00478 {\cf21 # define PLATFORM_ID "BeOS"}\par
00479 \par
00480 {\cf21 #elif defined(__QNX__) || defined(__QNXNTO__)}\par
00481 {\cf21 # define PLATFORM_ID "QNX"}\par
00482 \par
00483 {\cf21 #elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)}\par
00484 {\cf21 # define PLATFORM_ID "Tru64"}\par
00485 \par
00486 {\cf21 #elif defined(__riscos) || defined(__riscos__)}\par
00487 {\cf21 # define PLATFORM_ID "RISCos"}\par
00488 \par
00489 {\cf21 #elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)}\par
00490 {\cf21 # define PLATFORM_ID "SINIX"}\par
00491 \par
00492 {\cf21 #elif defined(__UNIX_SV__)}\par
00493 {\cf21 # define PLATFORM_ID "UNIX_SV"}\par
00494 \par
00495 {\cf21 #elif defined(__bsdos__)}\par
00496 {\cf21 # define PLATFORM_ID "BSDOS"}\par
00497 \par
00498 {\cf21 #elif defined(_MPRAS) || defined(MPRAS)}\par
00499 {\cf21 # define PLATFORM_ID "MP-RAS"}\par
00500 \par
00501 {\cf21 #elif defined(__osf) || defined(__osf__)}\par
00502 {\cf21 # define PLATFORM_ID "OSF1"}\par
00503 \par
00504 {\cf21 #elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)}\par
00505 {\cf21 # define PLATFORM_ID "SCO_SV"}\par
00506 \par
00507 {\cf21 #elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)}\par
00508 {\cf21 # define PLATFORM_ID "ULTRIX"}\par
00509 \par
00510 {\cf21 #elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)}\par
00511 {\cf21 # define PLATFORM_ID "Xenix"}\par
00512 \par
00513 {\cf21 #elif defined(__WATCOMC__)}\par
00514 {\cf21 # if defined(__LINUX__)}\par
00515 {\cf21 #  define PLATFORM_ID "Linux"}\par
00516 \par
00517 {\cf21 # elif defined(__DOS__)}\par
00518 {\cf21 #  define PLATFORM_ID "DOS"}\par
00519 \par
00520 {\cf21 # elif defined(__OS2__)}\par
00521 {\cf21 #  define PLATFORM_ID "OS2"}\par
00522 \par
00523 {\cf21 # elif defined(__WINDOWS__)}\par
00524 {\cf21 #  define PLATFORM_ID "Windows3x"}\par
00525 \par
00526 {\cf21 # elif defined(__VXWORKS__)}\par
00527 {\cf21 #  define PLATFORM_ID "VxWorks"}\par
00528 \par
00529 {\cf21 # else }{\cf20 /* unknown platform */}{\cf21 }\par
00530 {\cf21 #  define PLATFORM_ID}\par
00531 {\cf21 # endif}\par
00532 \par
00533 {\cf21 #elif defined(__INTEGRITY)}\par
00534 {\cf21 # if defined(INT_178B)}\par
00535 {\cf21 #  define PLATFORM_ID "Integrity178"}\par
00536 \par
00537 {\cf21 # else }{\cf20 /* regular Integrity */}{\cf21 }\par
00538 {\cf21 #  define PLATFORM_ID "Integrity"}\par
00539 {\cf21 # endif}\par
00540 \par
00541 {\cf21 # elif defined(_ADI_COMPILER)}\par
00542 {\cf21 #  define PLATFORM_ID "ADSP"}\par
00543 \par
00544 {\cf21 #else }{\cf20 /* unknown platform */}{\cf21 }\par
00545 {\cf21 # define PLATFORM_ID}\par
00546 \par
00547 {\cf21 #endif}\par
00548 \par
00549 {\cf20 /* For windows compilers MSVC and Intel we can determine}\par
00550 {\cf20    the architecture of the compiler being used.  This is because}\par
00551 {\cf20    the compilers do not have flags that can change the architecture,}\par
00552 {\cf20    but rather depend on which compiler is being used}\par
00553 {\cf20 */}\par
00554 {\cf21 #if defined(_WIN32) && defined(_MSC_VER)}\par
00555 {\cf21 # if defined(_M_IA64)}\par
00556 {\cf21 #  define ARCHITECTURE_ID "IA64"}\par
00557 \par
00558 {\cf21 # elif defined(_M_ARM64EC)}\par
00559 {\cf21 #  define ARCHITECTURE_ID "ARM64EC"}\par
00560 \par
00561 {\cf21 # elif defined(_M_X64) || defined(_M_AMD64)}\par
00562 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00563 \par
00564 {\cf21 # elif defined(_M_IX86)}\par
00565 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00566 \par
00567 {\cf21 # elif defined(_M_ARM64)}\par
00568 {\cf21 #  define ARCHITECTURE_ID "ARM64"}\par
00569 \par
00570 {\cf21 # elif defined(_M_ARM)}\par
00571 {\cf21 #  if _M_ARM == 4}\par
00572 {\cf21 #   define ARCHITECTURE_ID "ARMV4I"}\par
00573 {\cf21 #  elif _M_ARM == 5}\par
00574 {\cf21 #   define ARCHITECTURE_ID "ARMV5I"}\par
00575 {\cf21 #  else}\par
00576 {\cf21 #   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)}\par
00577 {\cf21 #  endif}\par
00578 \par
00579 {\cf21 # elif defined(_M_MIPS)}\par
00580 {\cf21 #  define ARCHITECTURE_ID "MIPS"}\par
00581 \par
00582 {\cf21 # elif defined(_M_SH)}\par
00583 {\cf21 #  define ARCHITECTURE_ID "SHx"}\par
00584 \par
00585 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00586 {\cf21 #  define ARCHITECTURE_ID ""}\par
00587 {\cf21 # endif}\par
00588 \par
00589 {\cf21 #elif defined(__WATCOMC__)}\par
00590 {\cf21 # if defined(_M_I86)}\par
00591 {\cf21 #  define ARCHITECTURE_ID "I86"}\par
00592 \par
00593 {\cf21 # elif defined(_M_IX86)}\par
00594 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00595 \par
00596 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00597 {\cf21 #  define ARCHITECTURE_ID ""}\par
00598 {\cf21 # endif}\par
00599 \par
00600 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00601 {\cf21 # if defined(__ICCARM__)}\par
00602 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00603 \par
00604 {\cf21 # elif defined(__ICCRX__)}\par
00605 {\cf21 #  define ARCHITECTURE_ID "RX"}\par
00606 \par
00607 {\cf21 # elif defined(__ICCRH850__)}\par
00608 {\cf21 #  define ARCHITECTURE_ID "RH850"}\par
00609 \par
00610 {\cf21 # elif defined(__ICCRL78__)}\par
00611 {\cf21 #  define ARCHITECTURE_ID "RL78"}\par
00612 \par
00613 {\cf21 # elif defined(__ICCRISCV__)}\par
00614 {\cf21 #  define ARCHITECTURE_ID "RISCV"}\par
00615 \par
00616 {\cf21 # elif defined(__ICCAVR__)}\par
00617 {\cf21 #  define ARCHITECTURE_ID "AVR"}\par
00618 \par
00619 {\cf21 # elif defined(__ICC430__)}\par
00620 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00621 \par
00622 {\cf21 # elif defined(__ICCV850__)}\par
00623 {\cf21 #  define ARCHITECTURE_ID "V850"}\par
00624 \par
00625 {\cf21 # elif defined(__ICC8051__)}\par
00626 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00627 \par
00628 {\cf21 # elif defined(__ICCSTM8__)}\par
00629 {\cf21 #  define ARCHITECTURE_ID "STM8"}\par
00630 \par
00631 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00632 {\cf21 #  define ARCHITECTURE_ID ""}\par
00633 {\cf21 # endif}\par
00634 \par
00635 {\cf21 #elif defined(__ghs__)}\par
00636 {\cf21 # if defined(__PPC64__)}\par
00637 {\cf21 #  define ARCHITECTURE_ID "PPC64"}\par
00638 \par
00639 {\cf21 # elif defined(__ppc__)}\par
00640 {\cf21 #  define ARCHITECTURE_ID "PPC"}\par
00641 \par
00642 {\cf21 # elif defined(__ARM__)}\par
00643 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00644 \par
00645 {\cf21 # elif defined(__x86_64__)}\par
00646 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00647 \par
00648 {\cf21 # elif defined(__i386__)}\par
00649 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00650 \par
00651 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00652 {\cf21 #  define ARCHITECTURE_ID ""}\par
00653 {\cf21 # endif}\par
00654 \par
00655 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00656 {\cf21 # if defined(__TI_ARM__)}\par
00657 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00658 \par
00659 {\cf21 # elif defined(__MSP430__)}\par
00660 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00661 \par
00662 {\cf21 # elif defined(__TMS320C28XX__)}\par
00663 {\cf21 #  define ARCHITECTURE_ID "TMS320C28x"}\par
00664 \par
00665 {\cf21 # elif defined(__TMS320C6X__) || defined(_TMS320C6X)}\par
00666 {\cf21 #  define ARCHITECTURE_ID "TMS320C6x"}\par
00667 \par
00668 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00669 {\cf21 #  define ARCHITECTURE_ID ""}\par
00670 {\cf21 # endif}\par
00671 \par
00672 {\cf21 # elif defined(__ADSPSHARC__)}\par
00673 {\cf21 #  define ARCHITECTURE_ID "SHARC"}\par
00674 \par
00675 {\cf21 # elif defined(__ADSPBLACKFIN__)}\par
00676 {\cf21 #  define ARCHITECTURE_ID "Blackfin"}\par
00677 \par
00678 {\cf21 #elif defined(__TASKING__)}\par
00679 \par
00680 {\cf21 # if defined(__CTC__) || defined(__CPTC__)}\par
00681 {\cf21 #  define ARCHITECTURE_ID "TriCore"}\par
00682 \par
00683 {\cf21 # elif defined(__CMCS__)}\par
00684 {\cf21 #  define ARCHITECTURE_ID "MCS"}\par
00685 \par
00686 {\cf21 # elif defined(__CARM__)}\par
00687 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00688 \par
00689 {\cf21 # elif defined(__CARC__)}\par
00690 {\cf21 #  define ARCHITECTURE_ID "ARC"}\par
00691 \par
00692 {\cf21 # elif defined(__C51__)}\par
00693 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00694 \par
00695 {\cf21 # elif defined(__CPCP__)}\par
00696 {\cf21 #  define ARCHITECTURE_ID "PCP"}\par
00697 \par
00698 {\cf21 # else}\par
00699 {\cf21 #  define ARCHITECTURE_ID ""}\par
00700 {\cf21 # endif}\par
00701 \par
00702 {\cf21 #else}\par
00703 {\cf21 #  define ARCHITECTURE_ID}\par
00704 {\cf21 #endif}\par
00705 \par
00706 {\cf20 /* Convert integer to decimal digit literals.  */}\par
00707 {\cf21 #define DEC(n)                   \\}\par
00708 {\cf21   ('0' + (((n) / 10000000)%10)), \\}\par
00709 {\cf21   ('0' + (((n) / 1000000)%10)),  \\}\par
00710 {\cf21   ('0' + (((n) / 100000)%10)),   \\}\par
00711 {\cf21   ('0' + (((n) / 10000)%10)),    \\}\par
00712 {\cf21   ('0' + (((n) / 1000)%10)),     \\}\par
00713 {\cf21   ('0' + (((n) / 100)%10)),      \\}\par
00714 {\cf21   ('0' + (((n) / 10)%10)),       \\}\par
00715 {\cf21   ('0' +  ((n) % 10))}\par
00716 \par
00717 {\cf20 /* Convert integer to hex digit literals.  */}\par
00718 {\cf21 #define HEX(n)             \\}\par
00719 {\cf21   ('0' + ((n)>>28 & 0xF)), \\}\par
00720 {\cf21   ('0' + ((n)>>24 & 0xF)), \\}\par
00721 {\cf21   ('0' + ((n)>>20 & 0xF)), \\}\par
00722 {\cf21   ('0' + ((n)>>16 & 0xF)), \\}\par
00723 {\cf21   ('0' + ((n)>>12 & 0xF)), \\}\par
00724 {\cf21   ('0' + ((n)>>8  & 0xF)), \\}\par
00725 {\cf21   ('0' + ((n)>>4  & 0xF)), \\}\par
00726 {\cf21   ('0' + ((n)     & 0xF))}\par
00727 \par
00728 {\cf20 /* Construct a string literal encoding the version number. */}\par
00729 {\cf21 #ifdef COMPILER_VERSION}\par
00730 {\cf18 char} {\cf17 const}* info_version = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version["} COMPILER_VERSION {\cf22 "]"};\par
00731 \par
00732 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00733 {\cf21 #elif defined(COMPILER_VERSION_MAJOR)}\par
00734 {\cf18 char} {\cf17 const} info_version[] = \{\par
00735   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00736   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00737   COMPILER_VERSION_MAJOR,\par
00738 {\cf21 # ifdef COMPILER_VERSION_MINOR}\par
00739   {\cf23 '.'}, COMPILER_VERSION_MINOR,\par
00740 {\cf21 #  ifdef COMPILER_VERSION_PATCH}\par
00741    {\cf23 '.'}, COMPILER_VERSION_PATCH,\par
00742 {\cf21 #   ifdef COMPILER_VERSION_TWEAK}\par
00743     {\cf23 '.'}, COMPILER_VERSION_TWEAK,\par
00744 {\cf21 #   endif}\par
00745 {\cf21 #  endif}\par
00746 {\cf21 # endif}\par
00747   {\cf23 ']'},{\cf23 '\\0'}\};\par
00748 {\cf21 #endif}\par
00749 \par
00750 {\cf20 /* Construct a string literal encoding the internal version number. */}\par
00751 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00752 {\cf18 char} {\cf17 const} info_version_internal[] = \{\par
00753   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00754   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
00755   {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
00756   COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\};\par
00757 {\cf21 #elif defined(COMPILER_VERSION_INTERNAL_STR)}\par
00758 {\cf18 char} {\cf17 const}* info_version_internal = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version_internal["} COMPILER_VERSION_INTERNAL_STR {\cf22 "]"};\par
00759 {\cf21 #endif}\par
00760 \par
00761 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00762 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00763 {\cf18 char} {\cf17 const} info_simulate_version[] = \{\par
00764   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00765   {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00766   SIMULATE_VERSION_MAJOR,\par
00767 {\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
00768   {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
00769 {\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
00770    {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
00771 {\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
00772     {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
00773 {\cf21 #   endif}\par
00774 {\cf21 #  endif}\par
00775 {\cf21 # endif}\par
00776   {\cf23 ']'},{\cf23 '\\0'}\};\par
00777 {\cf21 #endif}\par
00778 \par
00779 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00780 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00781 {\cf20    because some compilers will just produce instructions to fill the}\par
00782 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00783 {\cf18 char} {\cf17 const}* info_platform = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "platform["} PLATFORM_ID {\cf22 "]"};\par
00784 {\cf18 char} {\cf17 const}* info_arch = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "arch["} ARCHITECTURE_ID {\cf22 "]"};\par
00785 \par
00786 \par
00787 \par
00788 {\cf21 #if defined(__INTEL_COMPILER) && defined(_MSVC_LANG) && _MSVC_LANG < 201403L}\par
00789 {\cf21 #  if defined(__INTEL_CXX11_MODE__)}\par
00790 {\cf21 #    if defined(__cpp_aggregate_nsdmi)}\par
00791 {\cf21 #      define CXX_STD 201402L}\par
00792 {\cf21 #    else}\par
00793 {\cf21 #      define CXX_STD 201103L}\par
00794 {\cf21 #    endif}\par
00795 {\cf21 #  else}\par
00796 {\cf21 #    define CXX_STD 199711L}\par
00797 {\cf21 #  endif}\par
00798 {\cf21 #elif defined(_MSC_VER) && defined(_MSVC_LANG)}\par
00799 {\cf21 #  define CXX_STD _MSVC_LANG}\par
00800 {\cf21 #else}\par
00801 {\cf21 #  define CXX_STD __cplusplus}\par
00802 {\cf21 #endif}\par
00803 \par
00804 {\cf17 const} {\cf18 char}* info_language_standard_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["}\par
00805 {\cf21 #if CXX_STD > 202002L}\par
00806   {\cf22 "23"}\par
00807 {\cf21 #elif CXX_STD > 201703L}\par
00808   {\cf22 "20"}\par
00809 {\cf21 #elif CXX_STD >= 201703L}\par
00810   {\cf22 "17"}\par
00811 {\cf21 #elif CXX_STD >= 201402L}\par
00812   {\cf22 "14"}\par
00813 {\cf21 #elif CXX_STD >= 201103L}\par
00814   {\cf22 "11"}\par
00815 {\cf21 #else}\par
00816   {\cf22 "98"}\par
00817 {\cf21 #endif}\par
00818 {\cf22 "]"};\par
00819 \par
00820 {\cf17 const} {\cf18 char}* info_language_extensions_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
00821 {\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
00822 {\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
00823 {\cf21   !defined(__STRICT_ANSI__)}\par
00824   {\cf22 "ON"}\par
00825 {\cf21 #else}\par
00826   {\cf22 "OFF"}\par
00827 {\cf21 #endif}\par
00828 {\cf22 "]"};\par
00829 \par
00830 {\cf20 /*--------------------------------------------------------------------------*/}\par
00831 \par
00832 {\cf18 int} main({\cf18 int} argc, {\cf18 char}* argv[])\par
00833 \{\par
00834   {\cf18 int} require = 0;\par
00835   require += info_compiler[argc];\par
00836   require += info_platform[argc];\par
00837   require += info_arch[argc];\par
00838 {\cf21 #ifdef COMPILER_VERSION_MAJOR}\par
00839   require += info_version[argc];\par
00840 {\cf21 #endif}\par
00841 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00842   require += info_version_internal[argc];\par
00843 {\cf21 #endif}\par
00844 {\cf21 #ifdef SIMULATE_ID}\par
00845   require += info_simulate[argc];\par
00846 {\cf21 #endif}\par
00847 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00848   require += info_simulate_version[argc];\par
00849 {\cf21 #endif}\par
00850 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00851   require += info_cray[argc];\par
00852 {\cf21 #endif}\par
00853   require += info_language_standard_default[argc];\par
00854   require += info_language_extensions_default[argc];\par
00855   (void)argv;\par
00856   {\cf19 return} require;\par
00857 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp}
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_compiler} = "INFO" ":" "compiler[" COMPILER_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_simulate} = "INFO" ":" "simulate[" SIMULATE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b qnxnto} = "INFO" ":" "qnxnto[]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_cray} = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_version} = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_version_internal} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_simulate_version} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_platform} = "INFO" ":" "platform[" PLATFORM_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_arch} = "INFO" ":" "arch[" ARCHITECTURE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_standard_default}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_extensions_default}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 832} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v info_arch\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_arch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]"}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 784} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_compiler\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_compiler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]"}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 421} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_cray\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_cray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 431} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_language_extensions_default\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_language_extensions_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_extensions_default}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
{\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
{\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
{\cf21   !defined(__STRICT_ANSI__)}\par
  {\cf22 "ON"}\par
{\cf21 #else}\par
  {\cf22 "OFF"}\par
{\cf21 #endif}\par
{\cf22 "]"}\par
}
{
Definition at line {\b 820} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_language_standard_default\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_language_standard_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_standard_default}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["}\par
{\cf21 #if CXX_STD > 202002L}\par
  {\cf22 "23"}\par
{\cf21 #elif CXX_STD > 201703L}\par
  {\cf22 "20"}\par
{\cf21 #elif CXX_STD >= 201703L}\par
  {\cf22 "17"}\par
{\cf21 #elif CXX_STD >= 201402L}\par
  {\cf22 "14"}\par
{\cf21 #elif CXX_STD >= 201103L}\par
  {\cf22 "11"}\par
{\cf21 #else}\par
  {\cf22 "98"}\par
{\cf21 #endif}\par
{\cf22 "]"}\par
}
{
Definition at line {\b 804} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_platform\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_platform}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]"}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 783} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_simulate\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_simulate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]"}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 423} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_simulate_version\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_simulate_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_simulate_version[]}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
  SIMULATE_VERSION_MAJOR,\par
{\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
  {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
{\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
   {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
{\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
    {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
{\cf21 #   endif}\par
{\cf21 #  endif}\par
{\cf21 # endif}\par
  {\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 763} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_version\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_version[] = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 730} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_version_internal\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_version_internal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_version_internal}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
  {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
  COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 752} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v qnxnto\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:qnxnto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* qnxnto = "INFO" ":" "qnxnto[]"}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 427} of file {\b Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Codigo_Final/Bombero/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp\par \pard\plain 
{\tc\tcl2 \v CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /* This source file must have a .cpp extension so that all C++ compilers}\par
00002 {\cf20    recognize the extension without flags.  Borland does not know .cxx for}\par
00003 {\cf20    example.  */}\par
00004 {\cf21 #ifndef __cplusplus}\par
00005 {\cf21 # error "A C compiler has been selected for C++."}\par
00006 {\cf21 #endif}\par
00007 \par
00008 {\cf21 #if !defined(__has_include)}\par
00009 {\cf20 /* If the compiler does not have __has_include, pretend the answer is}\par
00010 {\cf20    always no.  */}\par
00011 {\cf21 #  define __has_include(x) 0}\par
00012 {\cf21 #endif}\par
00013 \par
00014 \par
00015 {\cf20 /* Version number components: V=Version, R=Revision, P=Patch}\par
00016 {\cf20    Version date components:   YYYY=Year, MM=Month,   DD=Day  */}\par
00017 \par
00018 {\cf21 #if defined(__COMO__)}\par
00019 {\cf21 # define COMPILER_ID "Comeau"}\par
00020   {\cf20 /* __COMO_VERSION__ = VRR */}\par
00021 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__COMO_VERSION__ / 100)}\par
00022 {\cf21 # define COMPILER_VERSION_MINOR DEC(__COMO_VERSION__ % 100)}\par
00023 \par
00024 {\cf21 #elif defined(__INTEL_COMPILER) || defined(__ICC)}\par
00025 {\cf21 # define COMPILER_ID "Intel"}\par
00026 {\cf21 # if defined(_MSC_VER)}\par
00027 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00028 {\cf21 # endif}\par
00029 {\cf21 # if defined(__GNUC__)}\par
00030 {\cf21 #  define SIMULATE_ID "GNU"}\par
00031 {\cf21 # endif}\par
00032   {\cf20 /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,}\par
00033 {\cf20      except that a few beta releases use the old format with V=2021.  */}\par
00034 {\cf21 # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111}\par
00035 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)}\par
00036 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)}\par
00037 {\cf21 #  if defined(__INTEL_COMPILER_UPDATE)}\par
00038 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)}\par
00039 {\cf21 #  else}\par
00040 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)}\par
00041 {\cf21 #  endif}\par
00042 {\cf21 # else}\par
00043 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)}\par
00044 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)}\par
00045    {\cf20 /* The third version component from --version is an update index,}\par
00046 {\cf20       but no macro is provided for it.  */}\par
00047 {\cf21 #  define COMPILER_VERSION_PATCH DEC(0)}\par
00048 {\cf21 # endif}\par
00049 {\cf21 # if defined(__INTEL_COMPILER_BUILD_DATE)}\par
00050    {\cf20 /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */}\par
00051 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)}\par
00052 {\cf21 # endif}\par
00053 {\cf21 # if defined(_MSC_VER)}\par
00054    {\cf20 /* _MSC_VER = VVRR */}\par
00055 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00056 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00057 {\cf21 # endif}\par
00058 {\cf21 # if defined(__GNUC__)}\par
00059 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00060 {\cf21 # elif defined(__GNUG__)}\par
00061 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00062 {\cf21 # endif}\par
00063 {\cf21 # if defined(__GNUC_MINOR__)}\par
00064 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00065 {\cf21 # endif}\par
00066 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00067 {\cf21 #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00068 {\cf21 # endif}\par
00069 \par
00070 {\cf21 #elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)}\par
00071 {\cf21 # define COMPILER_ID "IntelLLVM"}\par
00072 {\cf21 #if defined(_MSC_VER)}\par
00073 {\cf21 # define SIMULATE_ID "MSVC"}\par
00074 {\cf21 #endif}\par
00075 {\cf21 #if defined(__GNUC__)}\par
00076 {\cf21 # define SIMULATE_ID "GNU"}\par
00077 {\cf21 #endif}\par
00078 {\cf20 /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and}\par
00079 {\cf20  * later.  Look for 6 digit vs. 8 digit version number to decide encoding.}\par
00080 {\cf20  * VVVV is no smaller than the current year when a version is released.}\par
00081 {\cf20  */}\par
00082 {\cf21 #if __INTEL_LLVM_COMPILER < 1000000L}\par
00083 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)}\par
00084 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)}\par
00085 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)}\par
00086 {\cf21 #else}\par
00087 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)}\par
00088 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)}\par
00089 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)}\par
00090 {\cf21 #endif}\par
00091 {\cf21 #if defined(_MSC_VER)}\par
00092   {\cf20 /* _MSC_VER = VVRR */}\par
00093 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00094 {\cf21 # define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00095 {\cf21 #endif}\par
00096 {\cf21 #if defined(__GNUC__)}\par
00097 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00098 {\cf21 #elif defined(__GNUG__)}\par
00099 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00100 {\cf21 #endif}\par
00101 {\cf21 #if defined(__GNUC_MINOR__)}\par
00102 {\cf21 # define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00103 {\cf21 #endif}\par
00104 {\cf21 #if defined(__GNUC_PATCHLEVEL__)}\par
00105 {\cf21 # define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00106 {\cf21 #endif}\par
00107 \par
00108 {\cf21 #elif defined(__PATHCC__)}\par
00109 {\cf21 # define COMPILER_ID "PathScale"}\par
00110 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PATHCC__)}\par
00111 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)}\par
00112 {\cf21 # if defined(__PATHCC_PATCHLEVEL__)}\par
00113 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)}\par
00114 {\cf21 # endif}\par
00115 \par
00116 {\cf21 #elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)}\par
00117 {\cf21 # define COMPILER_ID "Embarcadero"}\par
00118 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)}\par
00119 {\cf21 # define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)}\par
00120 {\cf21 # define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)}\par
00121 \par
00122 {\cf21 #elif defined(__BORLANDC__)}\par
00123 {\cf21 # define COMPILER_ID "Borland"}\par
00124   {\cf20 /* __BORLANDC__ = 0xVRR */}\par
00125 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)}\par
00126 {\cf21 # define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)}\par
00127 \par
00128 {\cf21 #elif defined(__WATCOMC__) && __WATCOMC__ < 1200}\par
00129 {\cf21 # define COMPILER_ID "Watcom"}\par
00130    {\cf20 /* __WATCOMC__ = VVRR */}\par
00131 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)}\par
00132 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00133 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00134 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00135 {\cf21 # endif}\par
00136 \par
00137 {\cf21 #elif defined(__WATCOMC__)}\par
00138 {\cf21 # define COMPILER_ID "OpenWatcom"}\par
00139    {\cf20 /* __WATCOMC__ = VVRP + 1100 */}\par
00140 {\cf21 # define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)}\par
00141 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00142 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00143 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00144 {\cf21 # endif}\par
00145 \par
00146 {\cf21 #elif defined(__SUNPRO_CC)}\par
00147 {\cf21 # define COMPILER_ID "SunPro"}\par
00148 {\cf21 # if __SUNPRO_CC >= 0x5100}\par
00149    {\cf20 /* __SUNPRO_CC = 0xVRRP */}\par
00150 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)}\par
00151 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)}\par
00152 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)}\par
00153 {\cf21 # else}\par
00154    {\cf20 /* __SUNPRO_CC = 0xVRP */}\par
00155 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)}\par
00156 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)}\par
00157 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)}\par
00158 {\cf21 # endif}\par
00159 \par
00160 {\cf21 #elif defined(__HP_aCC)}\par
00161 {\cf21 # define COMPILER_ID "HP"}\par
00162   {\cf20 /* __HP_aCC = VVRRPP */}\par
00163 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)}\par
00164 {\cf21 # define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)}\par
00165 {\cf21 # define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)}\par
00166 \par
00167 {\cf21 #elif defined(__DECCXX)}\par
00168 {\cf21 # define COMPILER_ID "Compaq"}\par
00169   {\cf20 /* __DECCXX_VER = VVRRTPPPP */}\par
00170 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)}\par
00171 {\cf21 # define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)}\par
00172 {\cf21 # define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)}\par
00173 \par
00174 {\cf21 #elif defined(__IBMCPP__) && defined(__COMPILER_VER__)}\par
00175 {\cf21 # define COMPILER_ID "zOS"}\par
00176   {\cf20 /* __IBMCPP__ = VRP */}\par
00177 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00178 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00179 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00180 \par
00181 {\cf21 #elif defined(__open_xl__) && defined(__clang__)}\par
00182 {\cf21 # define COMPILER_ID "IBMClang"}\par
00183 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)}\par
00184 {\cf21 # define COMPILER_VERSION_MINOR DEC(__open_xl_release__)}\par
00185 {\cf21 # define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)}\par
00186 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)}\par
00187 \par
00188 \par
00189 {\cf21 #elif defined(__ibmxl__) && defined(__clang__)}\par
00190 {\cf21 # define COMPILER_ID "XLClang"}\par
00191 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)}\par
00192 {\cf21 # define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)}\par
00193 {\cf21 # define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)}\par
00194 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)}\par
00195 \par
00196 \par
00197 {\cf21 #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800}\par
00198 {\cf21 # define COMPILER_ID "XL"}\par
00199   {\cf20 /* __IBMCPP__ = VRP */}\par
00200 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00201 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00202 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00203 \par
00204 {\cf21 #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800}\par
00205 {\cf21 # define COMPILER_ID "VisualAge"}\par
00206   {\cf20 /* __IBMCPP__ = VRP */}\par
00207 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00208 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00209 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00210 \par
00211 {\cf21 #elif defined(__NVCOMPILER)}\par
00212 {\cf21 # define COMPILER_ID "NVHPC"}\par
00213 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)}\par
00214 {\cf21 # define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)}\par
00215 {\cf21 # if defined(__NVCOMPILER_PATCHLEVEL__)}\par
00216 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)}\par
00217 {\cf21 # endif}\par
00218 \par
00219 {\cf21 #elif defined(__PGI)}\par
00220 {\cf21 # define COMPILER_ID "PGI"}\par
00221 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PGIC__)}\par
00222 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)}\par
00223 {\cf21 # if defined(__PGIC_PATCHLEVEL__)}\par
00224 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)}\par
00225 {\cf21 # endif}\par
00226 \par
00227 {\cf21 #elif defined(_CRAYC)}\par
00228 {\cf21 # define COMPILER_ID "Cray"}\par
00229 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)}\par
00230 {\cf21 # define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)}\par
00231 \par
00232 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00233 {\cf21 # define COMPILER_ID "TI"}\par
00234   {\cf20 /* __TI_COMPILER_VERSION__ = VVVRRRPPP */}\par
00235 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)}\par
00236 {\cf21 # define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)}\par
00237 {\cf21 # define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)}\par
00238 \par
00239 {\cf21 #elif defined(__CLANG_FUJITSU)}\par
00240 {\cf21 # define COMPILER_ID "FujitsuClang"}\par
00241 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00242 {\cf21 # define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00243 {\cf21 # define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00244 {\cf21 # define COMPILER_VERSION_INTERNAL_STR __clang_version__}\par
00245 \par
00246 \par
00247 {\cf21 #elif defined(__FUJITSU)}\par
00248 {\cf21 # define COMPILER_ID "Fujitsu"}\par
00249 {\cf21 # if defined(__FCC_version__)}\par
00250 {\cf21 #   define COMPILER_VERSION __FCC_version__}\par
00251 {\cf21 # elif defined(__FCC_major__)}\par
00252 {\cf21 #   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00253 {\cf21 #   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00254 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00255 {\cf21 # endif}\par
00256 {\cf21 # if defined(__fcc_version)}\par
00257 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)}\par
00258 {\cf21 # elif defined(__FCC_VERSION)}\par
00259 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)}\par
00260 {\cf21 # endif}\par
00261 \par
00262 \par
00263 {\cf21 #elif defined(__ghs__)}\par
00264 {\cf21 # define COMPILER_ID "GHS"}\par
00265 {\cf20 /* __GHS_VERSION_NUMBER = VVVVRP */}\par
00266 {\cf21 # ifdef __GHS_VERSION_NUMBER}\par
00267 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)}\par
00268 {\cf21 # define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)}\par
00269 {\cf21 # define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)}\par
00270 {\cf21 # endif}\par
00271 \par
00272 {\cf21 #elif defined(__TASKING__)}\par
00273 {\cf21 # define COMPILER_ID "Tasking"}\par
00274 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)}\par
00275 {\cf21   # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)}\par
00276 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__VERSION__)}\par
00277 \par
00278 {\cf21 #elif defined(__SCO_VERSION__)}\par
00279 {\cf21 # define COMPILER_ID "SCO"}\par
00280 \par
00281 {\cf21 #elif defined(__ARMCC_VERSION) && !defined(__clang__)}\par
00282 {\cf21 # define COMPILER_ID "ARMCC"}\par
00283 {\cf21 #if __ARMCC_VERSION >= 1000000}\par
00284   {\cf20 /* __ARMCC_VERSION = VRRPPPP */}\par
00285 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)}\par
00286 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)}\par
00287 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)}\par
00288 {\cf21 #else}\par
00289   {\cf20 /* __ARMCC_VERSION = VRPPPP */}\par
00290 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)}\par
00291 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)}\par
00292 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)}\par
00293 {\cf21 #endif}\par
00294 \par
00295 \par
00296 {\cf21 #elif defined(__clang__) && defined(__apple_build_version__)}\par
00297 {\cf21 # define COMPILER_ID "AppleClang"}\par
00298 {\cf21 # if defined(_MSC_VER)}\par
00299 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00300 {\cf21 # endif}\par
00301 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00302 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00303 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00304 {\cf21 # if defined(_MSC_VER)}\par
00305    {\cf20 /* _MSC_VER = VVRR */}\par
00306 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00307 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00308 {\cf21 # endif}\par
00309 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)}\par
00310 \par
00311 {\cf21 #elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)}\par
00312 {\cf21 # define COMPILER_ID "ARMClang"}\par
00313 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)}\par
00314 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)}\par
00315 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION     % 10000)}\par
00316 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)}\par
00317 \par
00318 {\cf21 #elif defined(__clang__)}\par
00319 {\cf21 # define COMPILER_ID "Clang"}\par
00320 {\cf21 # if defined(_MSC_VER)}\par
00321 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00322 {\cf21 # endif}\par
00323 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00324 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00325 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00326 {\cf21 # if defined(_MSC_VER)}\par
00327    {\cf20 /* _MSC_VER = VVRR */}\par
00328 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00329 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00330 {\cf21 # endif}\par
00331 \par
00332 {\cf21 #elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))}\par
00333 {\cf21 # define COMPILER_ID "LCC"}\par
00334 {\cf21 # define COMPILER_VERSION_MAJOR DEC(1)}\par
00335 {\cf21 # if defined(__LCC__)}\par
00336 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__LCC__- 100)}\par
00337 {\cf21 # endif}\par
00338 {\cf21 # if defined(__LCC_MINOR__)}\par
00339 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)}\par
00340 {\cf21 # endif}\par
00341 {\cf21 # if defined(__GNUC__) && defined(__GNUC_MINOR__)}\par
00342 {\cf21 #  define SIMULATE_ID "GNU"}\par
00343 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00344 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00345 {\cf21 #  if defined(__GNUC_PATCHLEVEL__)}\par
00346 {\cf21 #   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00347 {\cf21 #  endif}\par
00348 {\cf21 # endif}\par
00349 \par
00350 {\cf21 #elif defined(__GNUC__) || defined(__GNUG__)}\par
00351 {\cf21 # define COMPILER_ID "GNU"}\par
00352 {\cf21 # if defined(__GNUC__)}\par
00353 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)}\par
00354 {\cf21 # else}\par
00355 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)}\par
00356 {\cf21 # endif}\par
00357 {\cf21 # if defined(__GNUC_MINOR__)}\par
00358 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00359 {\cf21 # endif}\par
00360 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00361 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00362 {\cf21 # endif}\par
00363 \par
00364 {\cf21 #elif defined(_MSC_VER)}\par
00365 {\cf21 # define COMPILER_ID "MSVC"}\par
00366   {\cf20 /* _MSC_VER = VVRR */}\par
00367 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00368 {\cf21 # define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00369 {\cf21 # if defined(_MSC_FULL_VER)}\par
00370 {\cf21 #  if _MSC_VER >= 1400}\par
00371     {\cf20 /* _MSC_FULL_VER = VVRRPPPPP */}\par
00372 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)}\par
00373 {\cf21 #  else}\par
00374     {\cf20 /* _MSC_FULL_VER = VVRRPPPP */}\par
00375 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)}\par
00376 {\cf21 #  endif}\par
00377 {\cf21 # endif}\par
00378 {\cf21 # if defined(_MSC_BUILD)}\par
00379 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)}\par
00380 {\cf21 # endif}\par
00381 \par
00382 {\cf21 #elif defined(_ADI_COMPILER)}\par
00383 {\cf21 # define COMPILER_ID "ADSP"}\par
00384 {\cf21 #if defined(__VERSIONNUM__)}\par
00385   {\cf20 /* __VERSIONNUM__ = 0xVVRRPPTT */}\par
00386 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)}\par
00387 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)}\par
00388 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)}\par
00389 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)}\par
00390 {\cf21 #endif}\par
00391 \par
00392 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00393 {\cf21 # define COMPILER_ID "IAR"}\par
00394 {\cf21 # if defined(__VER__) && defined(__ICCARM__)}\par
00395 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)}\par
00396 {\cf21 #  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)}\par
00397 {\cf21 #  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)}\par
00398 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00399 {\cf21 # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))}\par
00400 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)}\par
00401 {\cf21 #  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))}\par
00402 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)}\par
00403 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00404 {\cf21 # endif}\par
00405 \par
00406 \par
00407 {\cf20 /* These compilers are either not known or too old to define an}\par
00408 {\cf20   identification macro.  Try to identify the platform and guess that}\par
00409 {\cf20   it is the native compiler.  */}\par
00410 {\cf21 #elif defined(__hpux) || defined(__hpua)}\par
00411 {\cf21 # define COMPILER_ID "HP"}\par
00412 \par
00413 {\cf21 #else }{\cf20 /* unknown compiler */}{\cf21 }\par
00414 {\cf21 # define COMPILER_ID ""}\par
00415 {\cf21 #endif}\par
00416 \par
00417 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00418 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00419 {\cf20    because some compilers will just produce instructions to fill the}\par
00420 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00421 {\cf18 char} {\cf17 const}* info_compiler = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler["} COMPILER_ID {\cf22 "]"};\par
00422 {\cf21 #ifdef SIMULATE_ID}\par
00423 {\cf18 char} {\cf17 const}* info_simulate = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "simulate["} SIMULATE_ID {\cf22 "]"};\par
00424 {\cf21 #endif}\par
00425 \par
00426 {\cf21 #ifdef __QNXNTO__}\par
00427 {\cf18 char} {\cf17 const}* qnxnto = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "qnxnto[]"};\par
00428 {\cf21 #endif}\par
00429 \par
00430 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00431 {\cf18 char} {\cf17 const} *info_cray = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_wrapper[CrayPrgEnv]"};\par
00432 {\cf21 #endif}\par
00433 \par
00434 {\cf21 #define STRINGIFY_HELPER(X) #X}\par
00435 {\cf21 #define STRINGIFY(X) STRINGIFY_HELPER(X)}\par
00436 \par
00437 {\cf20 /* Identify known platforms by name.  */}\par
00438 {\cf21 #if defined(__linux) || defined(__linux__) || defined(linux)}\par
00439 {\cf21 # define PLATFORM_ID "Linux"}\par
00440 \par
00441 {\cf21 #elif defined(__MSYS__)}\par
00442 {\cf21 # define PLATFORM_ID "MSYS"}\par
00443 \par
00444 {\cf21 #elif defined(__CYGWIN__)}\par
00445 {\cf21 # define PLATFORM_ID "Cygwin"}\par
00446 \par
00447 {\cf21 #elif defined(__MINGW32__)}\par
00448 {\cf21 # define PLATFORM_ID "MinGW"}\par
00449 \par
00450 {\cf21 #elif defined(__APPLE__)}\par
00451 {\cf21 # define PLATFORM_ID "Darwin"}\par
00452 \par
00453 {\cf21 #elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)}\par
00454 {\cf21 # define PLATFORM_ID "Windows"}\par
00455 \par
00456 {\cf21 #elif defined(__FreeBSD__) || defined(__FreeBSD)}\par
00457 {\cf21 # define PLATFORM_ID "FreeBSD"}\par
00458 \par
00459 {\cf21 #elif defined(__NetBSD__) || defined(__NetBSD)}\par
00460 {\cf21 # define PLATFORM_ID "NetBSD"}\par
00461 \par
00462 {\cf21 #elif defined(__OpenBSD__) || defined(__OPENBSD)}\par
00463 {\cf21 # define PLATFORM_ID "OpenBSD"}\par
00464 \par
00465 {\cf21 #elif defined(__sun) || defined(sun)}\par
00466 {\cf21 # define PLATFORM_ID "SunOS"}\par
00467 \par
00468 {\cf21 #elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)}\par
00469 {\cf21 # define PLATFORM_ID "AIX"}\par
00470 \par
00471 {\cf21 #elif defined(__hpux) || defined(__hpux__)}\par
00472 {\cf21 # define PLATFORM_ID "HP-UX"}\par
00473 \par
00474 {\cf21 #elif defined(__HAIKU__)}\par
00475 {\cf21 # define PLATFORM_ID "Haiku"}\par
00476 \par
00477 {\cf21 #elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)}\par
00478 {\cf21 # define PLATFORM_ID "BeOS"}\par
00479 \par
00480 {\cf21 #elif defined(__QNX__) || defined(__QNXNTO__)}\par
00481 {\cf21 # define PLATFORM_ID "QNX"}\par
00482 \par
00483 {\cf21 #elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)}\par
00484 {\cf21 # define PLATFORM_ID "Tru64"}\par
00485 \par
00486 {\cf21 #elif defined(__riscos) || defined(__riscos__)}\par
00487 {\cf21 # define PLATFORM_ID "RISCos"}\par
00488 \par
00489 {\cf21 #elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)}\par
00490 {\cf21 # define PLATFORM_ID "SINIX"}\par
00491 \par
00492 {\cf21 #elif defined(__UNIX_SV__)}\par
00493 {\cf21 # define PLATFORM_ID "UNIX_SV"}\par
00494 \par
00495 {\cf21 #elif defined(__bsdos__)}\par
00496 {\cf21 # define PLATFORM_ID "BSDOS"}\par
00497 \par
00498 {\cf21 #elif defined(_MPRAS) || defined(MPRAS)}\par
00499 {\cf21 # define PLATFORM_ID "MP-RAS"}\par
00500 \par
00501 {\cf21 #elif defined(__osf) || defined(__osf__)}\par
00502 {\cf21 # define PLATFORM_ID "OSF1"}\par
00503 \par
00504 {\cf21 #elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)}\par
00505 {\cf21 # define PLATFORM_ID "SCO_SV"}\par
00506 \par
00507 {\cf21 #elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)}\par
00508 {\cf21 # define PLATFORM_ID "ULTRIX"}\par
00509 \par
00510 {\cf21 #elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)}\par
00511 {\cf21 # define PLATFORM_ID "Xenix"}\par
00512 \par
00513 {\cf21 #elif defined(__WATCOMC__)}\par
00514 {\cf21 # if defined(__LINUX__)}\par
00515 {\cf21 #  define PLATFORM_ID "Linux"}\par
00516 \par
00517 {\cf21 # elif defined(__DOS__)}\par
00518 {\cf21 #  define PLATFORM_ID "DOS"}\par
00519 \par
00520 {\cf21 # elif defined(__OS2__)}\par
00521 {\cf21 #  define PLATFORM_ID "OS2"}\par
00522 \par
00523 {\cf21 # elif defined(__WINDOWS__)}\par
00524 {\cf21 #  define PLATFORM_ID "Windows3x"}\par
00525 \par
00526 {\cf21 # elif defined(__VXWORKS__)}\par
00527 {\cf21 #  define PLATFORM_ID "VxWorks"}\par
00528 \par
00529 {\cf21 # else }{\cf20 /* unknown platform */}{\cf21 }\par
00530 {\cf21 #  define PLATFORM_ID}\par
00531 {\cf21 # endif}\par
00532 \par
00533 {\cf21 #elif defined(__INTEGRITY)}\par
00534 {\cf21 # if defined(INT_178B)}\par
00535 {\cf21 #  define PLATFORM_ID "Integrity178"}\par
00536 \par
00537 {\cf21 # else }{\cf20 /* regular Integrity */}{\cf21 }\par
00538 {\cf21 #  define PLATFORM_ID "Integrity"}\par
00539 {\cf21 # endif}\par
00540 \par
00541 {\cf21 # elif defined(_ADI_COMPILER)}\par
00542 {\cf21 #  define PLATFORM_ID "ADSP"}\par
00543 \par
00544 {\cf21 #else }{\cf20 /* unknown platform */}{\cf21 }\par
00545 {\cf21 # define PLATFORM_ID}\par
00546 \par
00547 {\cf21 #endif}\par
00548 \par
00549 {\cf20 /* For windows compilers MSVC and Intel we can determine}\par
00550 {\cf20    the architecture of the compiler being used.  This is because}\par
00551 {\cf20    the compilers do not have flags that can change the architecture,}\par
00552 {\cf20    but rather depend on which compiler is being used}\par
00553 {\cf20 */}\par
00554 {\cf21 #if defined(_WIN32) && defined(_MSC_VER)}\par
00555 {\cf21 # if defined(_M_IA64)}\par
00556 {\cf21 #  define ARCHITECTURE_ID "IA64"}\par
00557 \par
00558 {\cf21 # elif defined(_M_ARM64EC)}\par
00559 {\cf21 #  define ARCHITECTURE_ID "ARM64EC"}\par
00560 \par
00561 {\cf21 # elif defined(_M_X64) || defined(_M_AMD64)}\par
00562 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00563 \par
00564 {\cf21 # elif defined(_M_IX86)}\par
00565 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00566 \par
00567 {\cf21 # elif defined(_M_ARM64)}\par
00568 {\cf21 #  define ARCHITECTURE_ID "ARM64"}\par
00569 \par
00570 {\cf21 # elif defined(_M_ARM)}\par
00571 {\cf21 #  if _M_ARM == 4}\par
00572 {\cf21 #   define ARCHITECTURE_ID "ARMV4I"}\par
00573 {\cf21 #  elif _M_ARM == 5}\par
00574 {\cf21 #   define ARCHITECTURE_ID "ARMV5I"}\par
00575 {\cf21 #  else}\par
00576 {\cf21 #   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)}\par
00577 {\cf21 #  endif}\par
00578 \par
00579 {\cf21 # elif defined(_M_MIPS)}\par
00580 {\cf21 #  define ARCHITECTURE_ID "MIPS"}\par
00581 \par
00582 {\cf21 # elif defined(_M_SH)}\par
00583 {\cf21 #  define ARCHITECTURE_ID "SHx"}\par
00584 \par
00585 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00586 {\cf21 #  define ARCHITECTURE_ID ""}\par
00587 {\cf21 # endif}\par
00588 \par
00589 {\cf21 #elif defined(__WATCOMC__)}\par
00590 {\cf21 # if defined(_M_I86)}\par
00591 {\cf21 #  define ARCHITECTURE_ID "I86"}\par
00592 \par
00593 {\cf21 # elif defined(_M_IX86)}\par
00594 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00595 \par
00596 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00597 {\cf21 #  define ARCHITECTURE_ID ""}\par
00598 {\cf21 # endif}\par
00599 \par
00600 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00601 {\cf21 # if defined(__ICCARM__)}\par
00602 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00603 \par
00604 {\cf21 # elif defined(__ICCRX__)}\par
00605 {\cf21 #  define ARCHITECTURE_ID "RX"}\par
00606 \par
00607 {\cf21 # elif defined(__ICCRH850__)}\par
00608 {\cf21 #  define ARCHITECTURE_ID "RH850"}\par
00609 \par
00610 {\cf21 # elif defined(__ICCRL78__)}\par
00611 {\cf21 #  define ARCHITECTURE_ID "RL78"}\par
00612 \par
00613 {\cf21 # elif defined(__ICCRISCV__)}\par
00614 {\cf21 #  define ARCHITECTURE_ID "RISCV"}\par
00615 \par
00616 {\cf21 # elif defined(__ICCAVR__)}\par
00617 {\cf21 #  define ARCHITECTURE_ID "AVR"}\par
00618 \par
00619 {\cf21 # elif defined(__ICC430__)}\par
00620 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00621 \par
00622 {\cf21 # elif defined(__ICCV850__)}\par
00623 {\cf21 #  define ARCHITECTURE_ID "V850"}\par
00624 \par
00625 {\cf21 # elif defined(__ICC8051__)}\par
00626 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00627 \par
00628 {\cf21 # elif defined(__ICCSTM8__)}\par
00629 {\cf21 #  define ARCHITECTURE_ID "STM8"}\par
00630 \par
00631 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00632 {\cf21 #  define ARCHITECTURE_ID ""}\par
00633 {\cf21 # endif}\par
00634 \par
00635 {\cf21 #elif defined(__ghs__)}\par
00636 {\cf21 # if defined(__PPC64__)}\par
00637 {\cf21 #  define ARCHITECTURE_ID "PPC64"}\par
00638 \par
00639 {\cf21 # elif defined(__ppc__)}\par
00640 {\cf21 #  define ARCHITECTURE_ID "PPC"}\par
00641 \par
00642 {\cf21 # elif defined(__ARM__)}\par
00643 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00644 \par
00645 {\cf21 # elif defined(__x86_64__)}\par
00646 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00647 \par
00648 {\cf21 # elif defined(__i386__)}\par
00649 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00650 \par
00651 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00652 {\cf21 #  define ARCHITECTURE_ID ""}\par
00653 {\cf21 # endif}\par
00654 \par
00655 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00656 {\cf21 # if defined(__TI_ARM__)}\par
00657 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00658 \par
00659 {\cf21 # elif defined(__MSP430__)}\par
00660 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00661 \par
00662 {\cf21 # elif defined(__TMS320C28XX__)}\par
00663 {\cf21 #  define ARCHITECTURE_ID "TMS320C28x"}\par
00664 \par
00665 {\cf21 # elif defined(__TMS320C6X__) || defined(_TMS320C6X)}\par
00666 {\cf21 #  define ARCHITECTURE_ID "TMS320C6x"}\par
00667 \par
00668 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00669 {\cf21 #  define ARCHITECTURE_ID ""}\par
00670 {\cf21 # endif}\par
00671 \par
00672 {\cf21 # elif defined(__ADSPSHARC__)}\par
00673 {\cf21 #  define ARCHITECTURE_ID "SHARC"}\par
00674 \par
00675 {\cf21 # elif defined(__ADSPBLACKFIN__)}\par
00676 {\cf21 #  define ARCHITECTURE_ID "Blackfin"}\par
00677 \par
00678 {\cf21 #elif defined(__TASKING__)}\par
00679 \par
00680 {\cf21 # if defined(__CTC__) || defined(__CPTC__)}\par
00681 {\cf21 #  define ARCHITECTURE_ID "TriCore"}\par
00682 \par
00683 {\cf21 # elif defined(__CMCS__)}\par
00684 {\cf21 #  define ARCHITECTURE_ID "MCS"}\par
00685 \par
00686 {\cf21 # elif defined(__CARM__)}\par
00687 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00688 \par
00689 {\cf21 # elif defined(__CARC__)}\par
00690 {\cf21 #  define ARCHITECTURE_ID "ARC"}\par
00691 \par
00692 {\cf21 # elif defined(__C51__)}\par
00693 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00694 \par
00695 {\cf21 # elif defined(__CPCP__)}\par
00696 {\cf21 #  define ARCHITECTURE_ID "PCP"}\par
00697 \par
00698 {\cf21 # else}\par
00699 {\cf21 #  define ARCHITECTURE_ID ""}\par
00700 {\cf21 # endif}\par
00701 \par
00702 {\cf21 #else}\par
00703 {\cf21 #  define ARCHITECTURE_ID}\par
00704 {\cf21 #endif}\par
00705 \par
00706 {\cf20 /* Convert integer to decimal digit literals.  */}\par
00707 {\cf21 #define DEC(n)                   \\}\par
00708 {\cf21   ('0' + (((n) / 10000000)%10)), \\}\par
00709 {\cf21   ('0' + (((n) / 1000000)%10)),  \\}\par
00710 {\cf21   ('0' + (((n) / 100000)%10)),   \\}\par
00711 {\cf21   ('0' + (((n) / 10000)%10)),    \\}\par
00712 {\cf21   ('0' + (((n) / 1000)%10)),     \\}\par
00713 {\cf21   ('0' + (((n) / 100)%10)),      \\}\par
00714 {\cf21   ('0' + (((n) / 10)%10)),       \\}\par
00715 {\cf21   ('0' +  ((n) % 10))}\par
00716 \par
00717 {\cf20 /* Convert integer to hex digit literals.  */}\par
00718 {\cf21 #define HEX(n)             \\}\par
00719 {\cf21   ('0' + ((n)>>28 & 0xF)), \\}\par
00720 {\cf21   ('0' + ((n)>>24 & 0xF)), \\}\par
00721 {\cf21   ('0' + ((n)>>20 & 0xF)), \\}\par
00722 {\cf21   ('0' + ((n)>>16 & 0xF)), \\}\par
00723 {\cf21   ('0' + ((n)>>12 & 0xF)), \\}\par
00724 {\cf21   ('0' + ((n)>>8  & 0xF)), \\}\par
00725 {\cf21   ('0' + ((n)>>4  & 0xF)), \\}\par
00726 {\cf21   ('0' + ((n)     & 0xF))}\par
00727 \par
00728 {\cf20 /* Construct a string literal encoding the version number. */}\par
00729 {\cf21 #ifdef COMPILER_VERSION}\par
00730 {\cf18 char} {\cf17 const}* info_version = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version["} COMPILER_VERSION {\cf22 "]"};\par
00731 \par
00732 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00733 {\cf21 #elif defined(COMPILER_VERSION_MAJOR)}\par
00734 {\cf18 char} {\cf17 const} info_version[] = \{\par
00735   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00736   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00737   COMPILER_VERSION_MAJOR,\par
00738 {\cf21 # ifdef COMPILER_VERSION_MINOR}\par
00739   {\cf23 '.'}, COMPILER_VERSION_MINOR,\par
00740 {\cf21 #  ifdef COMPILER_VERSION_PATCH}\par
00741    {\cf23 '.'}, COMPILER_VERSION_PATCH,\par
00742 {\cf21 #   ifdef COMPILER_VERSION_TWEAK}\par
00743     {\cf23 '.'}, COMPILER_VERSION_TWEAK,\par
00744 {\cf21 #   endif}\par
00745 {\cf21 #  endif}\par
00746 {\cf21 # endif}\par
00747   {\cf23 ']'},{\cf23 '\\0'}\};\par
00748 {\cf21 #endif}\par
00749 \par
00750 {\cf20 /* Construct a string literal encoding the internal version number. */}\par
00751 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00752 {\cf18 char} {\cf17 const} info_version_internal[] = \{\par
00753   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00754   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
00755   {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
00756   COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\};\par
00757 {\cf21 #elif defined(COMPILER_VERSION_INTERNAL_STR)}\par
00758 {\cf18 char} {\cf17 const}* info_version_internal = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version_internal["} COMPILER_VERSION_INTERNAL_STR {\cf22 "]"};\par
00759 {\cf21 #endif}\par
00760 \par
00761 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00762 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00763 {\cf18 char} {\cf17 const} info_simulate_version[] = \{\par
00764   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00765   {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00766   SIMULATE_VERSION_MAJOR,\par
00767 {\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
00768   {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
00769 {\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
00770    {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
00771 {\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
00772     {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
00773 {\cf21 #   endif}\par
00774 {\cf21 #  endif}\par
00775 {\cf21 # endif}\par
00776   {\cf23 ']'},{\cf23 '\\0'}\};\par
00777 {\cf21 #endif}\par
00778 \par
00779 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00780 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00781 {\cf20    because some compilers will just produce instructions to fill the}\par
00782 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00783 {\cf18 char} {\cf17 const}* info_platform = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "platform["} PLATFORM_ID {\cf22 "]"};\par
00784 {\cf18 char} {\cf17 const}* info_arch = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "arch["} ARCHITECTURE_ID {\cf22 "]"};\par
00785 \par
00786 \par
00787 \par
00788 {\cf21 #if defined(__INTEL_COMPILER) && defined(_MSVC_LANG) && _MSVC_LANG < 201403L}\par
00789 {\cf21 #  if defined(__INTEL_CXX11_MODE__)}\par
00790 {\cf21 #    if defined(__cpp_aggregate_nsdmi)}\par
00791 {\cf21 #      define CXX_STD 201402L}\par
00792 {\cf21 #    else}\par
00793 {\cf21 #      define CXX_STD 201103L}\par
00794 {\cf21 #    endif}\par
00795 {\cf21 #  else}\par
00796 {\cf21 #    define CXX_STD 199711L}\par
00797 {\cf21 #  endif}\par
00798 {\cf21 #elif defined(_MSC_VER) && defined(_MSVC_LANG)}\par
00799 {\cf21 #  define CXX_STD _MSVC_LANG}\par
00800 {\cf21 #else}\par
00801 {\cf21 #  define CXX_STD __cplusplus}\par
00802 {\cf21 #endif}\par
00803 \par
00804 {\cf17 const} {\cf18 char}* info_language_standard_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["}\par
00805 {\cf21 #if CXX_STD > 202002L}\par
00806   {\cf22 "23"}\par
00807 {\cf21 #elif CXX_STD > 201703L}\par
00808   {\cf22 "20"}\par
00809 {\cf21 #elif CXX_STD >= 201703L}\par
00810   {\cf22 "17"}\par
00811 {\cf21 #elif CXX_STD >= 201402L}\par
00812   {\cf22 "14"}\par
00813 {\cf21 #elif CXX_STD >= 201103L}\par
00814   {\cf22 "11"}\par
00815 {\cf21 #else}\par
00816   {\cf22 "98"}\par
00817 {\cf21 #endif}\par
00818 {\cf22 "]"};\par
00819 \par
00820 {\cf17 const} {\cf18 char}* info_language_extensions_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
00821 {\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
00822 {\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
00823 {\cf21   !defined(__STRICT_ANSI__)}\par
00824   {\cf22 "ON"}\par
00825 {\cf21 #else}\par
00826   {\cf22 "OFF"}\par
00827 {\cf21 #endif}\par
00828 {\cf22 "]"};\par
00829 \par
00830 {\cf20 /*--------------------------------------------------------------------------*/}\par
00831 \par
00832 {\cf18 int} main({\cf18 int} argc, {\cf18 char}* argv[])\par
00833 \{\par
00834   {\cf18 int} require = 0;\par
00835   require += info_compiler[argc];\par
00836   require += info_platform[argc];\par
00837   require += info_arch[argc];\par
00838 {\cf21 #ifdef COMPILER_VERSION_MAJOR}\par
00839   require += info_version[argc];\par
00840 {\cf21 #endif}\par
00841 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00842   require += info_version_internal[argc];\par
00843 {\cf21 #endif}\par
00844 {\cf21 #ifdef SIMULATE_ID}\par
00845   require += info_simulate[argc];\par
00846 {\cf21 #endif}\par
00847 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00848   require += info_simulate_version[argc];\par
00849 {\cf21 #endif}\par
00850 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00851   require += info_cray[argc];\par
00852 {\cf21 #endif}\par
00853   require += info_language_standard_default[argc];\par
00854   require += info_language_extensions_default[argc];\par
00855   (void)argv;\par
00856   {\cf19 return} require;\par
00857 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp}
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_compiler} = "INFO" ":" "compiler[" COMPILER_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_simulate} = "INFO" ":" "simulate[" SIMULATE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b qnxnto} = "INFO" ":" "qnxnto[]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_cray} = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_version} = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_version_internal} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_simulate_version} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_platform} = "INFO" ":" "platform[" PLATFORM_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_arch} = "INFO" ":" "arch[" ARCHITECTURE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_standard_default}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_extensions_default}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 832} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v info_arch\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_arch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]"}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 784} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_compiler\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_compiler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]"}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 421} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_cray\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_cray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 431} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_language_extensions_default\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_language_extensions_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_extensions_default}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
{\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
{\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
{\cf21   !defined(__STRICT_ANSI__)}\par
  {\cf22 "ON"}\par
{\cf21 #else}\par
  {\cf22 "OFF"}\par
{\cf21 #endif}\par
{\cf22 "]"}\par
}
{
Definition at line {\b 820} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_language_standard_default\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_language_standard_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_standard_default}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["}\par
{\cf21 #if CXX_STD > 202002L}\par
  {\cf22 "23"}\par
{\cf21 #elif CXX_STD > 201703L}\par
  {\cf22 "20"}\par
{\cf21 #elif CXX_STD >= 201703L}\par
  {\cf22 "17"}\par
{\cf21 #elif CXX_STD >= 201402L}\par
  {\cf22 "14"}\par
{\cf21 #elif CXX_STD >= 201103L}\par
  {\cf22 "11"}\par
{\cf21 #else}\par
  {\cf22 "98"}\par
{\cf21 #endif}\par
{\cf22 "]"}\par
}
{
Definition at line {\b 804} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_platform\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_platform}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]"}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 783} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_simulate\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_simulate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]"}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 423} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_simulate_version\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_simulate_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_simulate_version[]}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
  SIMULATE_VERSION_MAJOR,\par
{\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
  {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
{\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
   {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
{\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
    {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
{\cf21 #   endif}\par
{\cf21 #  endif}\par
{\cf21 # endif}\par
  {\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 763} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_version\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_version[] = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 730} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_version_internal\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_version_internal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_version_internal}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
  {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
  COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 752} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v qnxnto\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:qnxnto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* qnxnto = "INFO" ":" "qnxnto[]"}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 427} of file {\b Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Motor/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp\par \pard\plain 
{\tc\tcl2 \v CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /* This source file must have a .cpp extension so that all C++ compilers}\par
00002 {\cf20    recognize the extension without flags.  Borland does not know .cxx for}\par
00003 {\cf20    example.  */}\par
00004 {\cf21 #ifndef __cplusplus}\par
00005 {\cf21 # error "A C compiler has been selected for C++."}\par
00006 {\cf21 #endif}\par
00007 \par
00008 {\cf21 #if !defined(__has_include)}\par
00009 {\cf20 /* If the compiler does not have __has_include, pretend the answer is}\par
00010 {\cf20    always no.  */}\par
00011 {\cf21 #  define __has_include(x) 0}\par
00012 {\cf21 #endif}\par
00013 \par
00014 \par
00015 {\cf20 /* Version number components: V=Version, R=Revision, P=Patch}\par
00016 {\cf20    Version date components:   YYYY=Year, MM=Month,   DD=Day  */}\par
00017 \par
00018 {\cf21 #if defined(__COMO__)}\par
00019 {\cf21 # define COMPILER_ID "Comeau"}\par
00020   {\cf20 /* __COMO_VERSION__ = VRR */}\par
00021 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__COMO_VERSION__ / 100)}\par
00022 {\cf21 # define COMPILER_VERSION_MINOR DEC(__COMO_VERSION__ % 100)}\par
00023 \par
00024 {\cf21 #elif defined(__INTEL_COMPILER) || defined(__ICC)}\par
00025 {\cf21 # define COMPILER_ID "Intel"}\par
00026 {\cf21 # if defined(_MSC_VER)}\par
00027 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00028 {\cf21 # endif}\par
00029 {\cf21 # if defined(__GNUC__)}\par
00030 {\cf21 #  define SIMULATE_ID "GNU"}\par
00031 {\cf21 # endif}\par
00032   {\cf20 /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,}\par
00033 {\cf20      except that a few beta releases use the old format with V=2021.  */}\par
00034 {\cf21 # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111}\par
00035 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)}\par
00036 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)}\par
00037 {\cf21 #  if defined(__INTEL_COMPILER_UPDATE)}\par
00038 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)}\par
00039 {\cf21 #  else}\par
00040 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)}\par
00041 {\cf21 #  endif}\par
00042 {\cf21 # else}\par
00043 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)}\par
00044 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)}\par
00045    {\cf20 /* The third version component from --version is an update index,}\par
00046 {\cf20       but no macro is provided for it.  */}\par
00047 {\cf21 #  define COMPILER_VERSION_PATCH DEC(0)}\par
00048 {\cf21 # endif}\par
00049 {\cf21 # if defined(__INTEL_COMPILER_BUILD_DATE)}\par
00050    {\cf20 /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */}\par
00051 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)}\par
00052 {\cf21 # endif}\par
00053 {\cf21 # if defined(_MSC_VER)}\par
00054    {\cf20 /* _MSC_VER = VVRR */}\par
00055 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00056 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00057 {\cf21 # endif}\par
00058 {\cf21 # if defined(__GNUC__)}\par
00059 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00060 {\cf21 # elif defined(__GNUG__)}\par
00061 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00062 {\cf21 # endif}\par
00063 {\cf21 # if defined(__GNUC_MINOR__)}\par
00064 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00065 {\cf21 # endif}\par
00066 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00067 {\cf21 #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00068 {\cf21 # endif}\par
00069 \par
00070 {\cf21 #elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)}\par
00071 {\cf21 # define COMPILER_ID "IntelLLVM"}\par
00072 {\cf21 #if defined(_MSC_VER)}\par
00073 {\cf21 # define SIMULATE_ID "MSVC"}\par
00074 {\cf21 #endif}\par
00075 {\cf21 #if defined(__GNUC__)}\par
00076 {\cf21 # define SIMULATE_ID "GNU"}\par
00077 {\cf21 #endif}\par
00078 {\cf20 /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and}\par
00079 {\cf20  * later.  Look for 6 digit vs. 8 digit version number to decide encoding.}\par
00080 {\cf20  * VVVV is no smaller than the current year when a version is released.}\par
00081 {\cf20  */}\par
00082 {\cf21 #if __INTEL_LLVM_COMPILER < 1000000L}\par
00083 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)}\par
00084 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)}\par
00085 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)}\par
00086 {\cf21 #else}\par
00087 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)}\par
00088 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)}\par
00089 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)}\par
00090 {\cf21 #endif}\par
00091 {\cf21 #if defined(_MSC_VER)}\par
00092   {\cf20 /* _MSC_VER = VVRR */}\par
00093 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00094 {\cf21 # define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00095 {\cf21 #endif}\par
00096 {\cf21 #if defined(__GNUC__)}\par
00097 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00098 {\cf21 #elif defined(__GNUG__)}\par
00099 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00100 {\cf21 #endif}\par
00101 {\cf21 #if defined(__GNUC_MINOR__)}\par
00102 {\cf21 # define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00103 {\cf21 #endif}\par
00104 {\cf21 #if defined(__GNUC_PATCHLEVEL__)}\par
00105 {\cf21 # define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00106 {\cf21 #endif}\par
00107 \par
00108 {\cf21 #elif defined(__PATHCC__)}\par
00109 {\cf21 # define COMPILER_ID "PathScale"}\par
00110 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PATHCC__)}\par
00111 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)}\par
00112 {\cf21 # if defined(__PATHCC_PATCHLEVEL__)}\par
00113 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)}\par
00114 {\cf21 # endif}\par
00115 \par
00116 {\cf21 #elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)}\par
00117 {\cf21 # define COMPILER_ID "Embarcadero"}\par
00118 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)}\par
00119 {\cf21 # define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)}\par
00120 {\cf21 # define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)}\par
00121 \par
00122 {\cf21 #elif defined(__BORLANDC__)}\par
00123 {\cf21 # define COMPILER_ID "Borland"}\par
00124   {\cf20 /* __BORLANDC__ = 0xVRR */}\par
00125 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)}\par
00126 {\cf21 # define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)}\par
00127 \par
00128 {\cf21 #elif defined(__WATCOMC__) && __WATCOMC__ < 1200}\par
00129 {\cf21 # define COMPILER_ID "Watcom"}\par
00130    {\cf20 /* __WATCOMC__ = VVRR */}\par
00131 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)}\par
00132 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00133 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00134 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00135 {\cf21 # endif}\par
00136 \par
00137 {\cf21 #elif defined(__WATCOMC__)}\par
00138 {\cf21 # define COMPILER_ID "OpenWatcom"}\par
00139    {\cf20 /* __WATCOMC__ = VVRP + 1100 */}\par
00140 {\cf21 # define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)}\par
00141 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00142 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00143 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00144 {\cf21 # endif}\par
00145 \par
00146 {\cf21 #elif defined(__SUNPRO_CC)}\par
00147 {\cf21 # define COMPILER_ID "SunPro"}\par
00148 {\cf21 # if __SUNPRO_CC >= 0x5100}\par
00149    {\cf20 /* __SUNPRO_CC = 0xVRRP */}\par
00150 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)}\par
00151 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)}\par
00152 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)}\par
00153 {\cf21 # else}\par
00154    {\cf20 /* __SUNPRO_CC = 0xVRP */}\par
00155 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)}\par
00156 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)}\par
00157 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)}\par
00158 {\cf21 # endif}\par
00159 \par
00160 {\cf21 #elif defined(__HP_aCC)}\par
00161 {\cf21 # define COMPILER_ID "HP"}\par
00162   {\cf20 /* __HP_aCC = VVRRPP */}\par
00163 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)}\par
00164 {\cf21 # define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)}\par
00165 {\cf21 # define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)}\par
00166 \par
00167 {\cf21 #elif defined(__DECCXX)}\par
00168 {\cf21 # define COMPILER_ID "Compaq"}\par
00169   {\cf20 /* __DECCXX_VER = VVRRTPPPP */}\par
00170 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)}\par
00171 {\cf21 # define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)}\par
00172 {\cf21 # define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)}\par
00173 \par
00174 {\cf21 #elif defined(__IBMCPP__) && defined(__COMPILER_VER__)}\par
00175 {\cf21 # define COMPILER_ID "zOS"}\par
00176   {\cf20 /* __IBMCPP__ = VRP */}\par
00177 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00178 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00179 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00180 \par
00181 {\cf21 #elif defined(__open_xl__) && defined(__clang__)}\par
00182 {\cf21 # define COMPILER_ID "IBMClang"}\par
00183 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)}\par
00184 {\cf21 # define COMPILER_VERSION_MINOR DEC(__open_xl_release__)}\par
00185 {\cf21 # define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)}\par
00186 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)}\par
00187 \par
00188 \par
00189 {\cf21 #elif defined(__ibmxl__) && defined(__clang__)}\par
00190 {\cf21 # define COMPILER_ID "XLClang"}\par
00191 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)}\par
00192 {\cf21 # define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)}\par
00193 {\cf21 # define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)}\par
00194 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)}\par
00195 \par
00196 \par
00197 {\cf21 #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800}\par
00198 {\cf21 # define COMPILER_ID "XL"}\par
00199   {\cf20 /* __IBMCPP__ = VRP */}\par
00200 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00201 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00202 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00203 \par
00204 {\cf21 #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800}\par
00205 {\cf21 # define COMPILER_ID "VisualAge"}\par
00206   {\cf20 /* __IBMCPP__ = VRP */}\par
00207 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00208 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00209 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00210 \par
00211 {\cf21 #elif defined(__NVCOMPILER)}\par
00212 {\cf21 # define COMPILER_ID "NVHPC"}\par
00213 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)}\par
00214 {\cf21 # define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)}\par
00215 {\cf21 # if defined(__NVCOMPILER_PATCHLEVEL__)}\par
00216 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)}\par
00217 {\cf21 # endif}\par
00218 \par
00219 {\cf21 #elif defined(__PGI)}\par
00220 {\cf21 # define COMPILER_ID "PGI"}\par
00221 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PGIC__)}\par
00222 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)}\par
00223 {\cf21 # if defined(__PGIC_PATCHLEVEL__)}\par
00224 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)}\par
00225 {\cf21 # endif}\par
00226 \par
00227 {\cf21 #elif defined(_CRAYC)}\par
00228 {\cf21 # define COMPILER_ID "Cray"}\par
00229 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)}\par
00230 {\cf21 # define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)}\par
00231 \par
00232 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00233 {\cf21 # define COMPILER_ID "TI"}\par
00234   {\cf20 /* __TI_COMPILER_VERSION__ = VVVRRRPPP */}\par
00235 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)}\par
00236 {\cf21 # define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)}\par
00237 {\cf21 # define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)}\par
00238 \par
00239 {\cf21 #elif defined(__CLANG_FUJITSU)}\par
00240 {\cf21 # define COMPILER_ID "FujitsuClang"}\par
00241 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00242 {\cf21 # define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00243 {\cf21 # define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00244 {\cf21 # define COMPILER_VERSION_INTERNAL_STR __clang_version__}\par
00245 \par
00246 \par
00247 {\cf21 #elif defined(__FUJITSU)}\par
00248 {\cf21 # define COMPILER_ID "Fujitsu"}\par
00249 {\cf21 # if defined(__FCC_version__)}\par
00250 {\cf21 #   define COMPILER_VERSION __FCC_version__}\par
00251 {\cf21 # elif defined(__FCC_major__)}\par
00252 {\cf21 #   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00253 {\cf21 #   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00254 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00255 {\cf21 # endif}\par
00256 {\cf21 # if defined(__fcc_version)}\par
00257 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)}\par
00258 {\cf21 # elif defined(__FCC_VERSION)}\par
00259 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)}\par
00260 {\cf21 # endif}\par
00261 \par
00262 \par
00263 {\cf21 #elif defined(__ghs__)}\par
00264 {\cf21 # define COMPILER_ID "GHS"}\par
00265 {\cf20 /* __GHS_VERSION_NUMBER = VVVVRP */}\par
00266 {\cf21 # ifdef __GHS_VERSION_NUMBER}\par
00267 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)}\par
00268 {\cf21 # define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)}\par
00269 {\cf21 # define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)}\par
00270 {\cf21 # endif}\par
00271 \par
00272 {\cf21 #elif defined(__TASKING__)}\par
00273 {\cf21 # define COMPILER_ID "Tasking"}\par
00274 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)}\par
00275 {\cf21   # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)}\par
00276 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__VERSION__)}\par
00277 \par
00278 {\cf21 #elif defined(__SCO_VERSION__)}\par
00279 {\cf21 # define COMPILER_ID "SCO"}\par
00280 \par
00281 {\cf21 #elif defined(__ARMCC_VERSION) && !defined(__clang__)}\par
00282 {\cf21 # define COMPILER_ID "ARMCC"}\par
00283 {\cf21 #if __ARMCC_VERSION >= 1000000}\par
00284   {\cf20 /* __ARMCC_VERSION = VRRPPPP */}\par
00285 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)}\par
00286 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)}\par
00287 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)}\par
00288 {\cf21 #else}\par
00289   {\cf20 /* __ARMCC_VERSION = VRPPPP */}\par
00290 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)}\par
00291 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)}\par
00292 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)}\par
00293 {\cf21 #endif}\par
00294 \par
00295 \par
00296 {\cf21 #elif defined(__clang__) && defined(__apple_build_version__)}\par
00297 {\cf21 # define COMPILER_ID "AppleClang"}\par
00298 {\cf21 # if defined(_MSC_VER)}\par
00299 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00300 {\cf21 # endif}\par
00301 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00302 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00303 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00304 {\cf21 # if defined(_MSC_VER)}\par
00305    {\cf20 /* _MSC_VER = VVRR */}\par
00306 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00307 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00308 {\cf21 # endif}\par
00309 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)}\par
00310 \par
00311 {\cf21 #elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)}\par
00312 {\cf21 # define COMPILER_ID "ARMClang"}\par
00313 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)}\par
00314 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)}\par
00315 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION     % 10000)}\par
00316 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)}\par
00317 \par
00318 {\cf21 #elif defined(__clang__)}\par
00319 {\cf21 # define COMPILER_ID "Clang"}\par
00320 {\cf21 # if defined(_MSC_VER)}\par
00321 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00322 {\cf21 # endif}\par
00323 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00324 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00325 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00326 {\cf21 # if defined(_MSC_VER)}\par
00327    {\cf20 /* _MSC_VER = VVRR */}\par
00328 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00329 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00330 {\cf21 # endif}\par
00331 \par
00332 {\cf21 #elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))}\par
00333 {\cf21 # define COMPILER_ID "LCC"}\par
00334 {\cf21 # define COMPILER_VERSION_MAJOR DEC(1)}\par
00335 {\cf21 # if defined(__LCC__)}\par
00336 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__LCC__- 100)}\par
00337 {\cf21 # endif}\par
00338 {\cf21 # if defined(__LCC_MINOR__)}\par
00339 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)}\par
00340 {\cf21 # endif}\par
00341 {\cf21 # if defined(__GNUC__) && defined(__GNUC_MINOR__)}\par
00342 {\cf21 #  define SIMULATE_ID "GNU"}\par
00343 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00344 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00345 {\cf21 #  if defined(__GNUC_PATCHLEVEL__)}\par
00346 {\cf21 #   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00347 {\cf21 #  endif}\par
00348 {\cf21 # endif}\par
00349 \par
00350 {\cf21 #elif defined(__GNUC__) || defined(__GNUG__)}\par
00351 {\cf21 # define COMPILER_ID "GNU"}\par
00352 {\cf21 # if defined(__GNUC__)}\par
00353 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)}\par
00354 {\cf21 # else}\par
00355 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)}\par
00356 {\cf21 # endif}\par
00357 {\cf21 # if defined(__GNUC_MINOR__)}\par
00358 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00359 {\cf21 # endif}\par
00360 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00361 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00362 {\cf21 # endif}\par
00363 \par
00364 {\cf21 #elif defined(_MSC_VER)}\par
00365 {\cf21 # define COMPILER_ID "MSVC"}\par
00366   {\cf20 /* _MSC_VER = VVRR */}\par
00367 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00368 {\cf21 # define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00369 {\cf21 # if defined(_MSC_FULL_VER)}\par
00370 {\cf21 #  if _MSC_VER >= 1400}\par
00371     {\cf20 /* _MSC_FULL_VER = VVRRPPPPP */}\par
00372 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)}\par
00373 {\cf21 #  else}\par
00374     {\cf20 /* _MSC_FULL_VER = VVRRPPPP */}\par
00375 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)}\par
00376 {\cf21 #  endif}\par
00377 {\cf21 # endif}\par
00378 {\cf21 # if defined(_MSC_BUILD)}\par
00379 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)}\par
00380 {\cf21 # endif}\par
00381 \par
00382 {\cf21 #elif defined(_ADI_COMPILER)}\par
00383 {\cf21 # define COMPILER_ID "ADSP"}\par
00384 {\cf21 #if defined(__VERSIONNUM__)}\par
00385   {\cf20 /* __VERSIONNUM__ = 0xVVRRPPTT */}\par
00386 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)}\par
00387 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)}\par
00388 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)}\par
00389 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)}\par
00390 {\cf21 #endif}\par
00391 \par
00392 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00393 {\cf21 # define COMPILER_ID "IAR"}\par
00394 {\cf21 # if defined(__VER__) && defined(__ICCARM__)}\par
00395 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)}\par
00396 {\cf21 #  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)}\par
00397 {\cf21 #  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)}\par
00398 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00399 {\cf21 # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))}\par
00400 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)}\par
00401 {\cf21 #  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))}\par
00402 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)}\par
00403 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00404 {\cf21 # endif}\par
00405 \par
00406 \par
00407 {\cf20 /* These compilers are either not known or too old to define an}\par
00408 {\cf20   identification macro.  Try to identify the platform and guess that}\par
00409 {\cf20   it is the native compiler.  */}\par
00410 {\cf21 #elif defined(__hpux) || defined(__hpua)}\par
00411 {\cf21 # define COMPILER_ID "HP"}\par
00412 \par
00413 {\cf21 #else }{\cf20 /* unknown compiler */}{\cf21 }\par
00414 {\cf21 # define COMPILER_ID ""}\par
00415 {\cf21 #endif}\par
00416 \par
00417 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00418 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00419 {\cf20    because some compilers will just produce instructions to fill the}\par
00420 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00421 {\cf18 char} {\cf17 const}* info_compiler = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler["} COMPILER_ID {\cf22 "]"};\par
00422 {\cf21 #ifdef SIMULATE_ID}\par
00423 {\cf18 char} {\cf17 const}* info_simulate = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "simulate["} SIMULATE_ID {\cf22 "]"};\par
00424 {\cf21 #endif}\par
00425 \par
00426 {\cf21 #ifdef __QNXNTO__}\par
00427 {\cf18 char} {\cf17 const}* qnxnto = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "qnxnto[]"};\par
00428 {\cf21 #endif}\par
00429 \par
00430 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00431 {\cf18 char} {\cf17 const} *info_cray = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_wrapper[CrayPrgEnv]"};\par
00432 {\cf21 #endif}\par
00433 \par
00434 {\cf21 #define STRINGIFY_HELPER(X) #X}\par
00435 {\cf21 #define STRINGIFY(X) STRINGIFY_HELPER(X)}\par
00436 \par
00437 {\cf20 /* Identify known platforms by name.  */}\par
00438 {\cf21 #if defined(__linux) || defined(__linux__) || defined(linux)}\par
00439 {\cf21 # define PLATFORM_ID "Linux"}\par
00440 \par
00441 {\cf21 #elif defined(__MSYS__)}\par
00442 {\cf21 # define PLATFORM_ID "MSYS"}\par
00443 \par
00444 {\cf21 #elif defined(__CYGWIN__)}\par
00445 {\cf21 # define PLATFORM_ID "Cygwin"}\par
00446 \par
00447 {\cf21 #elif defined(__MINGW32__)}\par
00448 {\cf21 # define PLATFORM_ID "MinGW"}\par
00449 \par
00450 {\cf21 #elif defined(__APPLE__)}\par
00451 {\cf21 # define PLATFORM_ID "Darwin"}\par
00452 \par
00453 {\cf21 #elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)}\par
00454 {\cf21 # define PLATFORM_ID "Windows"}\par
00455 \par
00456 {\cf21 #elif defined(__FreeBSD__) || defined(__FreeBSD)}\par
00457 {\cf21 # define PLATFORM_ID "FreeBSD"}\par
00458 \par
00459 {\cf21 #elif defined(__NetBSD__) || defined(__NetBSD)}\par
00460 {\cf21 # define PLATFORM_ID "NetBSD"}\par
00461 \par
00462 {\cf21 #elif defined(__OpenBSD__) || defined(__OPENBSD)}\par
00463 {\cf21 # define PLATFORM_ID "OpenBSD"}\par
00464 \par
00465 {\cf21 #elif defined(__sun) || defined(sun)}\par
00466 {\cf21 # define PLATFORM_ID "SunOS"}\par
00467 \par
00468 {\cf21 #elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)}\par
00469 {\cf21 # define PLATFORM_ID "AIX"}\par
00470 \par
00471 {\cf21 #elif defined(__hpux) || defined(__hpux__)}\par
00472 {\cf21 # define PLATFORM_ID "HP-UX"}\par
00473 \par
00474 {\cf21 #elif defined(__HAIKU__)}\par
00475 {\cf21 # define PLATFORM_ID "Haiku"}\par
00476 \par
00477 {\cf21 #elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)}\par
00478 {\cf21 # define PLATFORM_ID "BeOS"}\par
00479 \par
00480 {\cf21 #elif defined(__QNX__) || defined(__QNXNTO__)}\par
00481 {\cf21 # define PLATFORM_ID "QNX"}\par
00482 \par
00483 {\cf21 #elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)}\par
00484 {\cf21 # define PLATFORM_ID "Tru64"}\par
00485 \par
00486 {\cf21 #elif defined(__riscos) || defined(__riscos__)}\par
00487 {\cf21 # define PLATFORM_ID "RISCos"}\par
00488 \par
00489 {\cf21 #elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)}\par
00490 {\cf21 # define PLATFORM_ID "SINIX"}\par
00491 \par
00492 {\cf21 #elif defined(__UNIX_SV__)}\par
00493 {\cf21 # define PLATFORM_ID "UNIX_SV"}\par
00494 \par
00495 {\cf21 #elif defined(__bsdos__)}\par
00496 {\cf21 # define PLATFORM_ID "BSDOS"}\par
00497 \par
00498 {\cf21 #elif defined(_MPRAS) || defined(MPRAS)}\par
00499 {\cf21 # define PLATFORM_ID "MP-RAS"}\par
00500 \par
00501 {\cf21 #elif defined(__osf) || defined(__osf__)}\par
00502 {\cf21 # define PLATFORM_ID "OSF1"}\par
00503 \par
00504 {\cf21 #elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)}\par
00505 {\cf21 # define PLATFORM_ID "SCO_SV"}\par
00506 \par
00507 {\cf21 #elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)}\par
00508 {\cf21 # define PLATFORM_ID "ULTRIX"}\par
00509 \par
00510 {\cf21 #elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)}\par
00511 {\cf21 # define PLATFORM_ID "Xenix"}\par
00512 \par
00513 {\cf21 #elif defined(__WATCOMC__)}\par
00514 {\cf21 # if defined(__LINUX__)}\par
00515 {\cf21 #  define PLATFORM_ID "Linux"}\par
00516 \par
00517 {\cf21 # elif defined(__DOS__)}\par
00518 {\cf21 #  define PLATFORM_ID "DOS"}\par
00519 \par
00520 {\cf21 # elif defined(__OS2__)}\par
00521 {\cf21 #  define PLATFORM_ID "OS2"}\par
00522 \par
00523 {\cf21 # elif defined(__WINDOWS__)}\par
00524 {\cf21 #  define PLATFORM_ID "Windows3x"}\par
00525 \par
00526 {\cf21 # elif defined(__VXWORKS__)}\par
00527 {\cf21 #  define PLATFORM_ID "VxWorks"}\par
00528 \par
00529 {\cf21 # else }{\cf20 /* unknown platform */}{\cf21 }\par
00530 {\cf21 #  define PLATFORM_ID}\par
00531 {\cf21 # endif}\par
00532 \par
00533 {\cf21 #elif defined(__INTEGRITY)}\par
00534 {\cf21 # if defined(INT_178B)}\par
00535 {\cf21 #  define PLATFORM_ID "Integrity178"}\par
00536 \par
00537 {\cf21 # else }{\cf20 /* regular Integrity */}{\cf21 }\par
00538 {\cf21 #  define PLATFORM_ID "Integrity"}\par
00539 {\cf21 # endif}\par
00540 \par
00541 {\cf21 # elif defined(_ADI_COMPILER)}\par
00542 {\cf21 #  define PLATFORM_ID "ADSP"}\par
00543 \par
00544 {\cf21 #else }{\cf20 /* unknown platform */}{\cf21 }\par
00545 {\cf21 # define PLATFORM_ID}\par
00546 \par
00547 {\cf21 #endif}\par
00548 \par
00549 {\cf20 /* For windows compilers MSVC and Intel we can determine}\par
00550 {\cf20    the architecture of the compiler being used.  This is because}\par
00551 {\cf20    the compilers do not have flags that can change the architecture,}\par
00552 {\cf20    but rather depend on which compiler is being used}\par
00553 {\cf20 */}\par
00554 {\cf21 #if defined(_WIN32) && defined(_MSC_VER)}\par
00555 {\cf21 # if defined(_M_IA64)}\par
00556 {\cf21 #  define ARCHITECTURE_ID "IA64"}\par
00557 \par
00558 {\cf21 # elif defined(_M_ARM64EC)}\par
00559 {\cf21 #  define ARCHITECTURE_ID "ARM64EC"}\par
00560 \par
00561 {\cf21 # elif defined(_M_X64) || defined(_M_AMD64)}\par
00562 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00563 \par
00564 {\cf21 # elif defined(_M_IX86)}\par
00565 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00566 \par
00567 {\cf21 # elif defined(_M_ARM64)}\par
00568 {\cf21 #  define ARCHITECTURE_ID "ARM64"}\par
00569 \par
00570 {\cf21 # elif defined(_M_ARM)}\par
00571 {\cf21 #  if _M_ARM == 4}\par
00572 {\cf21 #   define ARCHITECTURE_ID "ARMV4I"}\par
00573 {\cf21 #  elif _M_ARM == 5}\par
00574 {\cf21 #   define ARCHITECTURE_ID "ARMV5I"}\par
00575 {\cf21 #  else}\par
00576 {\cf21 #   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)}\par
00577 {\cf21 #  endif}\par
00578 \par
00579 {\cf21 # elif defined(_M_MIPS)}\par
00580 {\cf21 #  define ARCHITECTURE_ID "MIPS"}\par
00581 \par
00582 {\cf21 # elif defined(_M_SH)}\par
00583 {\cf21 #  define ARCHITECTURE_ID "SHx"}\par
00584 \par
00585 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00586 {\cf21 #  define ARCHITECTURE_ID ""}\par
00587 {\cf21 # endif}\par
00588 \par
00589 {\cf21 #elif defined(__WATCOMC__)}\par
00590 {\cf21 # if defined(_M_I86)}\par
00591 {\cf21 #  define ARCHITECTURE_ID "I86"}\par
00592 \par
00593 {\cf21 # elif defined(_M_IX86)}\par
00594 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00595 \par
00596 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00597 {\cf21 #  define ARCHITECTURE_ID ""}\par
00598 {\cf21 # endif}\par
00599 \par
00600 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00601 {\cf21 # if defined(__ICCARM__)}\par
00602 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00603 \par
00604 {\cf21 # elif defined(__ICCRX__)}\par
00605 {\cf21 #  define ARCHITECTURE_ID "RX"}\par
00606 \par
00607 {\cf21 # elif defined(__ICCRH850__)}\par
00608 {\cf21 #  define ARCHITECTURE_ID "RH850"}\par
00609 \par
00610 {\cf21 # elif defined(__ICCRL78__)}\par
00611 {\cf21 #  define ARCHITECTURE_ID "RL78"}\par
00612 \par
00613 {\cf21 # elif defined(__ICCRISCV__)}\par
00614 {\cf21 #  define ARCHITECTURE_ID "RISCV"}\par
00615 \par
00616 {\cf21 # elif defined(__ICCAVR__)}\par
00617 {\cf21 #  define ARCHITECTURE_ID "AVR"}\par
00618 \par
00619 {\cf21 # elif defined(__ICC430__)}\par
00620 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00621 \par
00622 {\cf21 # elif defined(__ICCV850__)}\par
00623 {\cf21 #  define ARCHITECTURE_ID "V850"}\par
00624 \par
00625 {\cf21 # elif defined(__ICC8051__)}\par
00626 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00627 \par
00628 {\cf21 # elif defined(__ICCSTM8__)}\par
00629 {\cf21 #  define ARCHITECTURE_ID "STM8"}\par
00630 \par
00631 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00632 {\cf21 #  define ARCHITECTURE_ID ""}\par
00633 {\cf21 # endif}\par
00634 \par
00635 {\cf21 #elif defined(__ghs__)}\par
00636 {\cf21 # if defined(__PPC64__)}\par
00637 {\cf21 #  define ARCHITECTURE_ID "PPC64"}\par
00638 \par
00639 {\cf21 # elif defined(__ppc__)}\par
00640 {\cf21 #  define ARCHITECTURE_ID "PPC"}\par
00641 \par
00642 {\cf21 # elif defined(__ARM__)}\par
00643 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00644 \par
00645 {\cf21 # elif defined(__x86_64__)}\par
00646 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00647 \par
00648 {\cf21 # elif defined(__i386__)}\par
00649 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00650 \par
00651 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00652 {\cf21 #  define ARCHITECTURE_ID ""}\par
00653 {\cf21 # endif}\par
00654 \par
00655 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00656 {\cf21 # if defined(__TI_ARM__)}\par
00657 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00658 \par
00659 {\cf21 # elif defined(__MSP430__)}\par
00660 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00661 \par
00662 {\cf21 # elif defined(__TMS320C28XX__)}\par
00663 {\cf21 #  define ARCHITECTURE_ID "TMS320C28x"}\par
00664 \par
00665 {\cf21 # elif defined(__TMS320C6X__) || defined(_TMS320C6X)}\par
00666 {\cf21 #  define ARCHITECTURE_ID "TMS320C6x"}\par
00667 \par
00668 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00669 {\cf21 #  define ARCHITECTURE_ID ""}\par
00670 {\cf21 # endif}\par
00671 \par
00672 {\cf21 # elif defined(__ADSPSHARC__)}\par
00673 {\cf21 #  define ARCHITECTURE_ID "SHARC"}\par
00674 \par
00675 {\cf21 # elif defined(__ADSPBLACKFIN__)}\par
00676 {\cf21 #  define ARCHITECTURE_ID "Blackfin"}\par
00677 \par
00678 {\cf21 #elif defined(__TASKING__)}\par
00679 \par
00680 {\cf21 # if defined(__CTC__) || defined(__CPTC__)}\par
00681 {\cf21 #  define ARCHITECTURE_ID "TriCore"}\par
00682 \par
00683 {\cf21 # elif defined(__CMCS__)}\par
00684 {\cf21 #  define ARCHITECTURE_ID "MCS"}\par
00685 \par
00686 {\cf21 # elif defined(__CARM__)}\par
00687 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00688 \par
00689 {\cf21 # elif defined(__CARC__)}\par
00690 {\cf21 #  define ARCHITECTURE_ID "ARC"}\par
00691 \par
00692 {\cf21 # elif defined(__C51__)}\par
00693 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00694 \par
00695 {\cf21 # elif defined(__CPCP__)}\par
00696 {\cf21 #  define ARCHITECTURE_ID "PCP"}\par
00697 \par
00698 {\cf21 # else}\par
00699 {\cf21 #  define ARCHITECTURE_ID ""}\par
00700 {\cf21 # endif}\par
00701 \par
00702 {\cf21 #else}\par
00703 {\cf21 #  define ARCHITECTURE_ID}\par
00704 {\cf21 #endif}\par
00705 \par
00706 {\cf20 /* Convert integer to decimal digit literals.  */}\par
00707 {\cf21 #define DEC(n)                   \\}\par
00708 {\cf21   ('0' + (((n) / 10000000)%10)), \\}\par
00709 {\cf21   ('0' + (((n) / 1000000)%10)),  \\}\par
00710 {\cf21   ('0' + (((n) / 100000)%10)),   \\}\par
00711 {\cf21   ('0' + (((n) / 10000)%10)),    \\}\par
00712 {\cf21   ('0' + (((n) / 1000)%10)),     \\}\par
00713 {\cf21   ('0' + (((n) / 100)%10)),      \\}\par
00714 {\cf21   ('0' + (((n) / 10)%10)),       \\}\par
00715 {\cf21   ('0' +  ((n) % 10))}\par
00716 \par
00717 {\cf20 /* Convert integer to hex digit literals.  */}\par
00718 {\cf21 #define HEX(n)             \\}\par
00719 {\cf21   ('0' + ((n)>>28 & 0xF)), \\}\par
00720 {\cf21   ('0' + ((n)>>24 & 0xF)), \\}\par
00721 {\cf21   ('0' + ((n)>>20 & 0xF)), \\}\par
00722 {\cf21   ('0' + ((n)>>16 & 0xF)), \\}\par
00723 {\cf21   ('0' + ((n)>>12 & 0xF)), \\}\par
00724 {\cf21   ('0' + ((n)>>8  & 0xF)), \\}\par
00725 {\cf21   ('0' + ((n)>>4  & 0xF)), \\}\par
00726 {\cf21   ('0' + ((n)     & 0xF))}\par
00727 \par
00728 {\cf20 /* Construct a string literal encoding the version number. */}\par
00729 {\cf21 #ifdef COMPILER_VERSION}\par
00730 {\cf18 char} {\cf17 const}* info_version = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version["} COMPILER_VERSION {\cf22 "]"};\par
00731 \par
00732 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00733 {\cf21 #elif defined(COMPILER_VERSION_MAJOR)}\par
00734 {\cf18 char} {\cf17 const} info_version[] = \{\par
00735   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00736   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00737   COMPILER_VERSION_MAJOR,\par
00738 {\cf21 # ifdef COMPILER_VERSION_MINOR}\par
00739   {\cf23 '.'}, COMPILER_VERSION_MINOR,\par
00740 {\cf21 #  ifdef COMPILER_VERSION_PATCH}\par
00741    {\cf23 '.'}, COMPILER_VERSION_PATCH,\par
00742 {\cf21 #   ifdef COMPILER_VERSION_TWEAK}\par
00743     {\cf23 '.'}, COMPILER_VERSION_TWEAK,\par
00744 {\cf21 #   endif}\par
00745 {\cf21 #  endif}\par
00746 {\cf21 # endif}\par
00747   {\cf23 ']'},{\cf23 '\\0'}\};\par
00748 {\cf21 #endif}\par
00749 \par
00750 {\cf20 /* Construct a string literal encoding the internal version number. */}\par
00751 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00752 {\cf18 char} {\cf17 const} info_version_internal[] = \{\par
00753   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00754   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
00755   {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
00756   COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\};\par
00757 {\cf21 #elif defined(COMPILER_VERSION_INTERNAL_STR)}\par
00758 {\cf18 char} {\cf17 const}* info_version_internal = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version_internal["} COMPILER_VERSION_INTERNAL_STR {\cf22 "]"};\par
00759 {\cf21 #endif}\par
00760 \par
00761 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00762 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00763 {\cf18 char} {\cf17 const} info_simulate_version[] = \{\par
00764   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00765   {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00766   SIMULATE_VERSION_MAJOR,\par
00767 {\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
00768   {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
00769 {\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
00770    {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
00771 {\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
00772     {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
00773 {\cf21 #   endif}\par
00774 {\cf21 #  endif}\par
00775 {\cf21 # endif}\par
00776   {\cf23 ']'},{\cf23 '\\0'}\};\par
00777 {\cf21 #endif}\par
00778 \par
00779 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00780 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00781 {\cf20    because some compilers will just produce instructions to fill the}\par
00782 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00783 {\cf18 char} {\cf17 const}* info_platform = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "platform["} PLATFORM_ID {\cf22 "]"};\par
00784 {\cf18 char} {\cf17 const}* info_arch = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "arch["} ARCHITECTURE_ID {\cf22 "]"};\par
00785 \par
00786 \par
00787 \par
00788 {\cf21 #if defined(__INTEL_COMPILER) && defined(_MSVC_LANG) && _MSVC_LANG < 201403L}\par
00789 {\cf21 #  if defined(__INTEL_CXX11_MODE__)}\par
00790 {\cf21 #    if defined(__cpp_aggregate_nsdmi)}\par
00791 {\cf21 #      define CXX_STD 201402L}\par
00792 {\cf21 #    else}\par
00793 {\cf21 #      define CXX_STD 201103L}\par
00794 {\cf21 #    endif}\par
00795 {\cf21 #  else}\par
00796 {\cf21 #    define CXX_STD 199711L}\par
00797 {\cf21 #  endif}\par
00798 {\cf21 #elif defined(_MSC_VER) && defined(_MSVC_LANG)}\par
00799 {\cf21 #  define CXX_STD _MSVC_LANG}\par
00800 {\cf21 #else}\par
00801 {\cf21 #  define CXX_STD __cplusplus}\par
00802 {\cf21 #endif}\par
00803 \par
00804 {\cf17 const} {\cf18 char}* info_language_standard_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["}\par
00805 {\cf21 #if CXX_STD > 202002L}\par
00806   {\cf22 "23"}\par
00807 {\cf21 #elif CXX_STD > 201703L}\par
00808   {\cf22 "20"}\par
00809 {\cf21 #elif CXX_STD >= 201703L}\par
00810   {\cf22 "17"}\par
00811 {\cf21 #elif CXX_STD >= 201402L}\par
00812   {\cf22 "14"}\par
00813 {\cf21 #elif CXX_STD >= 201103L}\par
00814   {\cf22 "11"}\par
00815 {\cf21 #else}\par
00816   {\cf22 "98"}\par
00817 {\cf21 #endif}\par
00818 {\cf22 "]"};\par
00819 \par
00820 {\cf17 const} {\cf18 char}* info_language_extensions_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
00821 {\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
00822 {\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
00823 {\cf21   !defined(__STRICT_ANSI__)}\par
00824   {\cf22 "ON"}\par
00825 {\cf21 #else}\par
00826   {\cf22 "OFF"}\par
00827 {\cf21 #endif}\par
00828 {\cf22 "]"};\par
00829 \par
00830 {\cf20 /*--------------------------------------------------------------------------*/}\par
00831 \par
00832 {\cf18 int} main({\cf18 int} argc, {\cf18 char}* argv[])\par
00833 \{\par
00834   {\cf18 int} require = 0;\par
00835   require += info_compiler[argc];\par
00836   require += info_platform[argc];\par
00837   require += info_arch[argc];\par
00838 {\cf21 #ifdef COMPILER_VERSION_MAJOR}\par
00839   require += info_version[argc];\par
00840 {\cf21 #endif}\par
00841 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00842   require += info_version_internal[argc];\par
00843 {\cf21 #endif}\par
00844 {\cf21 #ifdef SIMULATE_ID}\par
00845   require += info_simulate[argc];\par
00846 {\cf21 #endif}\par
00847 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00848   require += info_simulate_version[argc];\par
00849 {\cf21 #endif}\par
00850 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00851   require += info_cray[argc];\par
00852 {\cf21 #endif}\par
00853   require += info_language_standard_default[argc];\par
00854   require += info_language_extensions_default[argc];\par
00855   (void)argv;\par
00856   {\cf19 return} require;\par
00857 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp}
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_compiler} = "INFO" ":" "compiler[" COMPILER_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_simulate} = "INFO" ":" "simulate[" SIMULATE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b qnxnto} = "INFO" ":" "qnxnto[]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_cray} = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_version} = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_version_internal} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const {\b info_simulate_version} []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_platform} = "INFO" ":" "platform[" PLATFORM_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_arch} = "INFO" ":" "arch[" ARCHITECTURE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_standard_default}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_extensions_default}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 832} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v info_arch\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_arch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]"}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 784} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_compiler\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_compiler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]"}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 421} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_cray\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_cray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]"}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 431} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_language_extensions_default\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_language_extensions_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_extensions_default}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
{\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
{\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
{\cf21   !defined(__STRICT_ANSI__)}\par
  {\cf22 "ON"}\par
{\cf21 #else}\par
  {\cf22 "OFF"}\par
{\cf21 #endif}\par
{\cf22 "]"}\par
}
{
Definition at line {\b 820} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_language_standard_default\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_language_standard_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_standard_default}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["}\par
{\cf21 #if CXX_STD > 202002L}\par
  {\cf22 "23"}\par
{\cf21 #elif CXX_STD > 201703L}\par
  {\cf22 "20"}\par
{\cf21 #elif CXX_STD >= 201703L}\par
  {\cf22 "17"}\par
{\cf21 #elif CXX_STD >= 201402L}\par
  {\cf22 "14"}\par
{\cf21 #elif CXX_STD >= 201103L}\par
  {\cf22 "11"}\par
{\cf21 #else}\par
  {\cf22 "98"}\par
{\cf21 #endif}\par
{\cf22 "]"}\par
}
{
Definition at line {\b 804} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_platform\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_platform}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]"}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 783} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_simulate\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_simulate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]"}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 423} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_simulate_version\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_simulate_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_simulate_version[]}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
  SIMULATE_VERSION_MAJOR,\par
{\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
  {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
{\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
   {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
{\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
    {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
{\cf21 #   endif}\par
{\cf21 #  endif}\par
{\cf21 # endif}\par
  {\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 763} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_version\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const info_version[] = "INFO" ":" "compiler_version[" COMPILER_VERSION "]"}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 730} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_version_internal\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_version_internal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_version_internal}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \{\par
  {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
  {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
  {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
  COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\}\par
}
{
Definition at line {\b 752} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v qnxnto\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:qnxnto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* qnxnto = "INFO" ":" "qnxnto[]"}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 427} of file {\b Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Temperatura/build/CMakeFiles/3.25.2/CompilerIdCXX/CMakeCXXCompilerId.cpp\par \pard\plain 
{\tc\tcl2 \v CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /* This source file must have a .cpp extension so that all C++ compilers}\par
00002 {\cf20    recognize the extension without flags.  Borland does not know .cxx for}\par
00003 {\cf20    example.  */}\par
00004 {\cf21 #ifndef __cplusplus}\par
00005 {\cf21 # error "A C compiler has been selected for C++."}\par
00006 {\cf21 #endif}\par
00007 \par
00008 {\cf21 #if !defined(__has_include)}\par
00009 {\cf20 /* If the compiler does not have __has_include, pretend the answer is}\par
00010 {\cf20    always no.  */}\par
00011 {\cf21 #  define __has_include(x) 0}\par
00012 {\cf21 #endif}\par
00013 \par
00014 \par
00015 {\cf20 /* Version number components: V=Version, R=Revision, P=Patch}\par
00016 {\cf20    Version date components:   YYYY=Year, MM=Month,   DD=Day  */}\par
00017 \par
00018 {\cf21 #if defined(__COMO__)}\par
00019 {\cf21 # define COMPILER_ID "Comeau"}\par
00020   {\cf20 /* __COMO_VERSION__ = VRR */}\par
00021 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__COMO_VERSION__ / 100)}\par
00022 {\cf21 # define COMPILER_VERSION_MINOR DEC(__COMO_VERSION__ % 100)}\par
00023 \par
00024 {\cf21 #elif defined(__INTEL_COMPILER) || defined(__ICC)}\par
00025 {\cf21 # define COMPILER_ID "Intel"}\par
00026 {\cf21 # if defined(_MSC_VER)}\par
00027 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00028 {\cf21 # endif}\par
00029 {\cf21 # if defined(__GNUC__)}\par
00030 {\cf21 #  define SIMULATE_ID "GNU"}\par
00031 {\cf21 # endif}\par
00032   {\cf20 /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,}\par
00033 {\cf20      except that a few beta releases use the old format with V=2021.  */}\par
00034 {\cf21 # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111}\par
00035 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)}\par
00036 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)}\par
00037 {\cf21 #  if defined(__INTEL_COMPILER_UPDATE)}\par
00038 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)}\par
00039 {\cf21 #  else}\par
00040 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)}\par
00041 {\cf21 #  endif}\par
00042 {\cf21 # else}\par
00043 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)}\par
00044 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)}\par
00045    {\cf20 /* The third version component from --version is an update index,}\par
00046 {\cf20       but no macro is provided for it.  */}\par
00047 {\cf21 #  define COMPILER_VERSION_PATCH DEC(0)}\par
00048 {\cf21 # endif}\par
00049 {\cf21 # if defined(__INTEL_COMPILER_BUILD_DATE)}\par
00050    {\cf20 /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */}\par
00051 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)}\par
00052 {\cf21 # endif}\par
00053 {\cf21 # if defined(_MSC_VER)}\par
00054    {\cf20 /* _MSC_VER = VVRR */}\par
00055 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00056 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00057 {\cf21 # endif}\par
00058 {\cf21 # if defined(__GNUC__)}\par
00059 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00060 {\cf21 # elif defined(__GNUG__)}\par
00061 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00062 {\cf21 # endif}\par
00063 {\cf21 # if defined(__GNUC_MINOR__)}\par
00064 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00065 {\cf21 # endif}\par
00066 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00067 {\cf21 #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00068 {\cf21 # endif}\par
00069 \par
00070 {\cf21 #elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)}\par
00071 {\cf21 # define COMPILER_ID "IntelLLVM"}\par
00072 {\cf21 #if defined(_MSC_VER)}\par
00073 {\cf21 # define SIMULATE_ID "MSVC"}\par
00074 {\cf21 #endif}\par
00075 {\cf21 #if defined(__GNUC__)}\par
00076 {\cf21 # define SIMULATE_ID "GNU"}\par
00077 {\cf21 #endif}\par
00078 {\cf20 /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and}\par
00079 {\cf20  * later.  Look for 6 digit vs. 8 digit version number to decide encoding.}\par
00080 {\cf20  * VVVV is no smaller than the current year when a version is released.}\par
00081 {\cf20  */}\par
00082 {\cf21 #if __INTEL_LLVM_COMPILER < 1000000L}\par
00083 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)}\par
00084 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)}\par
00085 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)}\par
00086 {\cf21 #else}\par
00087 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)}\par
00088 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)}\par
00089 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)}\par
00090 {\cf21 #endif}\par
00091 {\cf21 #if defined(_MSC_VER)}\par
00092   {\cf20 /* _MSC_VER = VVRR */}\par
00093 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00094 {\cf21 # define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00095 {\cf21 #endif}\par
00096 {\cf21 #if defined(__GNUC__)}\par
00097 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00098 {\cf21 #elif defined(__GNUG__)}\par
00099 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00100 {\cf21 #endif}\par
00101 {\cf21 #if defined(__GNUC_MINOR__)}\par
00102 {\cf21 # define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00103 {\cf21 #endif}\par
00104 {\cf21 #if defined(__GNUC_PATCHLEVEL__)}\par
00105 {\cf21 # define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00106 {\cf21 #endif}\par
00107 \par
00108 {\cf21 #elif defined(__PATHCC__)}\par
00109 {\cf21 # define COMPILER_ID "PathScale"}\par
00110 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PATHCC__)}\par
00111 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)}\par
00112 {\cf21 # if defined(__PATHCC_PATCHLEVEL__)}\par
00113 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)}\par
00114 {\cf21 # endif}\par
00115 \par
00116 {\cf21 #elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)}\par
00117 {\cf21 # define COMPILER_ID "Embarcadero"}\par
00118 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)}\par
00119 {\cf21 # define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)}\par
00120 {\cf21 # define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)}\par
00121 \par
00122 {\cf21 #elif defined(__BORLANDC__)}\par
00123 {\cf21 # define COMPILER_ID "Borland"}\par
00124   {\cf20 /* __BORLANDC__ = 0xVRR */}\par
00125 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)}\par
00126 {\cf21 # define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)}\par
00127 \par
00128 {\cf21 #elif defined(__WATCOMC__) && __WATCOMC__ < 1200}\par
00129 {\cf21 # define COMPILER_ID "Watcom"}\par
00130    {\cf20 /* __WATCOMC__ = VVRR */}\par
00131 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)}\par
00132 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00133 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00134 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00135 {\cf21 # endif}\par
00136 \par
00137 {\cf21 #elif defined(__WATCOMC__)}\par
00138 {\cf21 # define COMPILER_ID "OpenWatcom"}\par
00139    {\cf20 /* __WATCOMC__ = VVRP + 1100 */}\par
00140 {\cf21 # define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)}\par
00141 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00142 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00143 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00144 {\cf21 # endif}\par
00145 \par
00146 {\cf21 #elif defined(__SUNPRO_CC)}\par
00147 {\cf21 # define COMPILER_ID "SunPro"}\par
00148 {\cf21 # if __SUNPRO_CC >= 0x5100}\par
00149    {\cf20 /* __SUNPRO_CC = 0xVRRP */}\par
00150 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)}\par
00151 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)}\par
00152 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)}\par
00153 {\cf21 # else}\par
00154    {\cf20 /* __SUNPRO_CC = 0xVRP */}\par
00155 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)}\par
00156 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)}\par
00157 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)}\par
00158 {\cf21 # endif}\par
00159 \par
00160 {\cf21 #elif defined(__HP_aCC)}\par
00161 {\cf21 # define COMPILER_ID "HP"}\par
00162   {\cf20 /* __HP_aCC = VVRRPP */}\par
00163 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)}\par
00164 {\cf21 # define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)}\par
00165 {\cf21 # define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)}\par
00166 \par
00167 {\cf21 #elif defined(__DECCXX)}\par
00168 {\cf21 # define COMPILER_ID "Compaq"}\par
00169   {\cf20 /* __DECCXX_VER = VVRRTPPPP */}\par
00170 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)}\par
00171 {\cf21 # define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)}\par
00172 {\cf21 # define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)}\par
00173 \par
00174 {\cf21 #elif defined(__IBMCPP__) && defined(__COMPILER_VER__)}\par
00175 {\cf21 # define COMPILER_ID "zOS"}\par
00176   {\cf20 /* __IBMCPP__ = VRP */}\par
00177 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00178 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00179 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00180 \par
00181 {\cf21 #elif defined(__open_xl__) && defined(__clang__)}\par
00182 {\cf21 # define COMPILER_ID "IBMClang"}\par
00183 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)}\par
00184 {\cf21 # define COMPILER_VERSION_MINOR DEC(__open_xl_release__)}\par
00185 {\cf21 # define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)}\par
00186 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)}\par
00187 \par
00188 \par
00189 {\cf21 #elif defined(__ibmxl__) && defined(__clang__)}\par
00190 {\cf21 # define COMPILER_ID "XLClang"}\par
00191 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)}\par
00192 {\cf21 # define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)}\par
00193 {\cf21 # define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)}\par
00194 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)}\par
00195 \par
00196 \par
00197 {\cf21 #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800}\par
00198 {\cf21 # define COMPILER_ID "XL"}\par
00199   {\cf20 /* __IBMCPP__ = VRP */}\par
00200 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00201 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00202 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00203 \par
00204 {\cf21 #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800}\par
00205 {\cf21 # define COMPILER_ID "VisualAge"}\par
00206   {\cf20 /* __IBMCPP__ = VRP */}\par
00207 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00208 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00209 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00210 \par
00211 {\cf21 #elif defined(__NVCOMPILER)}\par
00212 {\cf21 # define COMPILER_ID "NVHPC"}\par
00213 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)}\par
00214 {\cf21 # define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)}\par
00215 {\cf21 # if defined(__NVCOMPILER_PATCHLEVEL__)}\par
00216 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)}\par
00217 {\cf21 # endif}\par
00218 \par
00219 {\cf21 #elif defined(__PGI)}\par
00220 {\cf21 # define COMPILER_ID "PGI"}\par
00221 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PGIC__)}\par
00222 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)}\par
00223 {\cf21 # if defined(__PGIC_PATCHLEVEL__)}\par
00224 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)}\par
00225 {\cf21 # endif}\par
00226 \par
00227 {\cf21 #elif defined(_CRAYC)}\par
00228 {\cf21 # define COMPILER_ID "Cray"}\par
00229 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)}\par
00230 {\cf21 # define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)}\par
00231 \par
00232 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00233 {\cf21 # define COMPILER_ID "TI"}\par
00234   {\cf20 /* __TI_COMPILER_VERSION__ = VVVRRRPPP */}\par
00235 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)}\par
00236 {\cf21 # define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)}\par
00237 {\cf21 # define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)}\par
00238 \par
00239 {\cf21 #elif defined(__CLANG_FUJITSU)}\par
00240 {\cf21 # define COMPILER_ID "FujitsuClang"}\par
00241 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00242 {\cf21 # define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00243 {\cf21 # define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00244 {\cf21 # define COMPILER_VERSION_INTERNAL_STR __clang_version__}\par
00245 \par
00246 \par
00247 {\cf21 #elif defined(__FUJITSU)}\par
00248 {\cf21 # define COMPILER_ID "Fujitsu"}\par
00249 {\cf21 # if defined(__FCC_version__)}\par
00250 {\cf21 #   define COMPILER_VERSION __FCC_version__}\par
00251 {\cf21 # elif defined(__FCC_major__)}\par
00252 {\cf21 #   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00253 {\cf21 #   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00254 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00255 {\cf21 # endif}\par
00256 {\cf21 # if defined(__fcc_version)}\par
00257 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)}\par
00258 {\cf21 # elif defined(__FCC_VERSION)}\par
00259 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)}\par
00260 {\cf21 # endif}\par
00261 \par
00262 \par
00263 {\cf21 #elif defined(__ghs__)}\par
00264 {\cf21 # define COMPILER_ID "GHS"}\par
00265 {\cf20 /* __GHS_VERSION_NUMBER = VVVVRP */}\par
00266 {\cf21 # ifdef __GHS_VERSION_NUMBER}\par
00267 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)}\par
00268 {\cf21 # define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)}\par
00269 {\cf21 # define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)}\par
00270 {\cf21 # endif}\par
00271 \par
00272 {\cf21 #elif defined(__TASKING__)}\par
00273 {\cf21 # define COMPILER_ID "Tasking"}\par
00274 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)}\par
00275 {\cf21   # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)}\par
00276 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__VERSION__)}\par
00277 \par
00278 {\cf21 #elif defined(__SCO_VERSION__)}\par
00279 {\cf21 # define COMPILER_ID "SCO"}\par
00280 \par
00281 {\cf21 #elif defined(__ARMCC_VERSION) && !defined(__clang__)}\par
00282 {\cf21 # define COMPILER_ID "ARMCC"}\par
00283 {\cf21 #if __ARMCC_VERSION >= 1000000}\par
00284   {\cf20 /* __ARMCC_VERSION = VRRPPPP */}\par
00285 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)}\par
00286 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)}\par
00287 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)}\par
00288 {\cf21 #else}\par
00289   {\cf20 /* __ARMCC_VERSION = VRPPPP */}\par
00290 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)}\par
00291 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)}\par
00292 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)}\par
00293 {\cf21 #endif}\par
00294 \par
00295 \par
00296 {\cf21 #elif defined(__clang__) && defined(__apple_build_version__)}\par
00297 {\cf21 # define COMPILER_ID "AppleClang"}\par
00298 {\cf21 # if defined(_MSC_VER)}\par
00299 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00300 {\cf21 # endif}\par
00301 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00302 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00303 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00304 {\cf21 # if defined(_MSC_VER)}\par
00305    {\cf20 /* _MSC_VER = VVRR */}\par
00306 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00307 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00308 {\cf21 # endif}\par
00309 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)}\par
00310 \par
00311 {\cf21 #elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)}\par
00312 {\cf21 # define COMPILER_ID "ARMClang"}\par
00313 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)}\par
00314 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)}\par
00315 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION     % 10000)}\par
00316 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)}\par
00317 \par
00318 {\cf21 #elif defined(__clang__)}\par
00319 {\cf21 # define COMPILER_ID "Clang"}\par
00320 {\cf21 # if defined(_MSC_VER)}\par
00321 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00322 {\cf21 # endif}\par
00323 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00324 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00325 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00326 {\cf21 # if defined(_MSC_VER)}\par
00327    {\cf20 /* _MSC_VER = VVRR */}\par
00328 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00329 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00330 {\cf21 # endif}\par
00331 \par
00332 {\cf21 #elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))}\par
00333 {\cf21 # define COMPILER_ID "LCC"}\par
00334 {\cf21 # define COMPILER_VERSION_MAJOR DEC(1)}\par
00335 {\cf21 # if defined(__LCC__)}\par
00336 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__LCC__- 100)}\par
00337 {\cf21 # endif}\par
00338 {\cf21 # if defined(__LCC_MINOR__)}\par
00339 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)}\par
00340 {\cf21 # endif}\par
00341 {\cf21 # if defined(__GNUC__) && defined(__GNUC_MINOR__)}\par
00342 {\cf21 #  define SIMULATE_ID "GNU"}\par
00343 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00344 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00345 {\cf21 #  if defined(__GNUC_PATCHLEVEL__)}\par
00346 {\cf21 #   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00347 {\cf21 #  endif}\par
00348 {\cf21 # endif}\par
00349 \par
00350 {\cf21 #elif defined(__GNUC__) || defined(__GNUG__)}\par
00351 {\cf21 # define COMPILER_ID "GNU"}\par
00352 {\cf21 # if defined(__GNUC__)}\par
00353 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)}\par
00354 {\cf21 # else}\par
00355 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)}\par
00356 {\cf21 # endif}\par
00357 {\cf21 # if defined(__GNUC_MINOR__)}\par
00358 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00359 {\cf21 # endif}\par
00360 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00361 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00362 {\cf21 # endif}\par
00363 \par
00364 {\cf21 #elif defined(_MSC_VER)}\par
00365 {\cf21 # define COMPILER_ID "MSVC"}\par
00366   {\cf20 /* _MSC_VER = VVRR */}\par
00367 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00368 {\cf21 # define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00369 {\cf21 # if defined(_MSC_FULL_VER)}\par
00370 {\cf21 #  if _MSC_VER >= 1400}\par
00371     {\cf20 /* _MSC_FULL_VER = VVRRPPPPP */}\par
00372 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)}\par
00373 {\cf21 #  else}\par
00374     {\cf20 /* _MSC_FULL_VER = VVRRPPPP */}\par
00375 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)}\par
00376 {\cf21 #  endif}\par
00377 {\cf21 # endif}\par
00378 {\cf21 # if defined(_MSC_BUILD)}\par
00379 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)}\par
00380 {\cf21 # endif}\par
00381 \par
00382 {\cf21 #elif defined(_ADI_COMPILER)}\par
00383 {\cf21 # define COMPILER_ID "ADSP"}\par
00384 {\cf21 #if defined(__VERSIONNUM__)}\par
00385   {\cf20 /* __VERSIONNUM__ = 0xVVRRPPTT */}\par
00386 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)}\par
00387 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)}\par
00388 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)}\par
00389 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)}\par
00390 {\cf21 #endif}\par
00391 \par
00392 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00393 {\cf21 # define COMPILER_ID "IAR"}\par
00394 {\cf21 # if defined(__VER__) && defined(__ICCARM__)}\par
00395 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)}\par
00396 {\cf21 #  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)}\par
00397 {\cf21 #  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)}\par
00398 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00399 {\cf21 # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))}\par
00400 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)}\par
00401 {\cf21 #  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))}\par
00402 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)}\par
00403 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00404 {\cf21 # endif}\par
00405 \par
00406 \par
00407 {\cf20 /* These compilers are either not known or too old to define an}\par
00408 {\cf20   identification macro.  Try to identify the platform and guess that}\par
00409 {\cf20   it is the native compiler.  */}\par
00410 {\cf21 #elif defined(__hpux) || defined(__hpua)}\par
00411 {\cf21 # define COMPILER_ID "HP"}\par
00412 \par
00413 {\cf21 #else }{\cf20 /* unknown compiler */}{\cf21 }\par
00414 {\cf21 # define COMPILER_ID ""}\par
00415 {\cf21 #endif}\par
00416 \par
00417 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00418 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00419 {\cf20    because some compilers will just produce instructions to fill the}\par
00420 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00421 {\cf18 char} {\cf17 const}* info_compiler = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler["} COMPILER_ID {\cf22 "]"};\par
00422 {\cf21 #ifdef SIMULATE_ID}\par
00423 {\cf18 char} {\cf17 const}* info_simulate = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "simulate["} SIMULATE_ID {\cf22 "]"};\par
00424 {\cf21 #endif}\par
00425 \par
00426 {\cf21 #ifdef __QNXNTO__}\par
00427 {\cf18 char} {\cf17 const}* qnxnto = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "qnxnto[]"};\par
00428 {\cf21 #endif}\par
00429 \par
00430 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00431 {\cf18 char} {\cf17 const} *info_cray = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_wrapper[CrayPrgEnv]"};\par
00432 {\cf21 #endif}\par
00433 \par
00434 {\cf21 #define STRINGIFY_HELPER(X) #X}\par
00435 {\cf21 #define STRINGIFY(X) STRINGIFY_HELPER(X)}\par
00436 \par
00437 {\cf20 /* Identify known platforms by name.  */}\par
00438 {\cf21 #if defined(__linux) || defined(__linux__) || defined(linux)}\par
00439 {\cf21 # define PLATFORM_ID "Linux"}\par
00440 \par
00441 {\cf21 #elif defined(__MSYS__)}\par
00442 {\cf21 # define PLATFORM_ID "MSYS"}\par
00443 \par
00444 {\cf21 #elif defined(__CYGWIN__)}\par
00445 {\cf21 # define PLATFORM_ID "Cygwin"}\par
00446 \par
00447 {\cf21 #elif defined(__MINGW32__)}\par
00448 {\cf21 # define PLATFORM_ID "MinGW"}\par
00449 \par
00450 {\cf21 #elif defined(__APPLE__)}\par
00451 {\cf21 # define PLATFORM_ID "Darwin"}\par
00452 \par
00453 {\cf21 #elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)}\par
00454 {\cf21 # define PLATFORM_ID "Windows"}\par
00455 \par
00456 {\cf21 #elif defined(__FreeBSD__) || defined(__FreeBSD)}\par
00457 {\cf21 # define PLATFORM_ID "FreeBSD"}\par
00458 \par
00459 {\cf21 #elif defined(__NetBSD__) || defined(__NetBSD)}\par
00460 {\cf21 # define PLATFORM_ID "NetBSD"}\par
00461 \par
00462 {\cf21 #elif defined(__OpenBSD__) || defined(__OPENBSD)}\par
00463 {\cf21 # define PLATFORM_ID "OpenBSD"}\par
00464 \par
00465 {\cf21 #elif defined(__sun) || defined(sun)}\par
00466 {\cf21 # define PLATFORM_ID "SunOS"}\par
00467 \par
00468 {\cf21 #elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)}\par
00469 {\cf21 # define PLATFORM_ID "AIX"}\par
00470 \par
00471 {\cf21 #elif defined(__hpux) || defined(__hpux__)}\par
00472 {\cf21 # define PLATFORM_ID "HP-UX"}\par
00473 \par
00474 {\cf21 #elif defined(__HAIKU__)}\par
00475 {\cf21 # define PLATFORM_ID "Haiku"}\par
00476 \par
00477 {\cf21 #elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)}\par
00478 {\cf21 # define PLATFORM_ID "BeOS"}\par
00479 \par
00480 {\cf21 #elif defined(__QNX__) || defined(__QNXNTO__)}\par
00481 {\cf21 # define PLATFORM_ID "QNX"}\par
00482 \par
00483 {\cf21 #elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)}\par
00484 {\cf21 # define PLATFORM_ID "Tru64"}\par
00485 \par
00486 {\cf21 #elif defined(__riscos) || defined(__riscos__)}\par
00487 {\cf21 # define PLATFORM_ID "RISCos"}\par
00488 \par
00489 {\cf21 #elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)}\par
00490 {\cf21 # define PLATFORM_ID "SINIX"}\par
00491 \par
00492 {\cf21 #elif defined(__UNIX_SV__)}\par
00493 {\cf21 # define PLATFORM_ID "UNIX_SV"}\par
00494 \par
00495 {\cf21 #elif defined(__bsdos__)}\par
00496 {\cf21 # define PLATFORM_ID "BSDOS"}\par
00497 \par
00498 {\cf21 #elif defined(_MPRAS) || defined(MPRAS)}\par
00499 {\cf21 # define PLATFORM_ID "MP-RAS"}\par
00500 \par
00501 {\cf21 #elif defined(__osf) || defined(__osf__)}\par
00502 {\cf21 # define PLATFORM_ID "OSF1"}\par
00503 \par
00504 {\cf21 #elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)}\par
00505 {\cf21 # define PLATFORM_ID "SCO_SV"}\par
00506 \par
00507 {\cf21 #elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)}\par
00508 {\cf21 # define PLATFORM_ID "ULTRIX"}\par
00509 \par
00510 {\cf21 #elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)}\par
00511 {\cf21 # define PLATFORM_ID "Xenix"}\par
00512 \par
00513 {\cf21 #elif defined(__WATCOMC__)}\par
00514 {\cf21 # if defined(__LINUX__)}\par
00515 {\cf21 #  define PLATFORM_ID "Linux"}\par
00516 \par
00517 {\cf21 # elif defined(__DOS__)}\par
00518 {\cf21 #  define PLATFORM_ID "DOS"}\par
00519 \par
00520 {\cf21 # elif defined(__OS2__)}\par
00521 {\cf21 #  define PLATFORM_ID "OS2"}\par
00522 \par
00523 {\cf21 # elif defined(__WINDOWS__)}\par
00524 {\cf21 #  define PLATFORM_ID "Windows3x"}\par
00525 \par
00526 {\cf21 # elif defined(__VXWORKS__)}\par
00527 {\cf21 #  define PLATFORM_ID "VxWorks"}\par
00528 \par
00529 {\cf21 # else }{\cf20 /* unknown platform */}{\cf21 }\par
00530 {\cf21 #  define PLATFORM_ID}\par
00531 {\cf21 # endif}\par
00532 \par
00533 {\cf21 #elif defined(__INTEGRITY)}\par
00534 {\cf21 # if defined(INT_178B)}\par
00535 {\cf21 #  define PLATFORM_ID "Integrity178"}\par
00536 \par
00537 {\cf21 # else }{\cf20 /* regular Integrity */}{\cf21 }\par
00538 {\cf21 #  define PLATFORM_ID "Integrity"}\par
00539 {\cf21 # endif}\par
00540 \par
00541 {\cf21 # elif defined(_ADI_COMPILER)}\par
00542 {\cf21 #  define PLATFORM_ID "ADSP"}\par
00543 \par
00544 {\cf21 #else }{\cf20 /* unknown platform */}{\cf21 }\par
00545 {\cf21 # define PLATFORM_ID}\par
00546 \par
00547 {\cf21 #endif}\par
00548 \par
00549 {\cf20 /* For windows compilers MSVC and Intel we can determine}\par
00550 {\cf20    the architecture of the compiler being used.  This is because}\par
00551 {\cf20    the compilers do not have flags that can change the architecture,}\par
00552 {\cf20    but rather depend on which compiler is being used}\par
00553 {\cf20 */}\par
00554 {\cf21 #if defined(_WIN32) && defined(_MSC_VER)}\par
00555 {\cf21 # if defined(_M_IA64)}\par
00556 {\cf21 #  define ARCHITECTURE_ID "IA64"}\par
00557 \par
00558 {\cf21 # elif defined(_M_ARM64EC)}\par
00559 {\cf21 #  define ARCHITECTURE_ID "ARM64EC"}\par
00560 \par
00561 {\cf21 # elif defined(_M_X64) || defined(_M_AMD64)}\par
00562 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00563 \par
00564 {\cf21 # elif defined(_M_IX86)}\par
00565 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00566 \par
00567 {\cf21 # elif defined(_M_ARM64)}\par
00568 {\cf21 #  define ARCHITECTURE_ID "ARM64"}\par
00569 \par
00570 {\cf21 # elif defined(_M_ARM)}\par
00571 {\cf21 #  if _M_ARM == 4}\par
00572 {\cf21 #   define ARCHITECTURE_ID "ARMV4I"}\par
00573 {\cf21 #  elif _M_ARM == 5}\par
00574 {\cf21 #   define ARCHITECTURE_ID "ARMV5I"}\par
00575 {\cf21 #  else}\par
00576 {\cf21 #   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)}\par
00577 {\cf21 #  endif}\par
00578 \par
00579 {\cf21 # elif defined(_M_MIPS)}\par
00580 {\cf21 #  define ARCHITECTURE_ID "MIPS"}\par
00581 \par
00582 {\cf21 # elif defined(_M_SH)}\par
00583 {\cf21 #  define ARCHITECTURE_ID "SHx"}\par
00584 \par
00585 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00586 {\cf21 #  define ARCHITECTURE_ID ""}\par
00587 {\cf21 # endif}\par
00588 \par
00589 {\cf21 #elif defined(__WATCOMC__)}\par
00590 {\cf21 # if defined(_M_I86)}\par
00591 {\cf21 #  define ARCHITECTURE_ID "I86"}\par
00592 \par
00593 {\cf21 # elif defined(_M_IX86)}\par
00594 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00595 \par
00596 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00597 {\cf21 #  define ARCHITECTURE_ID ""}\par
00598 {\cf21 # endif}\par
00599 \par
00600 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00601 {\cf21 # if defined(__ICCARM__)}\par
00602 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00603 \par
00604 {\cf21 # elif defined(__ICCRX__)}\par
00605 {\cf21 #  define ARCHITECTURE_ID "RX"}\par
00606 \par
00607 {\cf21 # elif defined(__ICCRH850__)}\par
00608 {\cf21 #  define ARCHITECTURE_ID "RH850"}\par
00609 \par
00610 {\cf21 # elif defined(__ICCRL78__)}\par
00611 {\cf21 #  define ARCHITECTURE_ID "RL78"}\par
00612 \par
00613 {\cf21 # elif defined(__ICCRISCV__)}\par
00614 {\cf21 #  define ARCHITECTURE_ID "RISCV"}\par
00615 \par
00616 {\cf21 # elif defined(__ICCAVR__)}\par
00617 {\cf21 #  define ARCHITECTURE_ID "AVR"}\par
00618 \par
00619 {\cf21 # elif defined(__ICC430__)}\par
00620 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00621 \par
00622 {\cf21 # elif defined(__ICCV850__)}\par
00623 {\cf21 #  define ARCHITECTURE_ID "V850"}\par
00624 \par
00625 {\cf21 # elif defined(__ICC8051__)}\par
00626 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00627 \par
00628 {\cf21 # elif defined(__ICCSTM8__)}\par
00629 {\cf21 #  define ARCHITECTURE_ID "STM8"}\par
00630 \par
00631 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00632 {\cf21 #  define ARCHITECTURE_ID ""}\par
00633 {\cf21 # endif}\par
00634 \par
00635 {\cf21 #elif defined(__ghs__)}\par
00636 {\cf21 # if defined(__PPC64__)}\par
00637 {\cf21 #  define ARCHITECTURE_ID "PPC64"}\par
00638 \par
00639 {\cf21 # elif defined(__ppc__)}\par
00640 {\cf21 #  define ARCHITECTURE_ID "PPC"}\par
00641 \par
00642 {\cf21 # elif defined(__ARM__)}\par
00643 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00644 \par
00645 {\cf21 # elif defined(__x86_64__)}\par
00646 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00647 \par
00648 {\cf21 # elif defined(__i386__)}\par
00649 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00650 \par
00651 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00652 {\cf21 #  define ARCHITECTURE_ID ""}\par
00653 {\cf21 # endif}\par
00654 \par
00655 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00656 {\cf21 # if defined(__TI_ARM__)}\par
00657 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00658 \par
00659 {\cf21 # elif defined(__MSP430__)}\par
00660 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00661 \par
00662 {\cf21 # elif defined(__TMS320C28XX__)}\par
00663 {\cf21 #  define ARCHITECTURE_ID "TMS320C28x"}\par
00664 \par
00665 {\cf21 # elif defined(__TMS320C6X__) || defined(_TMS320C6X)}\par
00666 {\cf21 #  define ARCHITECTURE_ID "TMS320C6x"}\par
00667 \par
00668 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00669 {\cf21 #  define ARCHITECTURE_ID ""}\par
00670 {\cf21 # endif}\par
00671 \par
00672 {\cf21 # elif defined(__ADSPSHARC__)}\par
00673 {\cf21 #  define ARCHITECTURE_ID "SHARC"}\par
00674 \par
00675 {\cf21 # elif defined(__ADSPBLACKFIN__)}\par
00676 {\cf21 #  define ARCHITECTURE_ID "Blackfin"}\par
00677 \par
00678 {\cf21 #elif defined(__TASKING__)}\par
00679 \par
00680 {\cf21 # if defined(__CTC__) || defined(__CPTC__)}\par
00681 {\cf21 #  define ARCHITECTURE_ID "TriCore"}\par
00682 \par
00683 {\cf21 # elif defined(__CMCS__)}\par
00684 {\cf21 #  define ARCHITECTURE_ID "MCS"}\par
00685 \par
00686 {\cf21 # elif defined(__CARM__)}\par
00687 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00688 \par
00689 {\cf21 # elif defined(__CARC__)}\par
00690 {\cf21 #  define ARCHITECTURE_ID "ARC"}\par
00691 \par
00692 {\cf21 # elif defined(__C51__)}\par
00693 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00694 \par
00695 {\cf21 # elif defined(__CPCP__)}\par
00696 {\cf21 #  define ARCHITECTURE_ID "PCP"}\par
00697 \par
00698 {\cf21 # else}\par
00699 {\cf21 #  define ARCHITECTURE_ID ""}\par
00700 {\cf21 # endif}\par
00701 \par
00702 {\cf21 #else}\par
00703 {\cf21 #  define ARCHITECTURE_ID}\par
00704 {\cf21 #endif}\par
00705 \par
00706 {\cf20 /* Convert integer to decimal digit literals.  */}\par
00707 {\cf21 #define DEC(n)                   \\}\par
00708 {\cf21   ('0' + (((n) / 10000000)%10)), \\}\par
00709 {\cf21   ('0' + (((n) / 1000000)%10)),  \\}\par
00710 {\cf21   ('0' + (((n) / 100000)%10)),   \\}\par
00711 {\cf21   ('0' + (((n) / 10000)%10)),    \\}\par
00712 {\cf21   ('0' + (((n) / 1000)%10)),     \\}\par
00713 {\cf21   ('0' + (((n) / 100)%10)),      \\}\par
00714 {\cf21   ('0' + (((n) / 10)%10)),       \\}\par
00715 {\cf21   ('0' +  ((n) % 10))}\par
00716 \par
00717 {\cf20 /* Convert integer to hex digit literals.  */}\par
00718 {\cf21 #define HEX(n)             \\}\par
00719 {\cf21   ('0' + ((n)>>28 & 0xF)), \\}\par
00720 {\cf21   ('0' + ((n)>>24 & 0xF)), \\}\par
00721 {\cf21   ('0' + ((n)>>20 & 0xF)), \\}\par
00722 {\cf21   ('0' + ((n)>>16 & 0xF)), \\}\par
00723 {\cf21   ('0' + ((n)>>12 & 0xF)), \\}\par
00724 {\cf21   ('0' + ((n)>>8  & 0xF)), \\}\par
00725 {\cf21   ('0' + ((n)>>4  & 0xF)), \\}\par
00726 {\cf21   ('0' + ((n)     & 0xF))}\par
00727 \par
00728 {\cf20 /* Construct a string literal encoding the version number. */}\par
00729 {\cf21 #ifdef COMPILER_VERSION}\par
00730 {\cf18 char} {\cf17 const}* info_version = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version["} COMPILER_VERSION {\cf22 "]"};\par
00731 \par
00732 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00733 {\cf21 #elif defined(COMPILER_VERSION_MAJOR)}\par
00734 {\cf18 char} {\cf17 const} info_version[] = \{\par
00735   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00736   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00737   COMPILER_VERSION_MAJOR,\par
00738 {\cf21 # ifdef COMPILER_VERSION_MINOR}\par
00739   {\cf23 '.'}, COMPILER_VERSION_MINOR,\par
00740 {\cf21 #  ifdef COMPILER_VERSION_PATCH}\par
00741    {\cf23 '.'}, COMPILER_VERSION_PATCH,\par
00742 {\cf21 #   ifdef COMPILER_VERSION_TWEAK}\par
00743     {\cf23 '.'}, COMPILER_VERSION_TWEAK,\par
00744 {\cf21 #   endif}\par
00745 {\cf21 #  endif}\par
00746 {\cf21 # endif}\par
00747   {\cf23 ']'},{\cf23 '\\0'}\};\par
00748 {\cf21 #endif}\par
00749 \par
00750 {\cf20 /* Construct a string literal encoding the internal version number. */}\par
00751 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00752 {\cf18 char} {\cf17 const} info_version_internal[] = \{\par
00753   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00754   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
00755   {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
00756   COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\};\par
00757 {\cf21 #elif defined(COMPILER_VERSION_INTERNAL_STR)}\par
00758 {\cf18 char} {\cf17 const}* info_version_internal = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version_internal["} COMPILER_VERSION_INTERNAL_STR {\cf22 "]"};\par
00759 {\cf21 #endif}\par
00760 \par
00761 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00762 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00763 {\cf18 char} {\cf17 const} info_simulate_version[] = \{\par
00764   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00765   {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00766   SIMULATE_VERSION_MAJOR,\par
00767 {\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
00768   {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
00769 {\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
00770    {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
00771 {\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
00772     {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
00773 {\cf21 #   endif}\par
00774 {\cf21 #  endif}\par
00775 {\cf21 # endif}\par
00776   {\cf23 ']'},{\cf23 '\\0'}\};\par
00777 {\cf21 #endif}\par
00778 \par
00779 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00780 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00781 {\cf20    because some compilers will just produce instructions to fill the}\par
00782 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00783 {\cf18 char} {\cf17 const}* info_platform = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "platform["} PLATFORM_ID {\cf22 "]"};\par
00784 {\cf18 char} {\cf17 const}* info_arch = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "arch["} ARCHITECTURE_ID {\cf22 "]"};\par
00785 \par
00786 \par
00787 \par
00788 {\cf21 #if defined(__INTEL_COMPILER) && defined(_MSVC_LANG) && _MSVC_LANG < 201403L}\par
00789 {\cf21 #  if defined(__INTEL_CXX11_MODE__)}\par
00790 {\cf21 #    if defined(__cpp_aggregate_nsdmi)}\par
00791 {\cf21 #      define CXX_STD 201402L}\par
00792 {\cf21 #    else}\par
00793 {\cf21 #      define CXX_STD 201103L}\par
00794 {\cf21 #    endif}\par
00795 {\cf21 #  else}\par
00796 {\cf21 #    define CXX_STD 199711L}\par
00797 {\cf21 #  endif}\par
00798 {\cf21 #elif defined(_MSC_VER) && defined(_MSVC_LANG)}\par
00799 {\cf21 #  define CXX_STD _MSVC_LANG}\par
00800 {\cf21 #else}\par
00801 {\cf21 #  define CXX_STD __cplusplus}\par
00802 {\cf21 #endif}\par
00803 \par
00804 {\cf17 const} {\cf18 char}* info_language_standard_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["}\par
00805 {\cf21 #if CXX_STD > 202002L}\par
00806   {\cf22 "23"}\par
00807 {\cf21 #elif CXX_STD > 201703L}\par
00808   {\cf22 "20"}\par
00809 {\cf21 #elif CXX_STD >= 201703L}\par
00810   {\cf22 "17"}\par
00811 {\cf21 #elif CXX_STD >= 201402L}\par
00812   {\cf22 "14"}\par
00813 {\cf21 #elif CXX_STD >= 201103L}\par
00814   {\cf22 "11"}\par
00815 {\cf21 #else}\par
00816   {\cf22 "98"}\par
00817 {\cf21 #endif}\par
00818 {\cf22 "]"};\par
00819 \par
00820 {\cf17 const} {\cf18 char}* info_language_extensions_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
00821 {\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
00822 {\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
00823 {\cf21   !defined(__STRICT_ANSI__)}\par
00824   {\cf22 "ON"}\par
00825 {\cf21 #else}\par
00826   {\cf22 "OFF"}\par
00827 {\cf21 #endif}\par
00828 {\cf22 "]"};\par
00829 \par
00830 {\cf20 /*--------------------------------------------------------------------------*/}\par
00831 \par
00832 {\cf18 int} main({\cf18 int} argc, {\cf18 char}* argv[])\par
00833 \{\par
00834   {\cf18 int} require = 0;\par
00835   require += info_compiler[argc];\par
00836   require += info_platform[argc];\par
00837   require += info_arch[argc];\par
00838 {\cf21 #ifdef COMPILER_VERSION_MAJOR}\par
00839   require += info_version[argc];\par
00840 {\cf21 #endif}\par
00841 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00842   require += info_version_internal[argc];\par
00843 {\cf21 #endif}\par
00844 {\cf21 #ifdef SIMULATE_ID}\par
00845   require += info_simulate[argc];\par
00846 {\cf21 #endif}\par
00847 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00848   require += info_simulate_version[argc];\par
00849 {\cf21 #endif}\par
00850 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00851   require += info_cray[argc];\par
00852 {\cf21 #endif}\par
00853   require += info_language_standard_default[argc];\par
00854   require += info_language_extensions_default[argc];\par
00855   (void)argv;\par
00856   {\cf19 return} require;\par
00857 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
build/generated/pico_base/pico/config_autogen.h File Reference\par \pard\plain 
{\tc\tcl2 \v config_autogen.h}
{\xe \v config_autogen.h}
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
build/generated/pico_base/pico/config_autogen.h\par \pard\plain 
{\tc\tcl2 \v config_autogen.h}
{\xe \v config_autogen.h}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // AUTOGENERATED FROM PICO_CONFIG_HEADER_FILES and then PICO_<PLATFORM>_CONFIG_HEADER_FILES}\par
00002 {\cf20 // DO NOT EDIT!}\par
00003 \par
00004 \par
00005 {\cf20 // based on PICO_CONFIG_HEADER_FILES:}\par
00006 \par
00007 {\cf21 #include "C:/Program Files/Raspberry Pi/Pico SDK v1.5.1/pico-sdk/src/boards/include/boards/pico_w.h"}\par
00008 \par
00009 {\cf20 // based on PICO_RP2040_CONFIG_HEADER_FILES:}\par
00010 \par
00011 {\cf21 #include "C:/Program Files/Raspberry Pi/Pico SDK v1.5.1/pico-sdk/src/rp2_common/cmsis/include/cmsis/rename_exceptions.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Codigo_Final/Bombero/build/generated/pico_base/pico/config_autogen.h File Reference\par \pard\plain 
{\tc\tcl2 \v config_autogen.h}
{\xe \v config_autogen.h}
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Codigo_Final/Bombero/build/generated/pico_base/pico/config_autogen.h\par \pard\plain 
{\tc\tcl2 \v config_autogen.h}
{\xe \v config_autogen.h}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // AUTOGENERATED FROM PICO_CONFIG_HEADER_FILES and then PICO_<PLATFORM>_CONFIG_HEADER_FILES}\par
00002 {\cf20 // DO NOT EDIT!}\par
00003 \par
00004 \par
00005 {\cf20 // based on PICO_CONFIG_HEADER_FILES:}\par
00006 \par
00007 {\cf21 #include "C:/Program Files/Raspberry Pi/Pico SDK v1.5.1/pico-sdk/src/boards/include/boards/pico_w.h"}\par
00008 \par
00009 {\cf20 // based on PICO_RP2040_CONFIG_HEADER_FILES:}\par
00010 \par
00011 {\cf21 #include "C:/Program Files/Raspberry Pi/Pico SDK v1.5.1/pico-sdk/src/rp2_common/cmsis/include/cmsis/rename_exceptions.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Motor/build/generated/pico_base/pico/config_autogen.h File Reference\par \pard\plain 
{\tc\tcl2 \v config_autogen.h}
{\xe \v config_autogen.h}
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Motor/build/generated/pico_base/pico/config_autogen.h\par \pard\plain 
{\tc\tcl2 \v config_autogen.h}
{\xe \v config_autogen.h}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // AUTOGENERATED FROM PICO_CONFIG_HEADER_FILES and then PICO_<PLATFORM>_CONFIG_HEADER_FILES}\par
00002 {\cf20 // DO NOT EDIT!}\par
00003 \par
00004 \par
00005 {\cf20 // based on PICO_CONFIG_HEADER_FILES:}\par
00006 \par
00007 {\cf21 #include "C:/Program Files/Raspberry Pi/Pico SDK v1.5.1/pico-sdk/src/boards/include/boards/pico_w.h"}\par
00008 \par
00009 {\cf20 // based on PICO_RP2040_CONFIG_HEADER_FILES:}\par
00010 \par
00011 {\cf21 #include "C:/Program Files/Raspberry Pi/Pico SDK v1.5.1/pico-sdk/src/rp2_common/cmsis/include/cmsis/rename_exceptions.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Temperatura/build/generated/pico_base/pico/config_autogen.h File Reference\par \pard\plain 
{\tc\tcl2 \v config_autogen.h}
{\xe \v config_autogen.h}
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Temperatura/build/generated/pico_base/pico/config_autogen.h\par \pard\plain 
{\tc\tcl2 \v config_autogen.h}
{\xe \v config_autogen.h}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // AUTOGENERATED FROM PICO_CONFIG_HEADER_FILES and then PICO_<PLATFORM>_CONFIG_HEADER_FILES}\par
00002 {\cf20 // DO NOT EDIT!}\par
00003 \par
00004 \par
00005 {\cf20 // based on PICO_CONFIG_HEADER_FILES:}\par
00006 \par
00007 {\cf21 #include "C:/Program Files/Raspberry Pi/Pico SDK v1.5.1/pico-sdk/src/boards/include/boards/pico.h"}\par
00008 \par
00009 {\cf20 // based on PICO_RP2040_CONFIG_HEADER_FILES:}\par
00010 \par
00011 {\cf21 #include "C:/Program Files/Raspberry Pi/Pico SDK v1.5.1/pico-sdk/src/rp2_common/cmsis/include/cmsis/rename_exceptions.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
build/generated/pico_base/pico/version.h File Reference\par \pard\plain 
{\tc\tcl2 \v version.h}
{\xe \v version.h}
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
build/generated/pico_base/pico/version.h\par \pard\plain 
{\tc\tcl2 \v version.h}
{\xe \v version.h}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /*}\par
00002 {\cf20  * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.}\par
00003 {\cf20  *}\par
00004 {\cf20  * SPDX-License-Identifier: BSD-3-Clause}\par
00005 {\cf20  */}\par
00006 \par
00007 {\cf20 // ---------------------------------------}\par
00008 {\cf20 // THIS FILE IS AUTOGENERATED; DO NOT EDIT}\par
00009 {\cf20 // ---------------------------------------}\par
00010 \par
00011 {\cf21 #ifndef _PICO_VERSION_H}\par
00012 {\cf21 #define _PICO_VERSION_H}\par
00013 \par
00014 {\cf21 #define PICO_SDK_VERSION_MAJOR    1}\par
00015 {\cf21 #define PICO_SDK_VERSION_MINOR    5}\par
00016 {\cf21 #define PICO_SDK_VERSION_REVISION 1}\par
00017 {\cf21 #define PICO_SDK_VERSION_STRING   "1.5.1"}\par
00018 \par
00019 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Codigo_Final/Bombero/build/generated/pico_base/pico/version.h File Reference\par \pard\plain 
{\tc\tcl2 \v version.h}
{\xe \v version.h}
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Codigo_Final/Bombero/build/generated/pico_base/pico/version.h\par \pard\plain 
{\tc\tcl2 \v version.h}
{\xe \v version.h}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /*}\par
00002 {\cf20  * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.}\par
00003 {\cf20  *}\par
00004 {\cf20  * SPDX-License-Identifier: BSD-3-Clause}\par
00005 {\cf20  */}\par
00006 \par
00007 {\cf20 // ---------------------------------------}\par
00008 {\cf20 // THIS FILE IS AUTOGENERATED; DO NOT EDIT}\par
00009 {\cf20 // ---------------------------------------}\par
00010 \par
00011 {\cf21 #ifndef _PICO_VERSION_H}\par
00012 {\cf21 #define _PICO_VERSION_H}\par
00013 \par
00014 {\cf21 #define PICO_SDK_VERSION_MAJOR    1}\par
00015 {\cf21 #define PICO_SDK_VERSION_MINOR    5}\par
00016 {\cf21 #define PICO_SDK_VERSION_REVISION 1}\par
00017 {\cf21 #define PICO_SDK_VERSION_STRING   "1.5.1"}\par
00018 \par
00019 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Motor/build/generated/pico_base/pico/version.h File Reference\par \pard\plain 
{\tc\tcl2 \v version.h}
{\xe \v version.h}
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Motor/build/generated/pico_base/pico/version.h\par \pard\plain 
{\tc\tcl2 \v version.h}
{\xe \v version.h}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /*}\par
00002 {\cf20  * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.}\par
00003 {\cf20  *}\par
00004 {\cf20  * SPDX-License-Identifier: BSD-3-Clause}\par
00005 {\cf20  */}\par
00006 \par
00007 {\cf20 // ---------------------------------------}\par
00008 {\cf20 // THIS FILE IS AUTOGENERATED; DO NOT EDIT}\par
00009 {\cf20 // ---------------------------------------}\par
00010 \par
00011 {\cf21 #ifndef _PICO_VERSION_H}\par
00012 {\cf21 #define _PICO_VERSION_H}\par
00013 \par
00014 {\cf21 #define PICO_SDK_VERSION_MAJOR    1}\par
00015 {\cf21 #define PICO_SDK_VERSION_MINOR    5}\par
00016 {\cf21 #define PICO_SDK_VERSION_REVISION 1}\par
00017 {\cf21 #define PICO_SDK_VERSION_STRING   "1.5.1"}\par
00018 \par
00019 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Temperatura/build/generated/pico_base/pico/version.h File Reference\par \pard\plain 
{\tc\tcl2 \v version.h}
{\xe \v version.h}
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Temperatura/build/generated/pico_base/pico/version.h\par \pard\plain 
{\tc\tcl2 \v version.h}
{\xe \v version.h}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /*}\par
00002 {\cf20  * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.}\par
00003 {\cf20  *}\par
00004 {\cf20  * SPDX-License-Identifier: BSD-3-Clause}\par
00005 {\cf20  */}\par
00006 \par
00007 {\cf20 // ---------------------------------------}\par
00008 {\cf20 // THIS FILE IS AUTOGENERATED; DO NOT EDIT}\par
00009 {\cf20 // ---------------------------------------}\par
00010 \par
00011 {\cf21 #ifndef _PICO_VERSION_H}\par
00012 {\cf21 #define _PICO_VERSION_H}\par
00013 \par
00014 {\cf21 #define PICO_SDK_VERSION_MAJOR    1}\par
00015 {\cf21 #define PICO_SDK_VERSION_MINOR    5}\par
00016 {\cf21 #define PICO_SDK_VERSION_REVISION 1}\par
00017 {\cf21 #define PICO_SDK_VERSION_STRING   "1.5.1"}\par
00018 \par
00019 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Codigo_Final/Bombero/access_sys.c File Reference\par \pard\plain 
{\tc\tcl2 \v access_sys.c}
{\xe \v access_sys.c}
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Archivo principal del sistema de acceso. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Data Structures\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
union {\b myFlags_t}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Estructura para almacenar las banderas de interrupci\'F3n. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b gpio_callback} (uint gpio, uint32_t events)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Callback para las interrupciones GPIO. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setup} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Configura los pines GPIO y el ADC. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b change_direction} (bool direction)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cambia la direcci\'F3n de los motores. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Stop} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Detiene los motores. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funci\'F3n principal del programa. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b comienzo} =0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b final} =0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b duracion} =0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b distancia} =0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
volatile {\b myFlags_t} {\b gFlags}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Variable global vol\'E1til del tipo '{\b myFlags_t}' para almacenar banderas. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Archivo principal del sistema de acceso. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v change_direction\:access_sys.c}
{\xe \v access_sys.c\:change_direction}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void change_direction (bool  {\i direction})}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cambia la direcci\'F3n de los motores. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i direction} \cell }{La direcci\'F3n a la que se deben mover los motores. \cell }
{\row }
}
}{
Definition at line {\b 136} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
{\xe \v gpio_callback\:access_sys.c}
{\xe \v access_sys.c\:gpio_callback}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void gpio_callback (uint  {\i gpio}, uint32_t  {\i events})}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Callback para las interrupciones GPIO. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta funci\'F3n se llama cuando se produce una interrupci\'F3n GPIO. Comprueba si se ha detectado un obst\'E1culo o un incendio.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i gpio} \cell }{El n\'FAmero de pin GPIO que caus\'F3 la interrupci\'F3n. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i events} \cell }{El tipo de evento que caus\'F3 la interrupci\'F3n. \cell }
{\row }
}
}{
Definition at line {\b 61} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
{\xe \v main\:access_sys.c}
{\xe \v access_sys.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funci\'F3n principal del programa. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Configura los pines GPIO y el ADC, luego entra en un bucle infinito donde comprueba las banderas de interrupci\'F3n y act\'FAa en consecuencia.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 si el programa se ejecuta correctamente. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
</<Se rectifican las banderas de las interrupciones\par
</<Rectifica si se activo la bandera de la detecci\'F3n de un obstaculo\par
}{
Definition at line {\b 167} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
{\xe \v setup\:access_sys.c}
{\xe \v access_sys.c\:setup}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setup ()}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Configura los pines GPIO y el ADC. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
< Inicializa el subsistema de entrada/salida est\'E1ndar\par
< Configura los pines GPIO como salidas\par
< Habilita el motor\par
< Configura los pines GPIO como salidas\par
< Habilita el motor\par
<Inicializa los pines del medidor ultrasonnico\par
<inicializa ADC para la temperatura Inicializa el ADC\par
< Habilita el pin ADC correspondiente\par
< Selecciona el canal de entrada, en este caso el canal 0 (ADC0)\par
}{
Definition at line {\b 83} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
{\xe \v Stop\:access_sys.c}
{\xe \v access_sys.c\:Stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Stop ()}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Detiene los motores. }}\par
{
Definition at line {\b 156} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v comienzo\:access_sys.c}
{\xe \v access_sys.c\:comienzo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t comienzo =0}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 36} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
{\xe \v distancia\:access_sys.c}
{\xe \v access_sys.c\:distancia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float distancia =0}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 39} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
{\xe \v duracion\:access_sys.c}
{\xe \v access_sys.c\:duracion}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t duracion =0}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 38} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
{\xe \v final\:access_sys.c}
{\xe \v access_sys.c\:final}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t final =0}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 37} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
{\xe \v gFlags\:access_sys.c}
{\xe \v access_sys.c\:gFlags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
volatile {\b myFlags_t} gFlags}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Variable global vol\'E1til del tipo '{\b myFlags_t}' para almacenar banderas. }}\par
{
Definition at line {\b 51} of file {\b Codigo_Final/Bombero/access_sys.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Codigo_Final/Bombero/access_sys.c\par \pard\plain 
{\tc\tcl2 \v access_sys.c}
{\xe \v access_sys.c}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include "pico/stdlib.h"}\par
00007 {\cf21 #include <stdio.h>}\par
00008 {\cf21 #include "Temperatura.h"}\par
00009 {\cf21 #include "UltraS.h"}\par
00010 {\cf21 #include "hardware/adc.h"}\par
00011 {\cf21 #include "hardware/irq.h"}\par
00012 {\cf21 #include "hardware/sync.h "}\par
00013 {\cf21 #include "hardware/gpio.h"}\par
00014 {\cf21 #include <stdbool.h>}\par
00015 {\cf21 #include "hardware/timer.h"}\par
00016 {\cf21 #include "hardware/pwm.h"}\par
00017 {\cf21 #include <stdbool.h>}\par
00018 {\cf21 #include "pico/time.h"}\par
00019 \par
00020 \par
00021 \par
00023 {\cf21 #define TRIG_PIN 14}\par
00024 {\cf21 #define ECHO_PIN 15 }\par
00026 {\cf21 #define IN1 5}\par
00027 {\cf21 #define IN2 6}\par
00028 {\cf21 #define EN 4}\par
00029 {\cf21 #define IN3 7}\par
00030 {\cf21 #define IN4 8}\par
00031 {\cf21 #define EN2 9}\par
00033 {\cf21 #define CAUDAL_PIN 10}\par
00035 {\cf21 #define ADC_PIN 26  }\par
00036 uint32_t comienzo=0;\par
00037 uint32_t {\cf17 final}=0;\par
00038 uint32_t duracion=0;\par
00039 {\cf18 float} distancia=0;\par
00043 {\cf17 typedef} {\cf17 union}\{\par
00044     uint8_t W;\par
00045     {\cf17 struct}\{\par
00046         {\cf18 bool} Muro :1;\par
00047         {\cf18 bool} Fuego :1;\par
00048         uint8_t      :2;\par
00049     \}B;\par
00050 \}myFlags_t;\par
00051 {\cf17 volatile} myFlags_t gFlags;\par
00052 \par
00061 {\cf18 void} gpio_callback(uint gpio, uint32_t events) \{\par
00062     {\cf18 bool} T = Temp();\par
00063     {\cf19 if}(T)\{\par
00064         gFlags.B.Muro = {\cf17 false};\par
00065         gFlags.B.Fuego = {\cf17 true};\par
00066 \par
00067     \}{\cf19 else} \{\par
00068         gFlags.B.Fuego = {\cf17 false};\par
00069         {\cf18 bool} D = Distancia(comienzo, {\cf17 final}, duracion, distancia, TRIG_PIN, ECHO_PIN);\par
00070         {\cf19 if}(D)\{\par
00071             gFlags.B.Muro = {\cf17 true};\par
00072             \par
00073         \} {\cf19 else}\{\par
00074              gFlags.B.Muro = {\cf17 false};\par
00075         \}\par
00076     \}\par
00077     \par
00078    \par
00079 \}\par
00083 {\cf18 void} setup() \{\par
00085     stdio_init_all();\par
00086     gpio_set_function(CAUDAL_PIN,GPIO_FUNC_SIO);\par
00087     gpio_set_function(TRIG_PIN,GPIO_FUNC_SIO);\par
00088     \par
00090     gpio_init(IN1);\par
00091     gpio_set_dir(IN1, GPIO_OUT);\par
00092     \par
00093     gpio_init(IN2);\par
00094     gpio_set_dir(IN2, GPIO_OUT);\par
00095 \par
00096     gpio_init(EN);\par
00097     gpio_set_dir(EN, GPIO_OUT);\par
00098     \par
00099     gpio_init(CAUDAL_PIN);\par
00100     gpio_set_dir(CAUDAL_PIN, GPIO_OUT);\par
00101     gpio_put(CAUDAL_PIN,0);\par
00103     gpio_put(EN, 1);\par
00104     printf({\cf22 "MOTOR ENCENDIDO"});\par
00106     gpio_init(IN3);\par
00107     gpio_set_dir(IN3, GPIO_OUT);\par
00108     \par
00109     gpio_init(IN4);\par
00110     gpio_set_dir(IN4, GPIO_OUT);\par
00111 \par
00112     gpio_init(EN2);\par
00113     gpio_set_dir(EN2, GPIO_OUT);\par
00114     \par
00116     gpio_put(EN2, 1);\par
00118     init_Distance( TRIG_PIN, ECHO_PIN );\par
00119     gpio_set_irq_enabled_with_callback(14, GPIO_IRQ_EDGE_FALL, {\cf17 true}, gpio_callback);\par
00122     adc_init();\par
00123 \par
00125     adc_gpio_init(ADC_PIN);\par
00126 \par
00128     adc_select_input(0);\par
00129     gpio_set_irq_enabled_with_callback(26, GPIO_IRQ_EDGE_RISE, {\cf17 true}, gpio_callback);\par
00130 \}\par
00136 {\cf18 void} change_direction({\cf18 bool} direction) \{\par
00137     {\cf19 if} (direction) \{\par
00138         gpio_put(EN, 1);\par
00139         gpio_put(IN1, 1);\par
00140         gpio_put(IN2, 0);\par
00141         gpio_put(EN2, 1);\par
00142         gpio_put(IN3, 1);\par
00143         gpio_put(IN4, 0);\par
00144     \} {\cf19 else} \{\par
00145         gpio_put(EN, 1);\par
00146         gpio_put(IN1, 0);\par
00147         gpio_put(IN2, 1);\par
00148         gpio_put(EN2, 1);\par
00149         gpio_put(IN3, 1);\par
00150         gpio_put(IN4, 0);\par
00151     \}\par
00152 \}\par
00156 {\cf18 void} Stop()\{\par
00157     gpio_put(EN, 0);\par
00158     gpio_put(EN2, 0);\par
00159 \}\par
00167 {\cf18 int} main() \{\par
00168     setup();\par
00169     {\cf18 bool} direction = {\cf17 true};\par
00170     change_direction(direction);\par
00171     {\cf19 while} ({\cf17 true}) \{\par
00172         {\cf19 if}(!gFlags.W)\{\par
00173          change_direction(direction);\par
00174         \}\par
00175         {\cf19 while}(gFlags.W)\{\par
00176 \par
00177             {\cf19 if}(gFlags.B.Muro)\{\par
00178                 change_direction(!direction);\par
00179             \}\par
00180             {\cf19 if}(gFlags.B.Fuego)\{\par
00181                 printf({\cf22 "Estoy vivo,fuego"});\par
00182                 Stop();\par
00183                 gpio_put(CAUDAL_PIN, 1);\par
00184 \par
00185             \} {\cf19 else} \{\par
00186                 gpio_put(CAUDAL_PIN, 0);\par
00187             \}\par
00188         \par
00189         \}\par
00190         __wfi();\par
00191     \}\par
00192 {\cf19 return} 0;\par
00193 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Motor/access_sys.c File Reference\par \pard\plain 
{\tc\tcl2 \v access_sys.c}
{\xe \v access_sys.c}
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Programa para controlar la direcci\'F3n de un motor DC. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setup} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Configura los pines GPIO y habilita el motor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b change_direction} (bool direction)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cambia la direcci\'F3n del motor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Punto de entrada del programa. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Programa para controlar la direcci\'F3n de un motor DC. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b Modulo_Motor/access_sys.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v change_direction\:access_sys.c}
{\xe \v access_sys.c\:change_direction}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void change_direction (bool  {\i direction})}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cambia la direcci\'F3n del motor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i direction} \cell }{La direcci\'F3n del motor. Verdadero para una direcci\'F3n, falso para la otra. \cell }
{\row }
}
}{
Definition at line {\b 37} of file {\b Modulo_Motor/access_sys.c}.}\par
}
{\xe \v main\:access_sys.c}
{\xe \v access_sys.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Punto de entrada del programa. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 si el programa se ejecuta correctamente. \par
}}}{
Definition at line {\b 51} of file {\b Modulo_Motor/access_sys.c}.}\par
}
{\xe \v setup\:access_sys.c}
{\xe \v access_sys.c\:setup}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setup ()}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Configura los pines GPIO y habilita el motor. }}\par
{
Definition at line {\b 15} of file {\b Modulo_Motor/access_sys.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modulo_Motor/access_sys.c\par \pard\plain 
{\tc\tcl2 \v access_sys.c}
{\xe \v access_sys.c}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include "pico/stdlib.h"}\par
00007 \par
00008 {\cf21 #define IN1 5 }\par
00009 {\cf21 #define IN2 6 }\par
00010 {\cf21 #define EN 4  }\par
00011 \par
00015 {\cf18 void} setup() \{\par
00016     {\cf20 // Inicializa el subsistema de entrada/salida est\'E1ndar}\par
00017     stdio_init_all();\par
00018     \par
00019     {\cf20 // Configura los pines GPIO como salidas}\par
00020     gpio_init(IN1);\par
00021     gpio_set_dir(IN1, GPIO_OUT);\par
00022     \par
00023     gpio_init(IN2);\par
00024     gpio_set_dir(IN2, GPIO_OUT);\par
00025 \par
00026     gpio_init(EN);\par
00027     gpio_set_dir(EN, GPIO_OUT);\par
00028     \par
00029     {\cf20 // Habilita el motor}\par
00030     gpio_put(EN, 1);\par
00031 \}\par
00032 \par
00037 {\cf18 void} change_direction({\cf18 bool} direction) \{\par
00038     {\cf19 if} (direction) \{\par
00039         gpio_put(IN1, 1);\par
00040         gpio_put(IN2, 0);\par
00041     \} {\cf19 else} \{\par
00042         gpio_put(IN1, 0);\par
00043         gpio_put(IN2, 1);\par
00044     \}\par
00045 \}\par
00046 \par
00051 {\cf18 int} main() \{\par
00052     setup();\par
00053     \par
00054     {\cf18 bool} direction = {\cf17 true};\par
00055     \par
00056     {\cf19 while} ({\cf17 true}) \{\par
00057         change_direction(direction);\par
00058         direction = !direction;\par
00059         sleep_ms(5000);  {\cf20 // Espera 5 segundos}\par
00060     \}\par
00061     \par
00062     {\cf19 return} 0;\par
00063 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Temperatura.c File Reference\par \pard\plain 
{\tc\tcl2 \v Temperatura.c}
{\xe \v Temperatura.c}
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b Temp} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza una medici\'F3n de temperatura. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v Temp\:Temperatura.c}
{\xe \v Temperatura.c\:Temp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Temp ()}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza una medici\'F3n de temperatura. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta funci\'F3n se encarga de realizar una medici\'F3n de temperatura utilizando un sensor de temperatura conectado a la Raspberry Pi Pico. La funci\'F3n devuelve un valor booleano que indica si la temperatura medida supera un umbral predefinido.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Verdadero si la temperatura medida supera el umbral, falso en caso contrario. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
<Lee el valor crudo del ADC (0-4095)\par
<El LM35 da 10mV por cada grado Celsius, y el ADC tiene una resoluci\'F3n de 12 bits (0-4095) con una referencia de 3.3V, por lo que la conversi\'F3n es: Temp (\'B0C) = (Valor ADC * 3.3V / 4095) / 0.01V/\'B0C\par
<1 << 12 es igual a 4096\par
<Conversi\'F3n a grados Celsius\par
<Imprime la temperatura\par
}{
Definition at line {\b 14} of file {\b Temperatura.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Temperatura.c\par \pard\plain 
{\tc\tcl2 \v Temperatura.c}
{\xe \v Temperatura.c}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "pico/stdlib.h"}\par
00002 {\cf21 #include <stdio.h>}\par
00003 {\cf21 #include "hardware/adc.h"}\par
00004 {\cf21 #include <stdbool.h>}\par
00005 \par
00014 {\cf18 bool} Temp() \{\par
00015     \par
00016     {\cf18 bool} Tempt={\cf17 false};\par
00017     uint16_t raw_value = adc_read(); \par
00018         \par
00022     {\cf18 float} voltage = raw_value * 3.3 / (1 << 12); \par
00023     {\cf18 float} temperature = voltage / 0.01; \par
00024 \par
00025     printf({\cf22 "Temperature: %.2f \'B0C\\n"}, temperature); \par
00026 \par
00027     {\cf19 if}(temperature>=60)\{\par
00028         Tempt={\cf17 true};\par
00029     \}\par
00030     {\cf19 return} Tempt;\par
00031 \par
00032 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Temperatura.h File Reference\par \pard\plain 
{\tc\tcl2 \v Temperatura.h}
{\xe \v Temperatura.h}
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Archivo de cabecera para la funci\'F3n de medici\'F3n de temperatura. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b Temp} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza una medici\'F3n de temperatura. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Archivo de cabecera para la funci\'F3n de medici\'F3n de temperatura. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b Temperatura.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v Temp\:Temperatura.h}
{\xe \v Temperatura.h\:Temp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Temp ()}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza una medici\'F3n de temperatura. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta funci\'F3n se encarga de realizar una medici\'F3n de temperatura utilizando un sensor de temperatura conectado a la Raspberry Pi Pico. La funci\'F3n devuelve un valor booleano que indica si la temperatura medida supera un umbral predefinido.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Verdadero si la temperatura medida supera el umbral, falso en caso contrario. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
<Lee el valor crudo del ADC (0-4095)\par
<El LM35 da 10mV por cada grado Celsius, y el ADC tiene una resoluci\'F3n de 12 bits (0-4095) con una referencia de 3.3V, por lo que la conversi\'F3n es: Temp (\'B0C) = (Valor ADC * 3.3V / 4095) / 0.01V/\'B0C\par
<1 << 12 es igual a 4096\par
<Conversi\'F3n a grados Celsius\par
<Imprime la temperatura\par
}{
Definition at line {\b 14} of file {\b Temperatura.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Temperatura.h\par \pard\plain 
{\tc\tcl2 \v Temperatura.h}
{\xe \v Temperatura.h}
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #ifndef TEMPERATURA_H}\par
00007 {\cf21 #define TEMPERATURA_H}\par
00008 \par
00017     {\cf18 bool} Temp();\par
00018 \par
00019 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
UltraS.c File Reference\par \pard\plain 
{\tc\tcl2 \v UltraS.c}
{\xe \v UltraS.c}
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b busy_wait_us_accurate} (uint32_t us)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Espera un n\'FAmero espec\'EDfico de microsegundos. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b init_Distance} (int TRIG_PIN, int ECHO_PIN)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Inicializa los pines del sensor ultrasonido. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b Distancia} (uint32_t {\b comienzo}, uint32_t {\b final}, uint32_t {\b duracion}, float {\b distancia}, int TRIG_PIN, int ECHO_PIN)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Mide la distancia utilizando un sensor ultrasonido. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v busy_wait_us_accurate\:UltraS.c}
{\xe \v UltraS.c\:busy_wait_us_accurate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void busy_wait_us_accurate (uint32_t  {\i us})}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Espera un n\'FAmero espec\'EDfico de microsegundos. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i us} \cell }{El n\'FAmero de microsegundos a esperar. \cell }
{\row }
}
}{
Definition at line {\b 9} of file {\b UltraS.c}.}\par
}
{\xe \v Distancia\:UltraS.c}
{\xe \v UltraS.c\:Distancia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Distancia (uint32_t  {\i comienzo}, uint32_t  {\i final}, uint32_t  {\i duracion}, float  {\i distancia}, int  {\i TRIG_PIN}, int  {\i ECHO_PIN})}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Mide la distancia utilizando un sensor ultrasonido. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i comienzo} \cell }{Tiempo en microsegundos cuando el pulso ECHO comienza. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i final} \cell }{Tiempo en microsegundos cuando el pulso ECHO termina. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i duracion} \cell }{Duraci\'F3n del pulso ECHO en microsegundos. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i distancia} \cell }{Distancia medida en cent\'EDmetros. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i TRIG_PIN} \cell }{El pin de TRIG en la Raspberry Pi Pico. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ECHO_PIN} \cell }{El pin de ECHO en la Raspberry Pi Pico. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Verdadero si la medici\'F3n fue exitosa, falso en caso contrario. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
<Enviar pulso al TRIG\par
<Esperar a que el ECHO comience\par
< Esperar a que el ECHO termine\par
< Calcular la duraci\'F3n y la distancia\par
}{
Definition at line {\b 37} of file {\b UltraS.c}.}\par
}
{\xe \v init_Distance\:UltraS.c}
{\xe \v UltraS.c\:init_Distance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void init_Distance (int  {\i TRIG_PIN}, int  {\i ECHO_PIN})}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Inicializa los pines del sensor ultrasonido. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i TRIG_PIN} \cell }{El pin de TRIG en la Raspberry Pi Pico. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ECHO_PIN} \cell }{El pin de ECHO en la Raspberry Pi Pico. \cell }
{\row }
}
}{
Definition at line {\b 19} of file {\b UltraS.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
UltraS.c\par \pard\plain 
{\tc\tcl2 \v UltraS.c}
{\xe \v UltraS.c}
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "pico/stdlib.h"}\par
00002 {\cf21 #include <stdio.h>}\par
00003 {\cf21 #include <stdbool.h>}\par
00004 \par
00009 {\cf18 void} busy_wait_us_accurate(uint32_t us) \{\par
00010     uint32_t start = time_us_32();\par
00011     {\cf19 while} (time_us_32() - start < us);\par
00012 \}\par
00013 \par
00019 {\cf18 void} init_Distance({\cf18 int} TRIG_PIN, {\cf18 int} ECHO_PIN )\{\par
00020     stdio_init_all();\par
00021     gpio_init(TRIG_PIN);\par
00022     gpio_set_dir(TRIG_PIN, GPIO_OUT);\par
00023     gpio_init(ECHO_PIN);\par
00024     gpio_set_dir(ECHO_PIN, GPIO_IN);\par
00025 \}\par
00026 \par
00037 {\cf18 bool} Distancia(uint32_t comienzo, uint32_t {\cf17 final}, uint32_t duracion,{\cf18 float} distancia,{\cf18 int} TRIG_PIN, {\cf18 int} ECHO_PIN) \{\par
00038 \par
00039     {\cf18 bool} Choque = {\cf17 false};\par
00040 \par
00042     gpio_put(TRIG_PIN, 1);\par
00043     busy_wait_us_accurate(10);\par
00044     gpio_put(TRIG_PIN, 0);\par
00045 \par
00047     {\cf19 while} (gpio_get(ECHO_PIN) == 0);\par
00048     comienzo = time_us_32();\par
00049 \par
00051     {\cf19 while} (gpio_get(ECHO_PIN) == 1);\par
00052     {\cf17 final} = time_us_32();\par
00053 \par
00055     duracion = {\cf17 final} - comienzo;\par
00056     distancia = (duracion * 0.0343) / 2;\par
00057 \par
00058     printf({\cf22 "La distancia es: %.2f cm\\n"}, distancia);\par
00059 \par
00060     {\cf19 if}(distancia<=60)\{\par
00061         Choque={\cf17 true};\par
00062     \}\par
00063     {\cf19 return} Choque;\par
00064 \par
00065 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
UltraS.h File Reference\par \pard\plain 
{\tc\tcl2 \v UltraS.h}
{\xe \v UltraS.h}
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Archivo de cabecera para funciones de medici\'F3n de distancia con un sensor ultrasonido. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b init_Distance} (int TRIG_PIN, int ECHO_PIN)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Inicializa los pines del sensor ultrasonido. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b Distancia} (uint32_t {\b comienzo}, uint32_t {\b final}, uint32_t {\b duracion}, float {\b distancia}, int TRIG_PIN, int ECHO_PIN)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Mide la distancia utilizando un sensor ultrasonido. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b busy_wait_us_accurate} (uint32_t us)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Espera un n\'FAmero espec\'EDfico de microsegundos. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Archivo de cabecera para funciones de medici\'F3n de distancia con un sensor ultrasonido. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b UltraS.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v busy_wait_us_accurate\:UltraS.h}
{\xe \v UltraS.h\:busy_wait_us_accurate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void busy_wait_us_accurate (uint32_t  {\i us})}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Espera un n\'FAmero espec\'EDfico de microsegundos. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i us} \cell }{El n\'FAmero de microsegundos a esperar. \cell }
{\row }
}
}{
Definition at line {\b 9} of file {\b UltraS.c}.}\par
}
{\xe \v Distancia\:UltraS.h}
{\xe \v UltraS.h\:Distancia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Distancia (uint32_t  {\i comienzo}, uint32_t  {\i final}, uint32_t  {\i duracion}, float  {\i distancia}, int  {\i TRIG_PIN}, int  {\i ECHO_PIN})}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Mide la distancia utilizando un sensor ultrasonido. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i comienzo} \cell }{Tiempo en microsegundos cuando el pulso ECHO comienza. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i final} \cell }{Tiempo en microsegundos cuando el pulso ECHO termina. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i duracion} \cell }{Duraci\'F3n del pulso ECHO en microsegundos. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i distancia} \cell }{Distancia medida en cent\'EDmetros. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i TRIG_PIN} \cell }{El pin de TRIG en la Raspberry Pi Pico. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ECHO_PIN} \cell }{El pin de ECHO en la Raspberry Pi Pico. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Verdadero si la medici\'F3n fue exitosa, falso en caso contrario. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
<Enviar pulso al TRIG\par
<Esperar a que el ECHO comience\par
< Esperar a que el ECHO termine\par
< Calcular la duraci\'F3n y la distancia\par
}{
Definition at line {\b 37} of file {\b UltraS.c}.}\par
}
{\xe \v init_Distance\:UltraS.h}
{\xe \v UltraS.h\:init_Distance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void init_Distance (int  {\i TRIG_PIN}, int  {\i ECHO_PIN})}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Inicializa los pines del sensor ultrasonido. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i TRIG_PIN} \cell }{El pin de TRIG en la Raspberry Pi Pico. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ECHO_PIN} \cell }{El pin de ECHO en la Raspberry Pi Pico. \cell }
{\row }
}
}{
Definition at line {\b 19} of file {\b UltraS.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
UltraS.h\par \pard\plain 
{\tc\tcl2 \v UltraS.h}
{\xe \v UltraS.h}
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #ifndef ULTRAS_H}\par
00007 {\cf21 #define ULTRAS_H}\par
00008 \par
00014     {\cf18 void} init_Distance({\cf18 int} TRIG_PIN, {\cf18 int} ECHO_PIN );\par
00015 \par
00026     {\cf18 bool} Distancia(uint32_t comienzo, uint32_t {\cf17 final}, uint32_t duracion,{\cf18 float} distancia,{\cf18 int} TRIG_PIN, {\cf18 int} ECHO_PIN);\par
00027 \par
00032     {\cf18 void} busy_wait_us_accurate(uint32_t us);\par
00033 \par
00034 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gpio_led.h File Reference\par \pard\plain 
{\tc\tcl2 \v gpio_led.h}
{\xe \v gpio_led.h}
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Ricardo Andres Velasquez Velez \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
05/10/2023 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Copyright\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Unlicensed \par
}}}{
Definition in file {\b gpio_led.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gpio_led.h\par \pard\plain 
{\tc\tcl2 \v gpio_led.h}
{\xe \v gpio_led.h}
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00011 {\cf21 #ifndef __GPIO_LED_H__}\par
00012 {\cf21 #define __GPIO_LED_H__}\par
00013 \par
00014 {\cf21 #include <stdint.h>}\par
00015 {\cf21 #include "hardware/gpio.h"}\par
00016 \par
00017 {\cf17 static} {\cf17 inline} {\cf18 void} Motor_init(uint8_t gpio_num)\{\par
00018     gpio_init( gpio_num); \par
00019     gpio_set_dir(gpio_num,{\cf17 true}); \par
00020     gpio_put(gpio_num,{\cf17 false});\par
00021 \}\par
00022 \par
00023 {\cf17 static} {\cf17 inline} {\cf18 void} motor_on(uint8_t gpio_num)\{\par
00024     gpio_put(gpio_num,{\cf17 true});\par
00025 \}\par
00026 \par
00027 {\cf17 static} {\cf17 inline} {\cf18 void} motor_off(uint8_t gpio_num)\{\par
00028     gpio_put(gpio_num,{\cf17 false});\par
00029 \}\par
00030 \par
00031 {\cf17 static} {\cf17 inline} {\cf18 void} motor_toggle(uint8_t gpio_num)\{\par
00032     gpio_xor_mask(0x00000001 << gpio_num);\par
00033 \}\par
00034 \par
00035 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
proxim.c File Reference\par \pard\plain 
{\tc\tcl2 \v proxim.c}
{\xe \v proxim.c}
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Programa para medir la distancia utilizando un sensor de proximidad HC-SR04. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b busy_wait_us_accurate} (uint32_t us)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Espera un n\'FAmero espec\'EDfico de microsegundos. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Punto de entrada del programa. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Programa para medir la distancia utilizando un sensor de proximidad HC-SR04. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b proxim.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v busy_wait_us_accurate\:proxim.c}
{\xe \v proxim.c\:busy_wait_us_accurate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void busy_wait_us_accurate (uint32_t  {\i us})}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Espera un n\'FAmero espec\'EDfico de microsegundos. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i us} \cell }{El n\'FAmero de microsegundos a esperar. \cell }
{\row }
}
}{
Definition at line {\b 16} of file {\b proxim.c}.}\par
}
{\xe \v main\:proxim.c}
{\xe \v proxim.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Punto de entrada del programa. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 si el programa se ejecuta correctamente. \par
}}}{
Definition at line {\b 25} of file {\b proxim.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
proxim.c\par \pard\plain 
{\tc\tcl2 \v proxim.c}
{\xe \v proxim.c}
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include <stdio.h>}\par
00007 {\cf21 #include "pico/stdlib.h"}\par
00008 \par
00009 {\cf21 #define TRIG_PIN 15 }\par
00010 {\cf21 #define ECHO_PIN 14 }\par
00011 \par
00016 {\cf18 void} busy_wait_us_accurate(uint32_t us) \{\par
00017     uint32_t start = time_us_32();\par
00018     {\cf19 while} (time_us_32() - start < us);\par
00019 \}\par
00020 \par
00025 {\cf18 int} main() \{\par
00026     stdio_init_all();\par
00027     gpio_init(TRIG_PIN);\par
00028     gpio_set_dir(TRIG_PIN, GPIO_OUT);\par
00029     gpio_init(ECHO_PIN);\par
00030     gpio_set_dir(ECHO_PIN, GPIO_IN);\par
00031 \par
00032     uint32_t comienzo, {\cf17 final}, duracion;\par
00033     {\cf18 float} distancia;\par
00034 \par
00035     {\cf19 while} (1) \{\par
00036         {\cf20 // Enviar pulso al TRIG}\par
00037         gpio_put(TRIG_PIN, 1);\par
00038         busy_wait_us_accurate(10);\par
00039         gpio_put(TRIG_PIN, 0);\par
00040 \par
00041         {\cf20 // Esperar a que el ECHO comience}\par
00042         {\cf19 while} (gpio_get(ECHO_PIN) == 0);\par
00043         comienzo = time_us_32();\par
00044 \par
00045         {\cf20 // Esperar a que el ECHO termine}\par
00046         {\cf19 while} (gpio_get(ECHO_PIN) == 1);\par
00047         {\cf17 final} = time_us_32();\par
00048 \par
00049         {\cf20 // Calcular la duraci\'F3n y la distancia}\par
00050         duracion = {\cf17 final} - comienzo;\par
00051         distancia = (duracion * 0.0343) / 2;\par
00052 \par
00053         printf({\cf22 "La distancia es: %.2f cm\\n"}, distancia);\par
00054 \par
00055         {\cf20 // Esperar 3 segundos antes de la siguiente medici\'F3n}\par
00056         uint32_t wait_start = time_us_32();\par
00057         {\cf19 while} (time_us_32() - wait_start < 3000000);\par
00058     \}\par
00059 \par
00060     {\cf19 return} 0;\par
00061 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
adc_dma.c File Reference\par \pard\plain 
{\tc\tcl2 \v adc_dma.c}
{\xe \v adc_dma.c}
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Programa para leer la temperatura de un sensor DS18B20. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ds18b20_reset} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza un reset al sensor DS18B20. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ds18b20_write_bit} (bool bit)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Escribe un bit al sensor DS18B20. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b ds18b20_read_bit} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lee un bit del sensor DS18B20. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ds18b20_write_byte} (uint8_t byte)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Escribe un byte al sensor DS18B20. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b ds18b20_read_byte} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lee un byte del sensor DS18B20. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b ds18b20_get_temperature} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obtiene la temperatura actual del sensor DS18B20. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Punto de entrada del programa. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Programa para leer la temperatura de un sensor DS18B20. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Posteriormente un LM35 \par
}{
Definition in file {\b adc_dma.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v ds18b20_get_temperature\:adc_dma.c}
{\xe \v adc_dma.c\:ds18b20_get_temperature}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float ds18b20_get_temperature ()}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obtiene la temperatura actual del sensor DS18B20. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
La temperatura en grados Celsius. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
<Wait for conversion\par
<Skip ROM\par
<Read Scratchpad\par
}{
Definition at line {\b 80} of file {\b adc_dma.c}.}\par
}
{\xe \v ds18b20_read_bit\:adc_dma.c}
{\xe \v adc_dma.c\:ds18b20_read_bit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ds18b20_read_bit ()}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lee un bit del sensor DS18B20. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
El bit le\'EDdo. \par
}}}{
Definition at line {\b 41} of file {\b adc_dma.c}.}\par
}
{\xe \v ds18b20_read_byte\:adc_dma.c}
{\xe \v adc_dma.c\:ds18b20_read_byte}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t ds18b20_read_byte ()}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lee un byte del sensor DS18B20. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
El byte le\'EDdo. \par
}}}{
Definition at line {\b 68} of file {\b adc_dma.c}.}\par
}
{\xe \v ds18b20_reset\:adc_dma.c}
{\xe \v adc_dma.c\:ds18b20_reset}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ds18b20_reset ()}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza un reset al sensor DS18B20. }}\par
{
Definition at line {\b 16} of file {\b adc_dma.c}.}\par
}
{\xe \v ds18b20_write_bit\:adc_dma.c}
{\xe \v adc_dma.c\:ds18b20_write_bit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ds18b20_write_bit (bool  {\i bit})}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Escribe un bit al sensor DS18B20. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bit} \cell }{El bit a escribir. \cell }
{\row }
}
}{
Definition at line {\b 29} of file {\b adc_dma.c}.}\par
}
{\xe \v ds18b20_write_byte\:adc_dma.c}
{\xe \v adc_dma.c\:ds18b20_write_byte}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ds18b20_write_byte (uint8_t  {\i byte})}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Escribe un byte al sensor DS18B20. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i byte} \cell }{El byte a escribir. \cell }
{\row }
}
}{
Definition at line {\b 57} of file {\b adc_dma.c}.}\par
}
{\xe \v main\:adc_dma.c}
{\xe \v adc_dma.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Punto de entrada del programa. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 si el programa se ejecuta correctamente. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
<Leer cada 2 segundos\par
}{
Definition at line {\b 102} of file {\b adc_dma.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
adc_dma.c\par \pard\plain 
{\tc\tcl2 \v adc_dma.c}
{\xe \v adc_dma.c}
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include <stdio.h>}\par
00007 {\cf21 #include "pico/stdlib.h"}\par
00008 {\cf21 #include "hardware/gpio.h"}\par
00009 {\cf21 #include <math.h>}\par
00010 \par
00011 {\cf21 #define DS18B20_PIN 15 }\par
00012 \par
00016 {\cf18 void} ds18b20_reset() \{\par
00017     gpio_set_dir(DS18B20_PIN, GPIO_OUT);\par
00018     gpio_put(DS18B20_PIN, 0);\par
00019     sleep_us(480);\par
00020     gpio_set_dir(DS18B20_PIN, GPIO_IN);\par
00021     sleep_us(70);\par
00022     sleep_us(410);\par
00023 \}\par
00024 \par
00029 {\cf18 void} ds18b20_write_bit({\cf18 bool} bit) \{\par
00030     gpio_set_dir(DS18B20_PIN, GPIO_OUT);\par
00031     gpio_put(DS18B20_PIN, 0);\par
00032     sleep_us(bit ? 1 : 60);\par
00033     gpio_put(DS18B20_PIN, 1);\par
00034     sleep_us(bit ? 60 : 1);\par
00035 \}\par
00036 \par
00041 {\cf18 bool} ds18b20_read_bit() \{\par
00042     {\cf18 bool} bit;\par
00043     gpio_set_dir(DS18B20_PIN, GPIO_OUT);\par
00044     gpio_put(DS18B20_PIN, 0);\par
00045     sleep_us(1);\par
00046     gpio_set_dir(DS18B20_PIN, GPIO_IN);\par
00047     sleep_us(14);\par
00048     bit = gpio_get(DS18B20_PIN);\par
00049     sleep_us(45);\par
00050     {\cf19 return} bit;\par
00051 \}\par
00052 \par
00057 {\cf18 void} ds18b20_write_byte(uint8_t {\cf18 byte}) \{\par
00058     {\cf19 for} ({\cf18 int} i = 0; i < 8; i++) \{\par
00059         ds18b20_write_bit({\cf18 byte} & 1);\par
00060         {\cf18 byte} >>= 1;\par
00061     \}\par
00062 \}\par
00063 \par
00068 uint8_t ds18b20_read_byte() \{\par
00069     uint8_t {\cf18 byte} = 0;\par
00070     {\cf19 for} ({\cf18 int} i = 0; i < 8; i++) \{\par
00071         {\cf18 byte} |= (ds18b20_read_bit() << i);\par
00072     \}\par
00073     {\cf19 return} byte;\par
00074 \}\par
00075 \par
00080 {\cf18 float} ds18b20_get_temperature() \{\par
00081     ds18b20_reset();\par
00082     ds18b20_write_byte(0xCC); {\cf20 // Skip ROM}\par
00083     ds18b20_write_byte(0x44); {\cf20 // Convert T}\par
00084 \par
00085     sleep_ms(750); \par
00086 \par
00087     ds18b20_reset();\par
00088     ds18b20_write_byte(0xCC); \par
00089     ds18b20_write_byte(0xBE); \par
00090 \par
00091     uint8_t temp_lsb = ds18b20_read_byte();\par
00092     uint8_t temp_msb = ds18b20_read_byte();\par
00093     int16_t temp = (temp_msb << 8) | temp_lsb;\par
00094 \par
00095     {\cf19 return} temp / 16.0;\par
00096 \}\par
00097 \par
00102 {\cf18 int} main() \{\par
00103     stdio_init_all();\par
00104     gpio_init(DS18B20_PIN);\par
00105     gpio_set_dir(DS18B20_PIN, GPIO_OUT);\par
00106 \par
00107     {\cf19 while} (1) \{\par
00108         {\cf18 float} temperature = ds18b20_get_temperature();\par
00109         printf({\cf22 "Temperature: %.2f\'B0C\\n"}, temperature);\par
00110         sleep_ms(500); \par
00111     \}\par
00112 \par
00113     {\cf19 return} 0;\par
00114 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
README.md File Reference\par \pard\plain 
{\tc\tcl2 \v README.md}
{\xe \v README.md}
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
